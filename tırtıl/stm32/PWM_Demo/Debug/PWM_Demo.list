
PWM_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005214  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005438  08005438  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005438  08005438  00015438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005440  08005440  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005440  08005440  00015440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005444  08005444  00015444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  2000000c  08005454  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08005454  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101b0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ad  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00032898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00033608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000145c8  00000000  00000000  00034280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010159  00000000  00000000  00048848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c8da  00000000  00000000  000589a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d527b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f64  00000000  00000000  000d52d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080052bc 	.word	0x080052bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080052bc 	.word	0x080052bc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <get_f_motor_new_action>:

MotorType wheelMotors[WHEEL_MOTOR_NUMBER];

uint8_t f_motor_new_action = 0;

uint8_t get_f_motor_new_action(){return f_motor_new_action;}
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
 80004a0:	4b02      	ldr	r3, [pc, #8]	; (80004ac <get_f_motor_new_action+0x10>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	0018      	movs	r0, r3
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	20000028 	.word	0x20000028

080004b0 <set_f_motor_new_action>:
void set_f_motor_new_action(){f_motor_new_action = 1;}
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	4b02      	ldr	r3, [pc, #8]	; (80004c0 <set_f_motor_new_action+0x10>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	701a      	strb	r2, [r3, #0]
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000028 	.word	0x20000028

080004c4 <rst_f_motor_new_action>:
void rst_f_motor_new_action(){f_motor_new_action = 0;}
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	4b02      	ldr	r3, [pc, #8]	; (80004d4 <rst_f_motor_new_action+0x10>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	701a      	strb	r2, [r3, #0]
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000028 	.word	0x20000028

080004d8 <initWheelMotors>:

void initWheelMotors(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
	//MOTOR1
	wheelMotors[1].MOTOR_PORT = GPIOA;
 80004de:	4b58      	ldr	r3, [pc, #352]	; (8000640 <initWheelMotors+0x168>)
 80004e0:	22a0      	movs	r2, #160	; 0xa0
 80004e2:	05d2      	lsls	r2, r2, #23
 80004e4:	615a      	str	r2, [r3, #20]
	wheelMotors[1].MOTOR_F_PIN = GPIO_PIN_9;
 80004e6:	4b56      	ldr	r3, [pc, #344]	; (8000640 <initWheelMotors+0x168>)
 80004e8:	2280      	movs	r2, #128	; 0x80
 80004ea:	0092      	lsls	r2, r2, #2
 80004ec:	619a      	str	r2, [r3, #24]
	wheelMotors[1].MOTOR_B_PIN = GPIO_PIN_8;
 80004ee:	4b54      	ldr	r3, [pc, #336]	; (8000640 <initWheelMotors+0x168>)
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	0052      	lsls	r2, r2, #1
 80004f4:	61da      	str	r2, [r3, #28]

	//MOTOR2
	wheelMotors[0].MOTOR_PORT = GPIOA;
 80004f6:	4b52      	ldr	r3, [pc, #328]	; (8000640 <initWheelMotors+0x168>)
 80004f8:	22a0      	movs	r2, #160	; 0xa0
 80004fa:	05d2      	lsls	r2, r2, #23
 80004fc:	601a      	str	r2, [r3, #0]
	wheelMotors[0].MOTOR_F_PIN = GPIO_PIN_10;
 80004fe:	4b50      	ldr	r3, [pc, #320]	; (8000640 <initWheelMotors+0x168>)
 8000500:	2280      	movs	r2, #128	; 0x80
 8000502:	00d2      	lsls	r2, r2, #3
 8000504:	605a      	str	r2, [r3, #4]
	wheelMotors[0].MOTOR_B_PIN = GPIO_PIN_11;
 8000506:	4b4e      	ldr	r3, [pc, #312]	; (8000640 <initWheelMotors+0x168>)
 8000508:	2280      	movs	r2, #128	; 0x80
 800050a:	0112      	lsls	r2, r2, #4
 800050c:	609a      	str	r2, [r3, #8]

	//MOTOR3
	wheelMotors[2].MOTOR_PORT = GPIOC;
 800050e:	4b4c      	ldr	r3, [pc, #304]	; (8000640 <initWheelMotors+0x168>)
 8000510:	4a4c      	ldr	r2, [pc, #304]	; (8000644 <initWheelMotors+0x16c>)
 8000512:	629a      	str	r2, [r3, #40]	; 0x28
	wheelMotors[2].MOTOR_F_PIN = GPIO_PIN_6;
 8000514:	4b4a      	ldr	r3, [pc, #296]	; (8000640 <initWheelMotors+0x168>)
 8000516:	2240      	movs	r2, #64	; 0x40
 8000518:	62da      	str	r2, [r3, #44]	; 0x2c
	wheelMotors[2].MOTOR_B_PIN = GPIO_PIN_7;
 800051a:	4b49      	ldr	r3, [pc, #292]	; (8000640 <initWheelMotors+0x168>)
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	631a      	str	r2, [r3, #48]	; 0x30

	//MOTOR4
	wheelMotors[3].MOTOR_PORT = GPIOC;
 8000520:	4b47      	ldr	r3, [pc, #284]	; (8000640 <initWheelMotors+0x168>)
 8000522:	4a48      	ldr	r2, [pc, #288]	; (8000644 <initWheelMotors+0x16c>)
 8000524:	63da      	str	r2, [r3, #60]	; 0x3c
	wheelMotors[3].MOTOR_F_PIN = GPIO_PIN_9;
 8000526:	4b46      	ldr	r3, [pc, #280]	; (8000640 <initWheelMotors+0x168>)
 8000528:	2280      	movs	r2, #128	; 0x80
 800052a:	0092      	lsls	r2, r2, #2
 800052c:	641a      	str	r2, [r3, #64]	; 0x40
	wheelMotors[3].MOTOR_B_PIN = GPIO_PIN_8;
 800052e:	4b44      	ldr	r3, [pc, #272]	; (8000640 <initWheelMotors+0x168>)
 8000530:	2280      	movs	r2, #128	; 0x80
 8000532:	0052      	lsls	r2, r2, #1
 8000534:	645a      	str	r2, [r3, #68]	; 0x44


	for(uint8_t i = 0;i<WHEEL_MOTOR_NUMBER;i++){
 8000536:	1dfb      	adds	r3, r7, #7
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
 800053c:	e076      	b.n	800062c <initWheelMotors+0x154>
		wheelMotors[i].velocity = 0;
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	781a      	ldrb	r2, [r3, #0]
 8000542:	493f      	ldr	r1, [pc, #252]	; (8000640 <initWheelMotors+0x168>)
 8000544:	0013      	movs	r3, r2
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	189b      	adds	r3, r3, r2
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	18cb      	adds	r3, r1, r3
 800054e:	330d      	adds	r3, #13
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
		wheelMotors[i].initial_velocity = 0;
 8000554:	1dfb      	adds	r3, r7, #7
 8000556:	781a      	ldrb	r2, [r3, #0]
 8000558:	4939      	ldr	r1, [pc, #228]	; (8000640 <initWheelMotors+0x168>)
 800055a:	0013      	movs	r3, r2
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	189b      	adds	r3, r3, r2
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	18cb      	adds	r3, r1, r3
 8000564:	330e      	adds	r3, #14
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
		wheelMotors[i].step_number = 0;
 800056a:	1dfb      	adds	r3, r7, #7
 800056c:	781a      	ldrb	r2, [r3, #0]
 800056e:	4934      	ldr	r1, [pc, #208]	; (8000640 <initWheelMotors+0x168>)
 8000570:	0013      	movs	r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	189b      	adds	r3, r3, r2
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	18cb      	adds	r3, r1, r3
 800057a:	3310      	adds	r3, #16
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
		wheelMotors[i].action = ACTION_STOP;
 8000580:	1dfb      	adds	r3, r7, #7
 8000582:	781a      	ldrb	r2, [r3, #0]
 8000584:	492e      	ldr	r1, [pc, #184]	; (8000640 <initWheelMotors+0x168>)
 8000586:	0013      	movs	r3, r2
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	189b      	adds	r3, r3, r2
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	18cb      	adds	r3, r1, r3
 8000590:	330c      	adds	r3, #12
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
		wheelMotors[i].target_velocity = 100;
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	781a      	ldrb	r2, [r3, #0]
 800059a:	4929      	ldr	r1, [pc, #164]	; (8000640 <initWheelMotors+0x168>)
 800059c:	0013      	movs	r3, r2
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	189b      	adds	r3, r3, r2
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	18cb      	adds	r3, r1, r3
 80005a6:	330f      	adds	r3, #15
 80005a8:	2264      	movs	r2, #100	; 0x64
 80005aa:	701a      	strb	r2, [r3, #0]
		wheelMotors[i].state_motion = 0;
 80005ac:	1dfb      	adds	r3, r7, #7
 80005ae:	781a      	ldrb	r2, [r3, #0]
 80005b0:	4923      	ldr	r1, [pc, #140]	; (8000640 <initWheelMotors+0x168>)
 80005b2:	0013      	movs	r3, r2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	189b      	adds	r3, r3, r2
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	18cb      	adds	r3, r1, r3
 80005bc:	3311      	adds	r3, #17
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(wheelMotors[i].MOTOR_PORT,wheelMotors[i].MOTOR_B_PIN,0);
 80005c2:	1dfb      	adds	r3, r7, #7
 80005c4:	781a      	ldrb	r2, [r3, #0]
 80005c6:	491e      	ldr	r1, [pc, #120]	; (8000640 <initWheelMotors+0x168>)
 80005c8:	0013      	movs	r3, r2
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	189b      	adds	r3, r3, r2
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	585b      	ldr	r3, [r3, r1]
 80005d2:	0018      	movs	r0, r3
 80005d4:	1dfb      	adds	r3, r7, #7
 80005d6:	781a      	ldrb	r2, [r3, #0]
 80005d8:	4919      	ldr	r1, [pc, #100]	; (8000640 <initWheelMotors+0x168>)
 80005da:	0013      	movs	r3, r2
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	189b      	adds	r3, r3, r2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	18cb      	adds	r3, r1, r3
 80005e4:	3308      	adds	r3, #8
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	2200      	movs	r2, #0
 80005ec:	0019      	movs	r1, r3
 80005ee:	f001 ffa3 	bl	8002538 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(wheelMotors[i].MOTOR_PORT,wheelMotors[i].MOTOR_F_PIN,0);
 80005f2:	1dfb      	adds	r3, r7, #7
 80005f4:	781a      	ldrb	r2, [r3, #0]
 80005f6:	4912      	ldr	r1, [pc, #72]	; (8000640 <initWheelMotors+0x168>)
 80005f8:	0013      	movs	r3, r2
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	189b      	adds	r3, r3, r2
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	585b      	ldr	r3, [r3, r1]
 8000602:	0018      	movs	r0, r3
 8000604:	1dfb      	adds	r3, r7, #7
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	490d      	ldr	r1, [pc, #52]	; (8000640 <initWheelMotors+0x168>)
 800060a:	0013      	movs	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	189b      	adds	r3, r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	18cb      	adds	r3, r1, r3
 8000614:	3304      	adds	r3, #4
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	b29b      	uxth	r3, r3
 800061a:	2200      	movs	r2, #0
 800061c:	0019      	movs	r1, r3
 800061e:	f001 ff8b 	bl	8002538 <HAL_GPIO_WritePin>
	for(uint8_t i = 0;i<WHEEL_MOTOR_NUMBER;i++){
 8000622:	1dfb      	adds	r3, r7, #7
 8000624:	781a      	ldrb	r2, [r3, #0]
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	3201      	adds	r2, #1
 800062a:	701a      	strb	r2, [r3, #0]
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b03      	cmp	r3, #3
 8000632:	d984      	bls.n	800053e <initWheelMotors+0x66>

	}

}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	b002      	add	sp, #8
 800063c:	bd80      	pop	{r7, pc}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	2000005c 	.word	0x2000005c
 8000644:	50000800 	.word	0x50000800

08000648 <motor_action>:
//motor_number: 1,2,3,4
//action: ileri, geri, dur
//hiz: 0-100
void motor_action(uint8_t motor_number, uint8_t action, uint8_t velocity, uint8_t step_number){
 8000648:	b5b0      	push	{r4, r5, r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	0005      	movs	r5, r0
 8000650:	000c      	movs	r4, r1
 8000652:	0010      	movs	r0, r2
 8000654:	0019      	movs	r1, r3
 8000656:	1dfb      	adds	r3, r7, #7
 8000658:	1c2a      	adds	r2, r5, #0
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	1dbb      	adds	r3, r7, #6
 800065e:	1c22      	adds	r2, r4, #0
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	1d7b      	adds	r3, r7, #5
 8000664:	1c02      	adds	r2, r0, #0
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	1c0a      	adds	r2, r1, #0
 800066c:	701a      	strb	r2, [r3, #0]
	if (action <= ACTION_STEP_LEFT){
 800066e:	1dbb      	adds	r3, r7, #6
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b06      	cmp	r3, #6
 8000674:	d80c      	bhi.n	8000690 <motor_action+0x48>
		wheelMotors[motor_number].action = action;
 8000676:	1dfb      	adds	r3, r7, #7
 8000678:	781a      	ldrb	r2, [r3, #0]
 800067a:	4942      	ldr	r1, [pc, #264]	; (8000784 <motor_action+0x13c>)
 800067c:	0013      	movs	r3, r2
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	189b      	adds	r3, r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	18cb      	adds	r3, r1, r3
 8000686:	330c      	adds	r3, #12
 8000688:	1dba      	adds	r2, r7, #6
 800068a:	7812      	ldrb	r2, [r2, #0]
 800068c:	701a      	strb	r2, [r3, #0]
 800068e:	e00a      	b.n	80006a6 <motor_action+0x5e>
	}
	else {
		wheelMotors[motor_number].action = ACTION_STOP;
 8000690:	1dfb      	adds	r3, r7, #7
 8000692:	781a      	ldrb	r2, [r3, #0]
 8000694:	493b      	ldr	r1, [pc, #236]	; (8000784 <motor_action+0x13c>)
 8000696:	0013      	movs	r3, r2
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	189b      	adds	r3, r3, r2
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	18cb      	adds	r3, r1, r3
 80006a0:	330c      	adds	r3, #12
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(velocity > 100) {
 80006a6:	1d7b      	adds	r3, r7, #5
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b64      	cmp	r3, #100	; 0x64
 80006ac:	d916      	bls.n	80006dc <motor_action+0x94>
		wheelMotors[motor_number].velocity = 0;
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	781a      	ldrb	r2, [r3, #0]
 80006b2:	4934      	ldr	r1, [pc, #208]	; (8000784 <motor_action+0x13c>)
 80006b4:	0013      	movs	r3, r2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	189b      	adds	r3, r3, r2
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	18cb      	adds	r3, r1, r3
 80006be:	330d      	adds	r3, #13
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
		wheelMotors[motor_number].initial_velocity = 0;
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	781a      	ldrb	r2, [r3, #0]
 80006c8:	492e      	ldr	r1, [pc, #184]	; (8000784 <motor_action+0x13c>)
 80006ca:	0013      	movs	r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	189b      	adds	r3, r3, r2
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	18cb      	adds	r3, r1, r3
 80006d4:	330e      	adds	r3, #14
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	e025      	b.n	8000728 <motor_action+0xe0>
	}
	else{
		wheelMotors[motor_number].velocity = 100;
 80006dc:	1dfb      	adds	r3, r7, #7
 80006de:	781a      	ldrb	r2, [r3, #0]
 80006e0:	4928      	ldr	r1, [pc, #160]	; (8000784 <motor_action+0x13c>)
 80006e2:	0013      	movs	r3, r2
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	189b      	adds	r3, r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	18cb      	adds	r3, r1, r3
 80006ec:	330d      	adds	r3, #13
 80006ee:	2264      	movs	r2, #100	; 0x64
 80006f0:	701a      	strb	r2, [r3, #0]
		wheelMotors[motor_number].initial_velocity = 100;
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	781a      	ldrb	r2, [r3, #0]
 80006f6:	4923      	ldr	r1, [pc, #140]	; (8000784 <motor_action+0x13c>)
 80006f8:	0013      	movs	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	189b      	adds	r3, r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	18cb      	adds	r3, r1, r3
 8000702:	330e      	adds	r3, #14
 8000704:	2264      	movs	r2, #100	; 0x64
 8000706:	701a      	strb	r2, [r3, #0]
		wheelMotors[motor_number].target_velocity = 100-velocity;
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	781a      	ldrb	r2, [r3, #0]
 800070c:	1d7b      	adds	r3, r7, #5
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2164      	movs	r1, #100	; 0x64
 8000712:	1acb      	subs	r3, r1, r3
 8000714:	b2d8      	uxtb	r0, r3
 8000716:	491b      	ldr	r1, [pc, #108]	; (8000784 <motor_action+0x13c>)
 8000718:	0013      	movs	r3, r2
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	189b      	adds	r3, r3, r2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	18cb      	adds	r3, r1, r3
 8000722:	330f      	adds	r3, #15
 8000724:	1c02      	adds	r2, r0, #0
 8000726:	701a      	strb	r2, [r3, #0]
	}
	wheelMotors[motor_number].step_number = step_number;
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	4915      	ldr	r1, [pc, #84]	; (8000784 <motor_action+0x13c>)
 800072e:	0013      	movs	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	189b      	adds	r3, r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	18cb      	adds	r3, r1, r3
 8000738:	3310      	adds	r3, #16
 800073a:	1d3a      	adds	r2, r7, #4
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	701a      	strb	r2, [r3, #0]
	wheelMotors[motor_number].state_motion = 0;
 8000740:	1dfb      	adds	r3, r7, #7
 8000742:	781a      	ldrb	r2, [r3, #0]
 8000744:	490f      	ldr	r1, [pc, #60]	; (8000784 <motor_action+0x13c>)
 8000746:	0013      	movs	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	189b      	adds	r3, r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	18cb      	adds	r3, r1, r3
 8000750:	3311      	adds	r3, #17
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]

	wheelMotors[motor_number].no_move = (velocity == 0) ? 1:0;
 8000756:	1d7b      	adds	r3, r7, #5
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	425a      	negs	r2, r3
 800075c:	4153      	adcs	r3, r2
 800075e:	b2d9      	uxtb	r1, r3
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	781a      	ldrb	r2, [r3, #0]
 8000764:	0008      	movs	r0, r1
 8000766:	4907      	ldr	r1, [pc, #28]	; (8000784 <motor_action+0x13c>)
 8000768:	0013      	movs	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	189b      	adds	r3, r3, r2
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	18cb      	adds	r3, r1, r3
 8000772:	3312      	adds	r3, #18
 8000774:	1c02      	adds	r2, r0, #0
 8000776:	701a      	strb	r2, [r3, #0]

	set_f_motor_new_action();
 8000778:	f7ff fe9a 	bl	80004b0 <set_f_motor_new_action>
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b002      	add	sp, #8
 8000782:	bdb0      	pop	{r4, r5, r7, pc}
 8000784:	2000005c 	.word	0x2000005c

08000788 <motor_all_action>:

void motor_all_action(uint8_t action, uint8_t velocity, uint8_t step){
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	0004      	movs	r4, r0
 8000790:	0008      	movs	r0, r1
 8000792:	0011      	movs	r1, r2
 8000794:	1dfb      	adds	r3, r7, #7
 8000796:	1c22      	adds	r2, r4, #0
 8000798:	701a      	strb	r2, [r3, #0]
 800079a:	1dbb      	adds	r3, r7, #6
 800079c:	1c02      	adds	r2, r0, #0
 800079e:	701a      	strb	r2, [r3, #0]
 80007a0:	1d7b      	adds	r3, r7, #5
 80007a2:	1c0a      	adds	r2, r1, #0
 80007a4:	701a      	strb	r2, [r3, #0]
	if(action == ACTION_STEP_RIGHT){
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b05      	cmp	r3, #5
 80007ac:	d126      	bne.n	80007fc <motor_all_action+0x74>
		motor_action(0,action,velocity,step);
 80007ae:	1d7b      	adds	r3, r7, #5
 80007b0:	7818      	ldrb	r0, [r3, #0]
 80007b2:	1dbb      	adds	r3, r7, #6
 80007b4:	781a      	ldrb	r2, [r3, #0]
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	7819      	ldrb	r1, [r3, #0]
 80007ba:	0003      	movs	r3, r0
 80007bc:	2000      	movs	r0, #0
 80007be:	f7ff ff43 	bl	8000648 <motor_action>
		motor_action(1,action,0,step);
 80007c2:	1d7b      	adds	r3, r7, #5
 80007c4:	781a      	ldrb	r2, [r3, #0]
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	7819      	ldrb	r1, [r3, #0]
 80007ca:	0013      	movs	r3, r2
 80007cc:	2200      	movs	r2, #0
 80007ce:	2001      	movs	r0, #1
 80007d0:	f7ff ff3a 	bl	8000648 <motor_action>
		motor_action(2,action,velocity,step);
 80007d4:	1d7b      	adds	r3, r7, #5
 80007d6:	7818      	ldrb	r0, [r3, #0]
 80007d8:	1dbb      	adds	r3, r7, #6
 80007da:	781a      	ldrb	r2, [r3, #0]
 80007dc:	1dfb      	adds	r3, r7, #7
 80007de:	7819      	ldrb	r1, [r3, #0]
 80007e0:	0003      	movs	r3, r0
 80007e2:	2002      	movs	r0, #2
 80007e4:	f7ff ff30 	bl	8000648 <motor_action>
		motor_action(3,action,0,step);
 80007e8:	1d7b      	adds	r3, r7, #5
 80007ea:	781a      	ldrb	r2, [r3, #0]
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	7819      	ldrb	r1, [r3, #0]
 80007f0:	0013      	movs	r3, r2
 80007f2:	2200      	movs	r2, #0
 80007f4:	2003      	movs	r0, #3
 80007f6:	f7ff ff27 	bl	8000648 <motor_action>
		motor_action(0,action,velocity,step);
		motor_action(1,action,velocity,step);
		motor_action(2,action,velocity,step);
		motor_action(3,action,velocity,step);
	}
}
 80007fa:	e052      	b.n	80008a2 <motor_all_action+0x11a>
	else if(action == ACTION_STEP_LEFT){
 80007fc:	1dfb      	adds	r3, r7, #7
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b06      	cmp	r3, #6
 8000802:	d126      	bne.n	8000852 <motor_all_action+0xca>
		motor_action(0,action,0,step);
 8000804:	1d7b      	adds	r3, r7, #5
 8000806:	781a      	ldrb	r2, [r3, #0]
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	7819      	ldrb	r1, [r3, #0]
 800080c:	0013      	movs	r3, r2
 800080e:	2200      	movs	r2, #0
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff ff19 	bl	8000648 <motor_action>
		motor_action(1,action,velocity,step);
 8000816:	1d7b      	adds	r3, r7, #5
 8000818:	7818      	ldrb	r0, [r3, #0]
 800081a:	1dbb      	adds	r3, r7, #6
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	7819      	ldrb	r1, [r3, #0]
 8000822:	0003      	movs	r3, r0
 8000824:	2001      	movs	r0, #1
 8000826:	f7ff ff0f 	bl	8000648 <motor_action>
		motor_action(2,action,0,step);
 800082a:	1d7b      	adds	r3, r7, #5
 800082c:	781a      	ldrb	r2, [r3, #0]
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	7819      	ldrb	r1, [r3, #0]
 8000832:	0013      	movs	r3, r2
 8000834:	2200      	movs	r2, #0
 8000836:	2002      	movs	r0, #2
 8000838:	f7ff ff06 	bl	8000648 <motor_action>
		motor_action(3,action,velocity,step);
 800083c:	1d7b      	adds	r3, r7, #5
 800083e:	7818      	ldrb	r0, [r3, #0]
 8000840:	1dbb      	adds	r3, r7, #6
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	7819      	ldrb	r1, [r3, #0]
 8000848:	0003      	movs	r3, r0
 800084a:	2003      	movs	r0, #3
 800084c:	f7ff fefc 	bl	8000648 <motor_action>
}
 8000850:	e027      	b.n	80008a2 <motor_all_action+0x11a>
		motor_action(0,action,velocity,step);
 8000852:	1d7b      	adds	r3, r7, #5
 8000854:	7818      	ldrb	r0, [r3, #0]
 8000856:	1dbb      	adds	r3, r7, #6
 8000858:	781a      	ldrb	r2, [r3, #0]
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	7819      	ldrb	r1, [r3, #0]
 800085e:	0003      	movs	r3, r0
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fef1 	bl	8000648 <motor_action>
		motor_action(1,action,velocity,step);
 8000866:	1d7b      	adds	r3, r7, #5
 8000868:	7818      	ldrb	r0, [r3, #0]
 800086a:	1dbb      	adds	r3, r7, #6
 800086c:	781a      	ldrb	r2, [r3, #0]
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	7819      	ldrb	r1, [r3, #0]
 8000872:	0003      	movs	r3, r0
 8000874:	2001      	movs	r0, #1
 8000876:	f7ff fee7 	bl	8000648 <motor_action>
		motor_action(2,action,velocity,step);
 800087a:	1d7b      	adds	r3, r7, #5
 800087c:	7818      	ldrb	r0, [r3, #0]
 800087e:	1dbb      	adds	r3, r7, #6
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	7819      	ldrb	r1, [r3, #0]
 8000886:	0003      	movs	r3, r0
 8000888:	2002      	movs	r0, #2
 800088a:	f7ff fedd 	bl	8000648 <motor_action>
		motor_action(3,action,velocity,step);
 800088e:	1d7b      	adds	r3, r7, #5
 8000890:	7818      	ldrb	r0, [r3, #0]
 8000892:	1dbb      	adds	r3, r7, #6
 8000894:	781a      	ldrb	r2, [r3, #0]
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	7819      	ldrb	r1, [r3, #0]
 800089a:	0003      	movs	r3, r0
 800089c:	2003      	movs	r0, #3
 800089e:	f7ff fed3 	bl	8000648 <motor_action>
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b003      	add	sp, #12
 80008a8:	bd90      	pop	{r4, r7, pc}
	...

080008ac <motor_pwm_timer_callback>:

void motor_pwm_timer_callback()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
	static uint16_t motor_pwm_counter = 0;
	static uint16_t velocity_change_counter = 0;
	static uint8_t state_motion = 0;
	if(motor_pwm_counter < 100){
 80008b2:	4bea      	ldr	r3, [pc, #936]	; (8000c5c <motor_pwm_timer_callback+0x3b0>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	2b63      	cmp	r3, #99	; 0x63
 80008b8:	d900      	bls.n	80008bc <motor_pwm_timer_callback+0x10>
 80008ba:	e0ee      	b.n	8000a9a <motor_pwm_timer_callback+0x1ee>
		for(uint8_t i = 0;i<WHEEL_MOTOR_NUMBER;i++){
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
 80008c2:	e0de      	b.n	8000a82 <motor_pwm_timer_callback+0x1d6>

			if(wheelMotors[i].velocity == motor_pwm_counter){
 80008c4:	1dfb      	adds	r3, r7, #7
 80008c6:	781a      	ldrb	r2, [r3, #0]
 80008c8:	49e5      	ldr	r1, [pc, #916]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 80008ca:	0013      	movs	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	189b      	adds	r3, r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	18cb      	adds	r3, r1, r3
 80008d4:	330d      	adds	r3, #13
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b29a      	uxth	r2, r3
 80008da:	4be0      	ldr	r3, [pc, #896]	; (8000c5c <motor_pwm_timer_callback+0x3b0>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d000      	beq.n	80008e4 <motor_pwm_timer_callback+0x38>
 80008e2:	e0c9      	b.n	8000a78 <motor_pwm_timer_callback+0x1cc>
				if(wheelMotors[i].action == ACTION_STEP_FORWARD){
 80008e4:	1dfb      	adds	r3, r7, #7
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	49dd      	ldr	r1, [pc, #884]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 80008ea:	0013      	movs	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	189b      	adds	r3, r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	18cb      	adds	r3, r1, r3
 80008f4:	330c      	adds	r3, #12
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d130      	bne.n	800095e <motor_pwm_timer_callback+0xb2>
					HAL_GPIO_WritePin(wheelMotors[i].MOTOR_PORT,wheelMotors[i].MOTOR_F_PIN,1);
 80008fc:	1dfb      	adds	r3, r7, #7
 80008fe:	781a      	ldrb	r2, [r3, #0]
 8000900:	49d7      	ldr	r1, [pc, #860]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000902:	0013      	movs	r3, r2
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	189b      	adds	r3, r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	585b      	ldr	r3, [r3, r1]
 800090c:	0018      	movs	r0, r3
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781a      	ldrb	r2, [r3, #0]
 8000912:	49d3      	ldr	r1, [pc, #844]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000914:	0013      	movs	r3, r2
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	189b      	adds	r3, r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	18cb      	adds	r3, r1, r3
 800091e:	3304      	adds	r3, #4
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	b29b      	uxth	r3, r3
 8000924:	2201      	movs	r2, #1
 8000926:	0019      	movs	r1, r3
 8000928:	f001 fe06 	bl	8002538 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(wheelMotors[i].MOTOR_PORT,wheelMotors[i].MOTOR_B_PIN,0);
 800092c:	1dfb      	adds	r3, r7, #7
 800092e:	781a      	ldrb	r2, [r3, #0]
 8000930:	49cb      	ldr	r1, [pc, #812]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000932:	0013      	movs	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	189b      	adds	r3, r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	585b      	ldr	r3, [r3, r1]
 800093c:	0018      	movs	r0, r3
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	781a      	ldrb	r2, [r3, #0]
 8000942:	49c7      	ldr	r1, [pc, #796]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000944:	0013      	movs	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	189b      	adds	r3, r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	18cb      	adds	r3, r1, r3
 800094e:	3308      	adds	r3, #8
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	b29b      	uxth	r3, r3
 8000954:	2200      	movs	r2, #0
 8000956:	0019      	movs	r1, r3
 8000958:	f001 fdee 	bl	8002538 <HAL_GPIO_WritePin>
 800095c:	e08c      	b.n	8000a78 <motor_pwm_timer_callback+0x1cc>
				}
				else if(wheelMotors[i].action == ACTION_STEP_BACKWARD){
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781a      	ldrb	r2, [r3, #0]
 8000962:	49bf      	ldr	r1, [pc, #764]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000964:	0013      	movs	r3, r2
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	189b      	adds	r3, r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	18cb      	adds	r3, r1, r3
 800096e:	330c      	adds	r3, #12
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b04      	cmp	r3, #4
 8000974:	d130      	bne.n	80009d8 <motor_pwm_timer_callback+0x12c>
					HAL_GPIO_WritePin(wheelMotors[i].MOTOR_PORT,wheelMotors[i].MOTOR_F_PIN,0);
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781a      	ldrb	r2, [r3, #0]
 800097a:	49b9      	ldr	r1, [pc, #740]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 800097c:	0013      	movs	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	189b      	adds	r3, r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	585b      	ldr	r3, [r3, r1]
 8000986:	0018      	movs	r0, r3
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	781a      	ldrb	r2, [r3, #0]
 800098c:	49b4      	ldr	r1, [pc, #720]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 800098e:	0013      	movs	r3, r2
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	189b      	adds	r3, r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	18cb      	adds	r3, r1, r3
 8000998:	3304      	adds	r3, #4
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	b29b      	uxth	r3, r3
 800099e:	2200      	movs	r2, #0
 80009a0:	0019      	movs	r1, r3
 80009a2:	f001 fdc9 	bl	8002538 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(wheelMotors[i].MOTOR_PORT,wheelMotors[i].MOTOR_B_PIN,1);
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781a      	ldrb	r2, [r3, #0]
 80009aa:	49ad      	ldr	r1, [pc, #692]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 80009ac:	0013      	movs	r3, r2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	189b      	adds	r3, r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	585b      	ldr	r3, [r3, r1]
 80009b6:	0018      	movs	r0, r3
 80009b8:	1dfb      	adds	r3, r7, #7
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	49a8      	ldr	r1, [pc, #672]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 80009be:	0013      	movs	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	189b      	adds	r3, r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	18cb      	adds	r3, r1, r3
 80009c8:	3308      	adds	r3, #8
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	2201      	movs	r2, #1
 80009d0:	0019      	movs	r1, r3
 80009d2:	f001 fdb1 	bl	8002538 <HAL_GPIO_WritePin>
 80009d6:	e04f      	b.n	8000a78 <motor_pwm_timer_callback+0x1cc>
				}
				else if(wheelMotors[i].action == ACTION_STEP_LEFT |
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	781a      	ldrb	r2, [r3, #0]
 80009dc:	49a0      	ldr	r1, [pc, #640]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 80009de:	0013      	movs	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	189b      	adds	r3, r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	18cb      	adds	r3, r1, r3
 80009e8:	330c      	adds	r3, #12
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	3b06      	subs	r3, #6
 80009ee:	425a      	negs	r2, r3
 80009f0:	4153      	adcs	r3, r2
 80009f2:	b2d9      	uxtb	r1, r3
							wheelMotors[i].action == ACTION_STEP_RIGHT ){
 80009f4:	1dfb      	adds	r3, r7, #7
 80009f6:	781a      	ldrb	r2, [r3, #0]
 80009f8:	4899      	ldr	r0, [pc, #612]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 80009fa:	0013      	movs	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	18c3      	adds	r3, r0, r3
 8000a04:	330c      	adds	r3, #12
 8000a06:	781b      	ldrb	r3, [r3, #0]
				else if(wheelMotors[i].action == ACTION_STEP_LEFT |
 8000a08:	3b05      	subs	r3, #5
 8000a0a:	425a      	negs	r2, r3
 8000a0c:	4153      	adcs	r3, r2
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	430b      	orrs	r3, r1
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d02f      	beq.n	8000a78 <motor_pwm_timer_callback+0x1cc>
					HAL_GPIO_WritePin(wheelMotors[i].MOTOR_PORT,wheelMotors[i].MOTOR_F_PIN,1);
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781a      	ldrb	r2, [r3, #0]
 8000a1c:	4990      	ldr	r1, [pc, #576]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000a1e:	0013      	movs	r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	189b      	adds	r3, r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	585b      	ldr	r3, [r3, r1]
 8000a28:	0018      	movs	r0, r3
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	781a      	ldrb	r2, [r3, #0]
 8000a2e:	498c      	ldr	r1, [pc, #560]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000a30:	0013      	movs	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	189b      	adds	r3, r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	18cb      	adds	r3, r1, r3
 8000a3a:	3304      	adds	r3, #4
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	2201      	movs	r2, #1
 8000a42:	0019      	movs	r1, r3
 8000a44:	f001 fd78 	bl	8002538 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(wheelMotors[i].MOTOR_PORT,wheelMotors[i].MOTOR_B_PIN,0);
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	4984      	ldr	r1, [pc, #528]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000a4e:	0013      	movs	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	189b      	adds	r3, r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	585b      	ldr	r3, [r3, r1]
 8000a58:	0018      	movs	r0, r3
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	781a      	ldrb	r2, [r3, #0]
 8000a5e:	4980      	ldr	r1, [pc, #512]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000a60:	0013      	movs	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	189b      	adds	r3, r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	18cb      	adds	r3, r1, r3
 8000a6a:	3308      	adds	r3, #8
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	2200      	movs	r2, #0
 8000a72:	0019      	movs	r1, r3
 8000a74:	f001 fd60 	bl	8002538 <HAL_GPIO_WritePin>
		for(uint8_t i = 0;i<WHEEL_MOTOR_NUMBER;i++){
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	781a      	ldrb	r2, [r3, #0]
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	3201      	adds	r2, #1
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	d800      	bhi.n	8000a8c <motor_pwm_timer_callback+0x1e0>
 8000a8a:	e71b      	b.n	80008c4 <motor_pwm_timer_callback+0x18>
				}
			}
		}
		motor_pwm_counter++;
 8000a8c:	4b73      	ldr	r3, [pc, #460]	; (8000c5c <motor_pwm_timer_callback+0x3b0>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	4b71      	ldr	r3, [pc, #452]	; (8000c5c <motor_pwm_timer_callback+0x3b0>)
 8000a96:	801a      	strh	r2, [r3, #0]
						break;
				}
			}
		}
	}
}
 8000a98:	e10a      	b.n	8000cb0 <motor_pwm_timer_callback+0x404>
		motor_pwm_counter = 0;
 8000a9a:	4b70      	ldr	r3, [pc, #448]	; (8000c5c <motor_pwm_timer_callback+0x3b0>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0;i<WHEEL_MOTOR_NUMBER;i++){
 8000aa0:	1dbb      	adds	r3, r7, #6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	e0fe      	b.n	8000ca6 <motor_pwm_timer_callback+0x3fa>
			HAL_GPIO_WritePin(wheelMotors[i].MOTOR_PORT,wheelMotors[i].MOTOR_B_PIN,0);
 8000aa8:	1dbb      	adds	r3, r7, #6
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	496c      	ldr	r1, [pc, #432]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000aae:	0013      	movs	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	189b      	adds	r3, r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	585b      	ldr	r3, [r3, r1]
 8000ab8:	0018      	movs	r0, r3
 8000aba:	1dbb      	adds	r3, r7, #6
 8000abc:	781a      	ldrb	r2, [r3, #0]
 8000abe:	4968      	ldr	r1, [pc, #416]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000ac0:	0013      	movs	r3, r2
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	189b      	adds	r3, r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	18cb      	adds	r3, r1, r3
 8000aca:	3308      	adds	r3, #8
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	f001 fd30 	bl	8002538 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(wheelMotors[i].MOTOR_PORT,wheelMotors[i].MOTOR_F_PIN,0);
 8000ad8:	1dbb      	adds	r3, r7, #6
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	4960      	ldr	r1, [pc, #384]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000ade:	0013      	movs	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	189b      	adds	r3, r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	585b      	ldr	r3, [r3, r1]
 8000ae8:	0018      	movs	r0, r3
 8000aea:	1dbb      	adds	r3, r7, #6
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	495c      	ldr	r1, [pc, #368]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000af0:	0013      	movs	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	189b      	adds	r3, r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	18cb      	adds	r3, r1, r3
 8000afa:	3304      	adds	r3, #4
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	2200      	movs	r2, #0
 8000b02:	0019      	movs	r1, r3
 8000b04:	f001 fd18 	bl	8002538 <HAL_GPIO_WritePin>
			if(wheelMotors[i].no_move == 0){
 8000b08:	1dbb      	adds	r3, r7, #6
 8000b0a:	781a      	ldrb	r2, [r3, #0]
 8000b0c:	4954      	ldr	r1, [pc, #336]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000b0e:	0013      	movs	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	189b      	adds	r3, r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	18cb      	adds	r3, r1, r3
 8000b18:	3312      	adds	r3, #18
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d000      	beq.n	8000b22 <motor_pwm_timer_callback+0x276>
 8000b20:	e0bb      	b.n	8000c9a <motor_pwm_timer_callback+0x3ee>
				switch(wheelMotors[i].state_motion){
 8000b22:	1dbb      	adds	r3, r7, #6
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	494e      	ldr	r1, [pc, #312]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000b28:	0013      	movs	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	189b      	adds	r3, r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	18cb      	adds	r3, r1, r3
 8000b32:	3311      	adds	r3, #17
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d06c      	beq.n	8000c14 <motor_pwm_timer_callback+0x368>
 8000b3a:	dd00      	ble.n	8000b3e <motor_pwm_timer_callback+0x292>
 8000b3c:	e0ae      	b.n	8000c9c <motor_pwm_timer_callback+0x3f0>
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d002      	beq.n	8000b48 <motor_pwm_timer_callback+0x29c>
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d038      	beq.n	8000bb8 <motor_pwm_timer_callback+0x30c>
 8000b46:	e0a9      	b.n	8000c9c <motor_pwm_timer_callback+0x3f0>
						if(wheelMotors[i].target_velocity < wheelMotors[i].velocity) {
 8000b48:	1dbb      	adds	r3, r7, #6
 8000b4a:	781a      	ldrb	r2, [r3, #0]
 8000b4c:	4944      	ldr	r1, [pc, #272]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000b4e:	0013      	movs	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	189b      	adds	r3, r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	18cb      	adds	r3, r1, r3
 8000b58:	330f      	adds	r3, #15
 8000b5a:	7819      	ldrb	r1, [r3, #0]
 8000b5c:	1dbb      	adds	r3, r7, #6
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	483f      	ldr	r0, [pc, #252]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000b62:	0013      	movs	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	189b      	adds	r3, r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	18c3      	adds	r3, r0, r3
 8000b6c:	330d      	adds	r3, #13
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4299      	cmp	r1, r3
 8000b72:	d215      	bcs.n	8000ba0 <motor_pwm_timer_callback+0x2f4>
							wheelMotors[i].velocity--;
 8000b74:	1dbb      	adds	r3, r7, #6
 8000b76:	781a      	ldrb	r2, [r3, #0]
 8000b78:	4939      	ldr	r1, [pc, #228]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000b7a:	0013      	movs	r3, r2
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	189b      	adds	r3, r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	18cb      	adds	r3, r1, r3
 8000b84:	330d      	adds	r3, #13
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	b2d8      	uxtb	r0, r3
 8000b8c:	4934      	ldr	r1, [pc, #208]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000b8e:	0013      	movs	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	189b      	adds	r3, r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	18cb      	adds	r3, r1, r3
 8000b98:	330d      	adds	r3, #13
 8000b9a:	1c02      	adds	r2, r0, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
						break;
 8000b9e:	e07d      	b.n	8000c9c <motor_pwm_timer_callback+0x3f0>
							wheelMotors[i].state_motion = 1;
 8000ba0:	1dbb      	adds	r3, r7, #6
 8000ba2:	781a      	ldrb	r2, [r3, #0]
 8000ba4:	492e      	ldr	r1, [pc, #184]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000ba6:	0013      	movs	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	189b      	adds	r3, r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	18cb      	adds	r3, r1, r3
 8000bb0:	3311      	adds	r3, #17
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
						break;
 8000bb6:	e071      	b.n	8000c9c <motor_pwm_timer_callback+0x3f0>
						if(wheelMotors[i].velocity < 100) {
 8000bb8:	1dbb      	adds	r3, r7, #6
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	4928      	ldr	r1, [pc, #160]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	189b      	adds	r3, r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	18cb      	adds	r3, r1, r3
 8000bc8:	330d      	adds	r3, #13
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b63      	cmp	r3, #99	; 0x63
 8000bce:	d815      	bhi.n	8000bfc <motor_pwm_timer_callback+0x350>
							wheelMotors[i].velocity++;
 8000bd0:	1dbb      	adds	r3, r7, #6
 8000bd2:	781a      	ldrb	r2, [r3, #0]
 8000bd4:	4922      	ldr	r1, [pc, #136]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000bd6:	0013      	movs	r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	189b      	adds	r3, r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	18cb      	adds	r3, r1, r3
 8000be0:	330d      	adds	r3, #13
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	3301      	adds	r3, #1
 8000be6:	b2d8      	uxtb	r0, r3
 8000be8:	491d      	ldr	r1, [pc, #116]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000bea:	0013      	movs	r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	189b      	adds	r3, r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	18cb      	adds	r3, r1, r3
 8000bf4:	330d      	adds	r3, #13
 8000bf6:	1c02      	adds	r2, r0, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
						break;
 8000bfa:	e04f      	b.n	8000c9c <motor_pwm_timer_callback+0x3f0>
							wheelMotors[i].state_motion = 2;
 8000bfc:	1dbb      	adds	r3, r7, #6
 8000bfe:	781a      	ldrb	r2, [r3, #0]
 8000c00:	4917      	ldr	r1, [pc, #92]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000c02:	0013      	movs	r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	189b      	adds	r3, r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	18cb      	adds	r3, r1, r3
 8000c0c:	3311      	adds	r3, #17
 8000c0e:	2202      	movs	r2, #2
 8000c10:	701a      	strb	r2, [r3, #0]
						break;
 8000c12:	e043      	b.n	8000c9c <motor_pwm_timer_callback+0x3f0>
						if((wheelMotors[i].step_number-1) > 0){
 8000c14:	1dbb      	adds	r3, r7, #6
 8000c16:	781a      	ldrb	r2, [r3, #0]
 8000c18:	4911      	ldr	r1, [pc, #68]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000c1a:	0013      	movs	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	189b      	adds	r3, r3, r2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	18cb      	adds	r3, r1, r3
 8000c24:	3310      	adds	r3, #16
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d91b      	bls.n	8000c64 <motor_pwm_timer_callback+0x3b8>
							wheelMotors[i].step_number = wheelMotors[i].step_number -1;
 8000c2c:	1dbb      	adds	r3, r7, #6
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	490b      	ldr	r1, [pc, #44]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000c32:	0013      	movs	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	189b      	adds	r3, r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	18cb      	adds	r3, r1, r3
 8000c3c:	3310      	adds	r3, #16
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	1dba      	adds	r2, r7, #6
 8000c42:	7812      	ldrb	r2, [r2, #0]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	b2d8      	uxtb	r0, r3
 8000c48:	4905      	ldr	r1, [pc, #20]	; (8000c60 <motor_pwm_timer_callback+0x3b4>)
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	189b      	adds	r3, r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	18cb      	adds	r3, r1, r3
 8000c54:	3310      	adds	r3, #16
 8000c56:	1c02      	adds	r2, r0, #0
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	e012      	b.n	8000c82 <motor_pwm_timer_callback+0x3d6>
 8000c5c:	2000002a 	.word	0x2000002a
 8000c60:	2000005c 	.word	0x2000005c
							wheelMotors[i].target_velocity = 100;
 8000c64:	1dbb      	adds	r3, r7, #6
 8000c66:	781a      	ldrb	r2, [r3, #0]
 8000c68:	4913      	ldr	r1, [pc, #76]	; (8000cb8 <motor_pwm_timer_callback+0x40c>)
 8000c6a:	0013      	movs	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	189b      	adds	r3, r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	18cb      	adds	r3, r1, r3
 8000c74:	330f      	adds	r3, #15
 8000c76:	2264      	movs	r2, #100	; 0x64
 8000c78:	701a      	strb	r2, [r3, #0]
							rst_f_motor_new_action();
 8000c7a:	f7ff fc23 	bl	80004c4 <rst_f_motor_new_action>
							set_f_send_uart_ack();
 8000c7e:	f000 ff39 	bl	8001af4 <set_f_send_uart_ack>
						wheelMotors[i].state_motion = 0;
 8000c82:	1dbb      	adds	r3, r7, #6
 8000c84:	781a      	ldrb	r2, [r3, #0]
 8000c86:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <motor_pwm_timer_callback+0x40c>)
 8000c88:	0013      	movs	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	189b      	adds	r3, r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	18cb      	adds	r3, r1, r3
 8000c92:	3311      	adds	r3, #17
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
						break;
 8000c98:	e000      	b.n	8000c9c <motor_pwm_timer_callback+0x3f0>
			}
 8000c9a:	46c0      	nop			; (mov r8, r8)
		for(uint8_t i = 0;i<WHEEL_MOTOR_NUMBER;i++){
 8000c9c:	1dbb      	adds	r3, r7, #6
 8000c9e:	781a      	ldrb	r2, [r3, #0]
 8000ca0:	1dbb      	adds	r3, r7, #6
 8000ca2:	3201      	adds	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	1dbb      	adds	r3, r7, #6
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d800      	bhi.n	8000cb0 <motor_pwm_timer_callback+0x404>
 8000cae:	e6fb      	b.n	8000aa8 <motor_pwm_timer_callback+0x1fc>
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b002      	add	sp, #8
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	2000005c 	.word	0x2000005c

08000cbc <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d108      	bne.n	8000cde <HAL_TIM_PeriodElapsedCallback+0x22>
		if(get_f_motor_new_action() == 1){
 8000ccc:	f7ff fbe6 	bl	800049c <get_f_motor_new_action>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d101      	bne.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x1e>
		 motor_pwm_timer_callback();
 8000cd6:	f7ff fde9 	bl	80008ac <motor_pwm_timer_callback>
		}
		MatrixLED_Timer_Callback();
 8000cda:	f000 fc15 	bl	8001508 <MatrixLED_Timer_Callback>
	}

	if(htim == &htim6){
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d103      	bne.n	8000cee <HAL_TIM_PeriodElapsedCallback+0x32>
		uart_comm_timer_elapsed_callback(htim);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f001 f873 	bl	8001dd4 <uart_comm_timer_elapsed_callback>
	}
}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	20000170 	.word	0x20000170
 8000cfc:	20000130 	.word	0x20000130

08000d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t uart_tx_data = 0;
 8000d06:	1cfb      	adds	r3, r7, #3
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0c:	f001 f8c8 	bl	8001ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d10:	f000 f838 	bl	8000d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d14:	f000 f96a 	bl	8000fec <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d18:	f000 f8aa 	bl	8000e70 <MX_TIM2_Init>
  //MX_USART1_UART_Init();
  MX_TIM6_Init();
 8000d1c:	f000 f8fa 	bl	8000f14 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000d20:	f000 f934 	bl	8000f8c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	initWheelMotors();
 8000d24:	f7ff fbd8 	bl	80004d8 <initWheelMotors>
	initLedMatrixGPIO();
 8000d28:	f000 fa62 	bl	80011f0 <initLedMatrixGPIO>

	draw_heart();
 8000d2c:	f000 fccb 	bl	80016c6 <draw_heart>
	//draw_Smile2MatrixLED();
	//draw_Anger2MatrixLED();

	//initiate_Uart_Ch(&huart1);
	initiate_Uart_Ch(&huart2);
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <main+0x78>)
 8000d32:	0018      	movs	r0, r3
 8000d34:	f001 f866 	bl	8001e04 <initiate_Uart_Ch>

	HAL_TIM_Base_Start_IT(&htim2);
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <main+0x7c>)
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f002 fba6 	bl	800348c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <main+0x80>)
 8000d42:	0018      	movs	r0, r3
 8000d44:	f002 fba2 	bl	800348c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	Uart_Ch* uch = get_uart_ch();
 8000d48:	f000 fee8 	bl	8001b1c <get_uart_ch>
 8000d4c:	0003      	movs	r3, r0
 8000d4e:	607b      	str	r3, [r7, #4]

	while (1)
	{
		parse_uart_data();
 8000d50:	f000 fd90 	bl	8001874 <parse_uart_data>

		if(get_f_send_uart_ack() == 1){
 8000d54:	f000 fec4 	bl	8001ae0 <get_f_send_uart_ack>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d1f8      	bne.n	8000d50 <main+0x50>
			uart_tx_data = 1;
 8000d5e:	1cfb      	adds	r3, r7, #3
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
			uart_send_data(&huart2, &uart_tx_data, 1);
 8000d64:	1cf9      	adds	r1, r7, #3
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <main+0x78>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f001 f85a 	bl	8001e24 <uart_send_data>
			rst_f_send_uart_ack();
 8000d70:	f000 feca 	bl	8001b08 <rst_f_send_uart_ack>
		parse_uart_data();
 8000d74:	e7ec      	b.n	8000d50 <main+0x50>
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	200001b0 	.word	0x200001b0
 8000d7c:	20000170 	.word	0x20000170
 8000d80:	20000130 	.word	0x20000130

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b09d      	sub	sp, #116	; 0x74
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	2438      	movs	r4, #56	; 0x38
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	0018      	movs	r0, r3
 8000d90:	2338      	movs	r3, #56	; 0x38
 8000d92:	001a      	movs	r2, r3
 8000d94:	2100      	movs	r1, #0
 8000d96:	f004 fa89 	bl	80052ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9a:	2324      	movs	r3, #36	; 0x24
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	0018      	movs	r0, r3
 8000da0:	2314      	movs	r3, #20
 8000da2:	001a      	movs	r2, r3
 8000da4:	2100      	movs	r1, #0
 8000da6:	f004 fa81 	bl	80052ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000daa:	003b      	movs	r3, r7
 8000dac:	0018      	movs	r0, r3
 8000dae:	2324      	movs	r3, #36	; 0x24
 8000db0:	001a      	movs	r2, r3
 8000db2:	2100      	movs	r1, #0
 8000db4:	f004 fa7a 	bl	80052ac <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000db8:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <SystemClock_Config+0xe4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a2b      	ldr	r2, [pc, #172]	; (8000e6c <SystemClock_Config+0xe8>)
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <SystemClock_Config+0xe4>)
 8000dc2:	2180      	movs	r1, #128	; 0x80
 8000dc4:	0109      	lsls	r1, r1, #4
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dca:	0021      	movs	r1, r4
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2202      	movs	r2, #2
 8000dd0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2210      	movs	r2, #16
 8000ddc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2202      	movs	r2, #2
 8000de2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2200      	movs	r2, #0
 8000de8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2280      	movs	r2, #128	; 0x80
 8000dee:	02d2      	lsls	r2, r2, #11
 8000df0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	03d2      	lsls	r2, r2, #15
 8000df8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f001 fbb9 	bl	8002574 <HAL_RCC_OscConfig>
 8000e02:	1e03      	subs	r3, r0, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000e06:	f000 f9a3 	bl	8001150 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0a:	2124      	movs	r1, #36	; 0x24
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	220f      	movs	r2, #15
 8000e10:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2203      	movs	r2, #3
 8000e16:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f001 ff64 	bl	8002cfc <HAL_RCC_ClockConfig>
 8000e34:	1e03      	subs	r3, r0, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000e38:	f000 f98a 	bl	8001150 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000e3c:	003b      	movs	r3, r7
 8000e3e:	2203      	movs	r2, #3
 8000e40:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e42:	003b      	movs	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e48:	003b      	movs	r3, r7
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4e:	003b      	movs	r3, r7
 8000e50:	0018      	movs	r0, r3
 8000e52:	f002 f977 	bl	8003144 <HAL_RCCEx_PeriphCLKConfig>
 8000e56:	1e03      	subs	r3, r0, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000e5a:	f000 f979 	bl	8001150 <Error_Handler>
  }
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b01d      	add	sp, #116	; 0x74
 8000e64:	bd90      	pop	{r4, r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	40007000 	.word	0x40007000
 8000e6c:	ffffe7ff 	.word	0xffffe7ff

08000e70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e76:	2308      	movs	r3, #8
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	001a      	movs	r2, r3
 8000e80:	2100      	movs	r1, #0
 8000e82:	f004 fa13 	bl	80052ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e86:	003b      	movs	r3, r7
 8000e88:	0018      	movs	r0, r3
 8000e8a:	2308      	movs	r3, #8
 8000e8c:	001a      	movs	r2, r3
 8000e8e:	2100      	movs	r1, #0
 8000e90:	f004 fa0c 	bl	80052ac <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <MX_TIM2_Init+0xa0>)
 8000e96:	2280      	movs	r2, #128	; 0x80
 8000e98:	05d2      	lsls	r2, r2, #23
 8000e9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <MX_TIM2_Init+0xa0>)
 8000e9e:	221f      	movs	r2, #31
 8000ea0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <MX_TIM2_Init+0xa0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <MX_TIM2_Init+0xa0>)
 8000eaa:	2263      	movs	r2, #99	; 0x63
 8000eac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_TIM2_Init+0xa0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <MX_TIM2_Init+0xa0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_TIM2_Init+0xa0>)
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f002 faa5 	bl	800340c <HAL_TIM_Base_Init>
 8000ec2:	1e03      	subs	r3, r0, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000ec6:	f000 f943 	bl	8001150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eca:	2108      	movs	r1, #8
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	2280      	movs	r2, #128	; 0x80
 8000ed0:	0152      	lsls	r2, r2, #5
 8000ed2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ed4:	187a      	adds	r2, r7, r1
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_TIM2_Init+0xa0>)
 8000ed8:	0011      	movs	r1, r2
 8000eda:	0018      	movs	r0, r3
 8000edc:	f002 fc0a 	bl	80036f4 <HAL_TIM_ConfigClockSource>
 8000ee0:	1e03      	subs	r3, r0, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000ee4:	f000 f934 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee8:	003b      	movs	r3, r7
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eee:	003b      	movs	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef4:	003a      	movs	r2, r7
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_TIM2_Init+0xa0>)
 8000ef8:	0011      	movs	r1, r2
 8000efa:	0018      	movs	r0, r3
 8000efc:	f002 fddc 	bl	8003ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f00:	1e03      	subs	r3, r0, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000f04:	f000 f924 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b006      	add	sp, #24
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000170 	.word	0x20000170

08000f14 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1a:	003b      	movs	r3, r7
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	2308      	movs	r3, #8
 8000f20:	001a      	movs	r2, r3
 8000f22:	2100      	movs	r1, #0
 8000f24:	f004 f9c2 	bl	80052ac <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f28:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <MX_TIM6_Init+0x6c>)
 8000f2a:	4a16      	ldr	r2, [pc, #88]	; (8000f84 <MX_TIM6_Init+0x70>)
 8000f2c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_TIM6_Init+0x6c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_TIM6_Init+0x6c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_TIM6_Init+0x6c>)
 8000f3c:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <MX_TIM6_Init+0x74>)
 8000f3e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_TIM6_Init+0x6c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_TIM6_Init+0x6c>)
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f002 fa5f 	bl	800340c <HAL_TIM_Base_Init>
 8000f4e:	1e03      	subs	r3, r0, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000f52:	f000 f8fd 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f56:	003b      	movs	r3, r7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5c:	003b      	movs	r3, r7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f62:	003a      	movs	r2, r7
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_TIM6_Init+0x6c>)
 8000f66:	0011      	movs	r1, r2
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f002 fda5 	bl	8003ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6e:	1e03      	subs	r3, r0, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000f72:	f000 f8ed 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	20000130 	.word	0x20000130
 8000f84:	40001000 	.word	0x40001000
 8000f88:	0000c350 	.word	0x0000c350

08000f8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000f92:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <MX_USART2_UART_Init+0x5c>)
 8000f94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000f98:	22e1      	movs	r2, #225	; 0xe1
 8000f9a:	0252      	lsls	r2, r2, #9
 8000f9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <MX_USART2_UART_Init+0x58>)
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f002 fdc9 	bl	8003b68 <HAL_UART_Init>
 8000fd6:	1e03      	subs	r3, r0, #0
 8000fd8:	d001      	beq.n	8000fde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fda:	f000 f8b9 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200001b0 	.word	0x200001b0
 8000fe8:	40004400 	.word	0x40004400

08000fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b08b      	sub	sp, #44	; 0x2c
 8000ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	2414      	movs	r4, #20
 8000ff4:	193b      	adds	r3, r7, r4
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	2314      	movs	r3, #20
 8000ffa:	001a      	movs	r2, r3
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f004 f955 	bl	80052ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	4b4e      	ldr	r3, [pc, #312]	; (800113c <MX_GPIO_Init+0x150>)
 8001004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001006:	4b4d      	ldr	r3, [pc, #308]	; (800113c <MX_GPIO_Init+0x150>)
 8001008:	2104      	movs	r1, #4
 800100a:	430a      	orrs	r2, r1
 800100c:	62da      	str	r2, [r3, #44]	; 0x2c
 800100e:	4b4b      	ldr	r3, [pc, #300]	; (800113c <MX_GPIO_Init+0x150>)
 8001010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001012:	2204      	movs	r2, #4
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101a:	4b48      	ldr	r3, [pc, #288]	; (800113c <MX_GPIO_Init+0x150>)
 800101c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800101e:	4b47      	ldr	r3, [pc, #284]	; (800113c <MX_GPIO_Init+0x150>)
 8001020:	2180      	movs	r1, #128	; 0x80
 8001022:	430a      	orrs	r2, r1
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
 8001026:	4b45      	ldr	r3, [pc, #276]	; (800113c <MX_GPIO_Init+0x150>)
 8001028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102a:	2280      	movs	r2, #128	; 0x80
 800102c:	4013      	ands	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b42      	ldr	r3, [pc, #264]	; (800113c <MX_GPIO_Init+0x150>)
 8001034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001036:	4b41      	ldr	r3, [pc, #260]	; (800113c <MX_GPIO_Init+0x150>)
 8001038:	2101      	movs	r1, #1
 800103a:	430a      	orrs	r2, r1
 800103c:	62da      	str	r2, [r3, #44]	; 0x2c
 800103e:	4b3f      	ldr	r3, [pc, #252]	; (800113c <MX_GPIO_Init+0x150>)
 8001040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001042:	2201      	movs	r2, #1
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	4b3c      	ldr	r3, [pc, #240]	; (800113c <MX_GPIO_Init+0x150>)
 800104c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800104e:	4b3b      	ldr	r3, [pc, #236]	; (800113c <MX_GPIO_Init+0x150>)
 8001050:	2102      	movs	r1, #2
 8001052:	430a      	orrs	r2, r1
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c
 8001056:	4b39      	ldr	r3, [pc, #228]	; (800113c <MX_GPIO_Init+0x150>)
 8001058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105a:	2202      	movs	r2, #2
 800105c:	4013      	ands	r3, r2
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO9_Pin|GPIO17_Pin|GPIO5_Pin|GPIO6_Pin
 8001062:	4937      	ldr	r1, [pc, #220]	; (8001140 <MX_GPIO_Init+0x154>)
 8001064:	4b37      	ldr	r3, [pc, #220]	; (8001144 <MX_GPIO_Init+0x158>)
 8001066:	2200      	movs	r2, #0
 8001068:	0018      	movs	r0, r3
 800106a:	f001 fa65 	bl	8002538 <HAL_GPIO_WritePin>
                          |GPIO7_Pin|GPIO8_Pin|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO3_Pin|GPIO4_Pin, GPIO_PIN_RESET);
 800106e:	4b36      	ldr	r3, [pc, #216]	; (8001148 <MX_GPIO_Init+0x15c>)
 8001070:	2200      	movs	r2, #0
 8001072:	2103      	movs	r1, #3
 8001074:	0018      	movs	r0, r3
 8001076:	f001 fa5f 	bl	8002538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO18_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800107a:	23f1      	movs	r3, #241	; 0xf1
 800107c:	0119      	lsls	r1, r3, #4
 800107e:	23a0      	movs	r3, #160	; 0xa0
 8001080:	05db      	lsls	r3, r3, #23
 8001082:	2200      	movs	r2, #0
 8001084:	0018      	movs	r0, r3
 8001086:	f001 fa57 	bl	8002538 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO15_GPIO_Port, GPIO15_Pin, GPIO_PIN_RESET);
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	019b      	lsls	r3, r3, #6
 800108e:	482f      	ldr	r0, [pc, #188]	; (800114c <MX_GPIO_Init+0x160>)
 8001090:	2200      	movs	r2, #0
 8001092:	0019      	movs	r1, r3
 8001094:	f001 fa50 	bl	8002538 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO9_Pin GPIO17_Pin GPIO5_Pin GPIO6_Pin
                           GPIO7_Pin GPIO8_Pin PC6 PC7
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO9_Pin|GPIO17_Pin|GPIO5_Pin|GPIO6_Pin
 8001098:	193b      	adds	r3, r7, r4
 800109a:	4a29      	ldr	r2, [pc, #164]	; (8001140 <MX_GPIO_Init+0x154>)
 800109c:	601a      	str	r2, [r3, #0]
                          |GPIO7_Pin|GPIO8_Pin|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	193b      	adds	r3, r7, r4
 80010a0:	2201      	movs	r2, #1
 80010a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	193b      	adds	r3, r7, r4
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	193b      	adds	r3, r7, r4
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	4a24      	ldr	r2, [pc, #144]	; (8001144 <MX_GPIO_Init+0x158>)
 80010b4:	0019      	movs	r1, r3
 80010b6:	0010      	movs	r0, r2
 80010b8:	f001 f8c8 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin GPIO4_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|GPIO4_Pin;
 80010bc:	193b      	adds	r3, r7, r4
 80010be:	2203      	movs	r2, #3
 80010c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	193b      	adds	r3, r7, r4
 80010c4:	2201      	movs	r2, #1
 80010c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	193b      	adds	r3, r7, r4
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010d4:	193b      	adds	r3, r7, r4
 80010d6:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <MX_GPIO_Init+0x15c>)
 80010d8:	0019      	movs	r1, r3
 80010da:	0010      	movs	r0, r2
 80010dc:	f001 f8b6 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO18_Pin PA8 PA9 PA10
                           PA11 */
  GPIO_InitStruct.Pin = GPIO18_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80010e0:	0021      	movs	r1, r4
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	22f1      	movs	r2, #241	; 0xf1
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	000c      	movs	r4, r1
 80010ec:	193b      	adds	r3, r7, r4
 80010ee:	2201      	movs	r2, #1
 80010f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	193b      	adds	r3, r7, r4
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	193a      	adds	r2, r7, r4
 8001100:	23a0      	movs	r3, #160	; 0xa0
 8001102:	05db      	lsls	r3, r3, #23
 8001104:	0011      	movs	r1, r2
 8001106:	0018      	movs	r0, r3
 8001108:	f001 f8a0 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO15_Pin */
  GPIO_InitStruct.Pin = GPIO15_Pin;
 800110c:	0021      	movs	r1, r4
 800110e:	187b      	adds	r3, r7, r1
 8001110:	2280      	movs	r2, #128	; 0x80
 8001112:	0192      	lsls	r2, r2, #6
 8001114:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	187b      	adds	r3, r7, r1
 8001118:	2201      	movs	r2, #1
 800111a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	187b      	adds	r3, r7, r1
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	187b      	adds	r3, r7, r1
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO15_GPIO_Port, &GPIO_InitStruct);
 8001128:	187b      	adds	r3, r7, r1
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <MX_GPIO_Init+0x160>)
 800112c:	0019      	movs	r1, r3
 800112e:	0010      	movs	r0, r2
 8001130:	f001 f88c 	bl	800224c <HAL_GPIO_Init>

}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b00b      	add	sp, #44	; 0x2c
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	40021000 	.word	0x40021000
 8001140:	000063cf 	.word	0x000063cf
 8001144:	50000800 	.word	0x50000800
 8001148:	50001c00 	.word	0x50001c00
 800114c:	50000400 	.word	0x50000400

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001158:	e7fe      	b.n	8001158 <Error_Handler+0x8>
	...

0800115c <resetLEDIOs>:
GPIOType LedMatrixRows[MATRIX_LED_ROW];
GPIOType LedMatrixCols[MATRIX_LED_COL];
uint8_t MatrixLCD[MATRIX_LED_ROW][MATRIX_LED_COL];

void resetLEDIOs()
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
	for(uint8_t i = 0;i<MATRIX_LED_COL;i++){
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	e016      	b.n	8001198 <resetLEDIOs+0x3c>
		HAL_GPIO_WritePin(LedMatrixCols[i].GPIO_PORT, LedMatrixCols[i].GPIO_PIN, GPIO_PIN_SET);
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <resetLEDIOs+0x8c>)
 8001170:	00d2      	lsls	r2, r2, #3
 8001172:	58d3      	ldr	r3, [r2, r3]
 8001174:	0018      	movs	r0, r3
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <resetLEDIOs+0x8c>)
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	18d3      	adds	r3, r2, r3
 8001180:	3304      	adds	r3, #4
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	b29b      	uxth	r3, r3
 8001186:	2201      	movs	r2, #1
 8001188:	0019      	movs	r1, r3
 800118a:	f001 f9d5 	bl	8002538 <HAL_GPIO_WritePin>
	for(uint8_t i = 0;i<MATRIX_LED_COL;i++){
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781a      	ldrb	r2, [r3, #0]
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	3201      	adds	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b04      	cmp	r3, #4
 800119e:	d9e4      	bls.n	800116a <resetLEDIOs+0xe>
	}

	for(uint8_t i = 0;i<MATRIX_LED_ROW;i++){
 80011a0:	1dbb      	adds	r3, r7, #6
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
 80011a6:	e016      	b.n	80011d6 <resetLEDIOs+0x7a>
		HAL_GPIO_WritePin(LedMatrixRows[i].GPIO_PORT, LedMatrixRows[i].GPIO_PIN, GPIO_PIN_RESET);
 80011a8:	1dbb      	adds	r3, r7, #6
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <resetLEDIOs+0x90>)
 80011ae:	00d2      	lsls	r2, r2, #3
 80011b0:	58d3      	ldr	r3, [r2, r3]
 80011b2:	0018      	movs	r0, r3
 80011b4:	1dbb      	adds	r3, r7, #6
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <resetLEDIOs+0x90>)
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	18d3      	adds	r3, r2, r3
 80011be:	3304      	adds	r3, #4
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	2200      	movs	r2, #0
 80011c6:	0019      	movs	r1, r3
 80011c8:	f001 f9b6 	bl	8002538 <HAL_GPIO_WritePin>
	for(uint8_t i = 0;i<MATRIX_LED_ROW;i++){
 80011cc:	1dbb      	adds	r3, r7, #6
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	1dbb      	adds	r3, r7, #6
 80011d2:	3201      	adds	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	1dbb      	adds	r3, r7, #6
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b04      	cmp	r3, #4
 80011dc:	d9e4      	bls.n	80011a8 <resetLEDIOs+0x4c>
	}
}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000250 	.word	0x20000250
 80011ec:	20000278 	.word	0x20000278

080011f0 <initLedMatrixGPIO>:

void initLedMatrixGPIO(){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	LedMatrixRows[0].GPIO_PORT = GPIO7_GPIO_Port;
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <initLedMatrixGPIO+0x90>)
 80011f6:	4a23      	ldr	r2, [pc, #140]	; (8001284 <initLedMatrixGPIO+0x94>)
 80011f8:	601a      	str	r2, [r3, #0]
	LedMatrixRows[0].GPIO_PIN = GPIO7_Pin;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <initLedMatrixGPIO+0x90>)
 80011fc:	2204      	movs	r2, #4
 80011fe:	605a      	str	r2, [r3, #4]

	LedMatrixRows[1].GPIO_PORT = GPIO6_GPIO_Port;
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <initLedMatrixGPIO+0x90>)
 8001202:	4a20      	ldr	r2, [pc, #128]	; (8001284 <initLedMatrixGPIO+0x94>)
 8001204:	609a      	str	r2, [r3, #8]
	LedMatrixRows[1].GPIO_PIN = GPIO6_Pin;
 8001206:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <initLedMatrixGPIO+0x90>)
 8001208:	2202      	movs	r2, #2
 800120a:	60da      	str	r2, [r3, #12]

	LedMatrixRows[2].GPIO_PORT = GPIO5_GPIO_Port;
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <initLedMatrixGPIO+0x90>)
 800120e:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <initLedMatrixGPIO+0x94>)
 8001210:	611a      	str	r2, [r3, #16]
	LedMatrixRows[2].GPIO_PIN = GPIO5_Pin;
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <initLedMatrixGPIO+0x90>)
 8001214:	2201      	movs	r2, #1
 8001216:	615a      	str	r2, [r3, #20]

	LedMatrixRows[3].GPIO_PORT = GPIO4_GPIO_Port;
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <initLedMatrixGPIO+0x90>)
 800121a:	4a1b      	ldr	r2, [pc, #108]	; (8001288 <initLedMatrixGPIO+0x98>)
 800121c:	619a      	str	r2, [r3, #24]
	LedMatrixRows[3].GPIO_PIN = GPIO4_Pin;
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <initLedMatrixGPIO+0x90>)
 8001220:	2202      	movs	r2, #2
 8001222:	61da      	str	r2, [r3, #28]

	LedMatrixRows[4].GPIO_PORT = GPIO3_GPIO_Port;
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <initLedMatrixGPIO+0x90>)
 8001226:	4a18      	ldr	r2, [pc, #96]	; (8001288 <initLedMatrixGPIO+0x98>)
 8001228:	621a      	str	r2, [r3, #32]
	LedMatrixRows[4].GPIO_PIN = GPIO3_Pin;
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <initLedMatrixGPIO+0x90>)
 800122c:	2201      	movs	r2, #1
 800122e:	625a      	str	r2, [r3, #36]	; 0x24

	LedMatrixCols[0].GPIO_PORT = GPIO8_GPIO_Port;
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <initLedMatrixGPIO+0x9c>)
 8001232:	4a14      	ldr	r2, [pc, #80]	; (8001284 <initLedMatrixGPIO+0x94>)
 8001234:	601a      	str	r2, [r3, #0]
	LedMatrixCols[0].GPIO_PIN = GPIO8_Pin;
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <initLedMatrixGPIO+0x9c>)
 8001238:	2208      	movs	r2, #8
 800123a:	605a      	str	r2, [r3, #4]

	LedMatrixCols[1].GPIO_PORT = GPIO9_GPIO_Port;
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <initLedMatrixGPIO+0x9c>)
 800123e:	4a11      	ldr	r2, [pc, #68]	; (8001284 <initLedMatrixGPIO+0x94>)
 8001240:	609a      	str	r2, [r3, #8]
	LedMatrixCols[1].GPIO_PIN = GPIO9_Pin;
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <initLedMatrixGPIO+0x9c>)
 8001244:	2280      	movs	r2, #128	; 0x80
 8001246:	0192      	lsls	r2, r2, #6
 8001248:	60da      	str	r2, [r3, #12]

	LedMatrixCols[2].GPIO_PORT = GPIO15_GPIO_Port;
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <initLedMatrixGPIO+0x9c>)
 800124c:	4a10      	ldr	r2, [pc, #64]	; (8001290 <initLedMatrixGPIO+0xa0>)
 800124e:	611a      	str	r2, [r3, #16]
	LedMatrixCols[2].GPIO_PIN = GPIO15_Pin;
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <initLedMatrixGPIO+0x9c>)
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	0192      	lsls	r2, r2, #6
 8001256:	615a      	str	r2, [r3, #20]

	LedMatrixCols[3].GPIO_PORT = GPIO17_GPIO_Port;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <initLedMatrixGPIO+0x9c>)
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <initLedMatrixGPIO+0x94>)
 800125c:	619a      	str	r2, [r3, #24]
	LedMatrixCols[3].GPIO_PIN = GPIO17_Pin;
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <initLedMatrixGPIO+0x9c>)
 8001260:	2280      	movs	r2, #128	; 0x80
 8001262:	01d2      	lsls	r2, r2, #7
 8001264:	61da      	str	r2, [r3, #28]

	LedMatrixCols[4].GPIO_PORT = GPIO18_GPIO_Port;
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <initLedMatrixGPIO+0x9c>)
 8001268:	22a0      	movs	r2, #160	; 0xa0
 800126a:	05d2      	lsls	r2, r2, #23
 800126c:	621a      	str	r2, [r3, #32]
	LedMatrixCols[4].GPIO_PIN = GPIO18_Pin;
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <initLedMatrixGPIO+0x9c>)
 8001270:	2210      	movs	r2, #16
 8001272:	625a      	str	r2, [r3, #36]	; 0x24

	resetLEDIOs();
 8001274:	f7ff ff72 	bl	800115c <resetLEDIOs>
}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	20000278 	.word	0x20000278
 8001284:	50000800 	.word	0x50000800
 8001288:	50001c00 	.word	0x50001c00
 800128c:	20000250 	.word	0x20000250
 8001290:	50000400 	.word	0x50000400

08001294 <MatrixLCD_SetPixel>:

void MatrixLCD_SetPixel(uint8_t row, uint8_t col){
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	0002      	movs	r2, r0
 800129c:	1dfb      	adds	r3, r7, #7
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	1dbb      	adds	r3, r7, #6
 80012a2:	1c0a      	adds	r2, r1, #0
 80012a4:	701a      	strb	r2, [r3, #0]
	MatrixLCD[row][col] = 1;
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	1dbb      	adds	r3, r7, #6
 80012ac:	7819      	ldrb	r1, [r3, #0]
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MatrixLCD_SetPixel+0x30>)
 80012b0:	0013      	movs	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	189b      	adds	r3, r3, r2
 80012b6:	18c3      	adds	r3, r0, r3
 80012b8:	2201      	movs	r2, #1
 80012ba:	545a      	strb	r2, [r3, r1]
}
 80012bc:	46c0      	nop			; (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	b002      	add	sp, #8
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000234 	.word	0x20000234

080012c8 <MatrixLCD_ResetPixels>:

void MatrixLCD_ResetPixels(){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
	for(uint8_t i = 0;i<MATRIX_LED_ROW;i++)
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	e01c      	b.n	8001310 <MatrixLCD_ResetPixels+0x48>
		for (uint8_t j = 0;j<MATRIX_LED_COL;j++){
 80012d6:	1dbb      	adds	r3, r7, #6
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	e00f      	b.n	80012fe <MatrixLCD_ResetPixels+0x36>
			MatrixLCD[i][j] = 0; //row,col
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	781a      	ldrb	r2, [r3, #0]
 80012e2:	1dbb      	adds	r3, r7, #6
 80012e4:	7819      	ldrb	r1, [r3, #0]
 80012e6:	480f      	ldr	r0, [pc, #60]	; (8001324 <MatrixLCD_ResetPixels+0x5c>)
 80012e8:	0013      	movs	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	189b      	adds	r3, r3, r2
 80012ee:	18c3      	adds	r3, r0, r3
 80012f0:	2200      	movs	r2, #0
 80012f2:	545a      	strb	r2, [r3, r1]
		for (uint8_t j = 0;j<MATRIX_LED_COL;j++){
 80012f4:	1dbb      	adds	r3, r7, #6
 80012f6:	781a      	ldrb	r2, [r3, #0]
 80012f8:	1dbb      	adds	r3, r7, #6
 80012fa:	3201      	adds	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	1dbb      	adds	r3, r7, #6
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b04      	cmp	r3, #4
 8001304:	d9eb      	bls.n	80012de <MatrixLCD_ResetPixels+0x16>
	for(uint8_t i = 0;i<MATRIX_LED_ROW;i++)
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781a      	ldrb	r2, [r3, #0]
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	3201      	adds	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
 8001310:	1dfb      	adds	r3, r7, #7
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b04      	cmp	r3, #4
 8001316:	d9de      	bls.n	80012d6 <MatrixLCD_ResetPixels+0xe>
		}

	//the best place to send uart ack
	set_f_send_uart_ack();
 8001318:	f000 fbec 	bl	8001af4 <set_f_send_uart_ack>
}
 800131c:	46c0      	nop			; (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	b002      	add	sp, #8
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000234 	.word	0x20000234

08001328 <MatrixLCD_SetPixels2Buf>:

void MatrixLCD_SetPixels2Buf(uint8_t* buf){
 8001328:	b5b0      	push	{r4, r5, r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	uint8_t x = 0;
 8001330:	230f      	movs	r3, #15
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0;i<MATRIX_LED_ROW;i++)
 8001338:	230e      	movs	r3, #14
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
 8001340:	e02b      	b.n	800139a <MatrixLCD_SetPixels2Buf+0x72>
		for (uint8_t j = 0;j<MATRIX_LED_COL;j++){
 8001342:	230d      	movs	r3, #13
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
 800134a:	e01b      	b.n	8001384 <MatrixLCD_SetPixels2Buf+0x5c>
			MatrixLCD[i][j] = buf[x++]; //row,col
 800134c:	220f      	movs	r2, #15
 800134e:	18bb      	adds	r3, r7, r2
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	18ba      	adds	r2, r7, r2
 8001354:	1c59      	adds	r1, r3, #1
 8001356:	7011      	strb	r1, [r2, #0]
 8001358:	001a      	movs	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	189b      	adds	r3, r3, r2
 800135e:	220e      	movs	r2, #14
 8001360:	18ba      	adds	r2, r7, r2
 8001362:	7812      	ldrb	r2, [r2, #0]
 8001364:	250d      	movs	r5, #13
 8001366:	1979      	adds	r1, r7, r5
 8001368:	7809      	ldrb	r1, [r1, #0]
 800136a:	781c      	ldrb	r4, [r3, #0]
 800136c:	4810      	ldr	r0, [pc, #64]	; (80013b0 <MatrixLCD_SetPixels2Buf+0x88>)
 800136e:	0013      	movs	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	189b      	adds	r3, r3, r2
 8001374:	18c3      	adds	r3, r0, r3
 8001376:	1c22      	adds	r2, r4, #0
 8001378:	545a      	strb	r2, [r3, r1]
		for (uint8_t j = 0;j<MATRIX_LED_COL;j++){
 800137a:	197b      	adds	r3, r7, r5
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	197b      	adds	r3, r7, r5
 8001380:	3201      	adds	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
 8001384:	230d      	movs	r3, #13
 8001386:	18fb      	adds	r3, r7, r3
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b04      	cmp	r3, #4
 800138c:	d9de      	bls.n	800134c <MatrixLCD_SetPixels2Buf+0x24>
	for(uint8_t i = 0;i<MATRIX_LED_ROW;i++)
 800138e:	210e      	movs	r1, #14
 8001390:	187b      	adds	r3, r7, r1
 8001392:	781a      	ldrb	r2, [r3, #0]
 8001394:	187b      	adds	r3, r7, r1
 8001396:	3201      	adds	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	230e      	movs	r3, #14
 800139c:	18fb      	adds	r3, r7, r3
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d9ce      	bls.n	8001342 <MatrixLCD_SetPixels2Buf+0x1a>
		}
}
 80013a4:	46c0      	nop			; (mov r8, r8)
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b004      	add	sp, #16
 80013ac:	bdb0      	pop	{r4, r5, r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	20000234 	.word	0x20000234

080013b4 <Matrix2LCD>:

void Matrix2LCD(uint8_t ledIndex){
 80013b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	0002      	movs	r2, r0
 80013bc:	1dfb      	adds	r3, r7, #7
 80013be:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0;i<MATRIX_LED_ROW;i++){
 80013c0:	230f      	movs	r3, #15
 80013c2:	18fb      	adds	r3, r7, r3
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
 80013c8:	e023      	b.n	8001412 <Matrix2LCD+0x5e>
		HAL_GPIO_WritePin(LedMatrixRows[i].GPIO_PORT,
 80013ca:	210f      	movs	r1, #15
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <Matrix2LCD+0x74>)
 80013d2:	00d2      	lsls	r2, r2, #3
 80013d4:	58d3      	ldr	r3, [r2, r3]
 80013d6:	001d      	movs	r5, r3
				LedMatrixRows[i].GPIO_PIN, MatrixLCD[i][ledIndex]);
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4a12      	ldr	r2, [pc, #72]	; (8001428 <Matrix2LCD+0x74>)
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	18d3      	adds	r3, r2, r3
 80013e2:	3304      	adds	r3, #4
 80013e4:	681b      	ldr	r3, [r3, #0]
		HAL_GPIO_WritePin(LedMatrixRows[i].GPIO_PORT,
 80013e6:	b29c      	uxth	r4, r3
 80013e8:	000e      	movs	r6, r1
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	781a      	ldrb	r2, [r3, #0]
 80013ee:	1dfb      	adds	r3, r7, #7
 80013f0:	7819      	ldrb	r1, [r3, #0]
				LedMatrixRows[i].GPIO_PIN, MatrixLCD[i][ledIndex]);
 80013f2:	480e      	ldr	r0, [pc, #56]	; (800142c <Matrix2LCD+0x78>)
 80013f4:	0013      	movs	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	189b      	adds	r3, r3, r2
 80013fa:	18c3      	adds	r3, r0, r3
 80013fc:	5c5b      	ldrb	r3, [r3, r1]
		HAL_GPIO_WritePin(LedMatrixRows[i].GPIO_PORT,
 80013fe:	001a      	movs	r2, r3
 8001400:	0021      	movs	r1, r4
 8001402:	0028      	movs	r0, r5
 8001404:	f001 f898 	bl	8002538 <HAL_GPIO_WritePin>
	for(uint8_t i = 0;i<MATRIX_LED_ROW;i++){
 8001408:	19bb      	adds	r3, r7, r6
 800140a:	781a      	ldrb	r2, [r3, #0]
 800140c:	19bb      	adds	r3, r7, r6
 800140e:	3201      	adds	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
 8001412:	230f      	movs	r3, #15
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b04      	cmp	r3, #4
 800141a:	d9d6      	bls.n	80013ca <Matrix2LCD+0x16>
	}
}
 800141c:	46c0      	nop			; (mov r8, r8)
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	b005      	add	sp, #20
 8001424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	20000278 	.word	0x20000278
 800142c:	20000234 	.word	0x20000234

08001430 <MatrixLED_JohnsonCounter>:

uint8_t MatrixLED_JohnsonCounter(){
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	static uint8_t ledIndex = 0;

	if(ledIndex == MATRIX_LED_COL) ledIndex = 0;
 8001436:	4b31      	ldr	r3, [pc, #196]	; (80014fc <MatrixLED_JohnsonCounter+0xcc>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b05      	cmp	r3, #5
 800143c:	d102      	bne.n	8001444 <MatrixLED_JohnsonCounter+0x14>
 800143e:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <MatrixLED_JohnsonCounter+0xcc>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]

	//reset all rows
	for(uint8_t i= 0;i<MATRIX_LED_ROW;i++){
 8001444:	1dfb      	adds	r3, r7, #7
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
 800144a:	e016      	b.n	800147a <MatrixLED_JohnsonCounter+0x4a>
		HAL_GPIO_WritePin(LedMatrixRows[i].GPIO_PORT, LedMatrixRows[i].GPIO_PIN, GPIO_PIN_RESET);
 800144c:	1dfb      	adds	r3, r7, #7
 800144e:	781a      	ldrb	r2, [r3, #0]
 8001450:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <MatrixLED_JohnsonCounter+0xd0>)
 8001452:	00d2      	lsls	r2, r2, #3
 8001454:	58d3      	ldr	r3, [r2, r3]
 8001456:	0018      	movs	r0, r3
 8001458:	1dfb      	adds	r3, r7, #7
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4a28      	ldr	r2, [pc, #160]	; (8001500 <MatrixLED_JohnsonCounter+0xd0>)
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	18d3      	adds	r3, r2, r3
 8001462:	3304      	adds	r3, #4
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	b29b      	uxth	r3, r3
 8001468:	2200      	movs	r2, #0
 800146a:	0019      	movs	r1, r3
 800146c:	f001 f864 	bl	8002538 <HAL_GPIO_WritePin>
	for(uint8_t i= 0;i<MATRIX_LED_ROW;i++){
 8001470:	1dfb      	adds	r3, r7, #7
 8001472:	781a      	ldrb	r2, [r3, #0]
 8001474:	1dfb      	adds	r3, r7, #7
 8001476:	3201      	adds	r2, #1
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b04      	cmp	r3, #4
 8001480:	d9e4      	bls.n	800144c <MatrixLED_JohnsonCounter+0x1c>
	}

	//set all cols
	for(uint8_t i= 0;i<MATRIX_LED_COL;i++){
 8001482:	1dbb      	adds	r3, r7, #6
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
 8001488:	e016      	b.n	80014b8 <MatrixLED_JohnsonCounter+0x88>
		HAL_GPIO_WritePin(LedMatrixCols[i].GPIO_PORT, LedMatrixCols[i].GPIO_PIN, GPIO_PIN_SET);
 800148a:	1dbb      	adds	r3, r7, #6
 800148c:	781a      	ldrb	r2, [r3, #0]
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <MatrixLED_JohnsonCounter+0xd4>)
 8001490:	00d2      	lsls	r2, r2, #3
 8001492:	58d3      	ldr	r3, [r2, r3]
 8001494:	0018      	movs	r0, r3
 8001496:	1dbb      	adds	r3, r7, #6
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	4a1a      	ldr	r2, [pc, #104]	; (8001504 <MatrixLED_JohnsonCounter+0xd4>)
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	18d3      	adds	r3, r2, r3
 80014a0:	3304      	adds	r3, #4
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	2201      	movs	r2, #1
 80014a8:	0019      	movs	r1, r3
 80014aa:	f001 f845 	bl	8002538 <HAL_GPIO_WritePin>
	for(uint8_t i= 0;i<MATRIX_LED_COL;i++){
 80014ae:	1dbb      	adds	r3, r7, #6
 80014b0:	781a      	ldrb	r2, [r3, #0]
 80014b2:	1dbb      	adds	r3, r7, #6
 80014b4:	3201      	adds	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	1dbb      	adds	r3, r7, #6
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d9e4      	bls.n	800148a <MatrixLED_JohnsonCounter+0x5a>
	}

	//only reset the dedicated col
	HAL_GPIO_WritePin(LedMatrixCols[ledIndex].GPIO_PORT, LedMatrixCols[ledIndex].GPIO_PIN, GPIO_PIN_RESET);
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MatrixLED_JohnsonCounter+0xcc>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	001a      	movs	r2, r3
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MatrixLED_JohnsonCounter+0xd4>)
 80014c8:	00d2      	lsls	r2, r2, #3
 80014ca:	58d3      	ldr	r3, [r2, r3]
 80014cc:	0018      	movs	r0, r3
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <MatrixLED_JohnsonCounter+0xcc>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	4a0c      	ldr	r2, [pc, #48]	; (8001504 <MatrixLED_JohnsonCounter+0xd4>)
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	18d3      	adds	r3, r2, r3
 80014d8:	3304      	adds	r3, #4
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	2200      	movs	r2, #0
 80014e0:	0019      	movs	r1, r3
 80014e2:	f001 f829 	bl	8002538 <HAL_GPIO_WritePin>

	return ledIndex++;
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <MatrixLED_JohnsonCounter+0xcc>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	b2d1      	uxtb	r1, r2
 80014ee:	4a03      	ldr	r2, [pc, #12]	; (80014fc <MatrixLED_JohnsonCounter+0xcc>)
 80014f0:	7011      	strb	r1, [r2, #0]
}
 80014f2:	0018      	movs	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b002      	add	sp, #8
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	2000002c 	.word	0x2000002c
 8001500:	20000278 	.word	0x20000278
 8001504:	20000250 	.word	0x20000250

08001508 <MatrixLED_Timer_Callback>:

void MatrixLED_Timer_Callback()
{
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
	uint8_t ledIndex;
	static uint16_t matrixLed_RefreshCounter = 0;

	if(matrixLed_RefreshCounter < 65000)
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <MatrixLED_Timer_Callback+0x54>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	4a13      	ldr	r2, [pc, #76]	; (8001560 <MatrixLED_Timer_Callback+0x58>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d806      	bhi.n	8001526 <MatrixLED_Timer_Callback+0x1e>
		matrixLed_RefreshCounter++;
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <MatrixLED_Timer_Callback+0x54>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	b29a      	uxth	r2, r3
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MatrixLED_Timer_Callback+0x54>)
 8001522:	801a      	strh	r2, [r3, #0]
 8001524:	e002      	b.n	800152c <MatrixLED_Timer_Callback+0x24>
	else matrixLed_RefreshCounter = 0;
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <MatrixLED_Timer_Callback+0x54>)
 8001528:	2200      	movs	r2, #0
 800152a:	801a      	strh	r2, [r3, #0]

	if(matrixLed_RefreshCounter%10 == 0){
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MatrixLED_Timer_Callback+0x54>)
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	210a      	movs	r1, #10
 8001532:	0018      	movs	r0, r3
 8001534:	f7fe fe6e 	bl	8000214 <__aeabi_uidivmod>
 8001538:	000b      	movs	r3, r1
 800153a:	b29b      	uxth	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d109      	bne.n	8001554 <MatrixLED_Timer_Callback+0x4c>
		ledIndex = MatrixLED_JohnsonCounter();
 8001540:	1dfc      	adds	r4, r7, #7
 8001542:	f7ff ff75 	bl	8001430 <MatrixLED_JohnsonCounter>
 8001546:	0003      	movs	r3, r0
 8001548:	7023      	strb	r3, [r4, #0]
		Matrix2LCD(ledIndex);
 800154a:	1dfb      	adds	r3, r7, #7
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	0018      	movs	r0, r3
 8001550:	f7ff ff30 	bl	80013b4 <Matrix2LCD>
	}
}
 8001554:	46c0      	nop			; (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	b003      	add	sp, #12
 800155a:	bd90      	pop	{r4, r7, pc}
 800155c:	2000002e 	.word	0x2000002e
 8001560:	0000fde7 	.word	0x0000fde7

08001564 <draw_cross2MatrixLED>:

//test drawing
void draw_cross2MatrixLED(){
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	MatrixLCD_SetPixel(0, 0);
 8001568:	2100      	movs	r1, #0
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff fe92 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(1, 1);
 8001570:	2101      	movs	r1, #1
 8001572:	2001      	movs	r0, #1
 8001574:	f7ff fe8e 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(2, 2);
 8001578:	2102      	movs	r1, #2
 800157a:	2002      	movs	r0, #2
 800157c:	f7ff fe8a 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(3, 3);
 8001580:	2103      	movs	r1, #3
 8001582:	2003      	movs	r0, #3
 8001584:	f7ff fe86 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(4, 4);
 8001588:	2104      	movs	r1, #4
 800158a:	2004      	movs	r0, #4
 800158c:	f7ff fe82 	bl	8001294 <MatrixLCD_SetPixel>

	MatrixLCD_SetPixel(0, 4);
 8001590:	2104      	movs	r1, #4
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff fe7e 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(1, 3);
 8001598:	2103      	movs	r1, #3
 800159a:	2001      	movs	r0, #1
 800159c:	f7ff fe7a 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(2, 2);
 80015a0:	2102      	movs	r1, #2
 80015a2:	2002      	movs	r0, #2
 80015a4:	f7ff fe76 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(3, 1);
 80015a8:	2101      	movs	r1, #1
 80015aa:	2003      	movs	r0, #3
 80015ac:	f7ff fe72 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(4, 0);
 80015b0:	2100      	movs	r1, #0
 80015b2:	2004      	movs	r0, #4
 80015b4:	f7ff fe6e 	bl	8001294 <MatrixLCD_SetPixel>
}
 80015b8:	46c0      	nop			; (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <draw_HappyMatrixLED>:

void draw_HappyMatrixLED(){
 80015be:	b580      	push	{r7, lr}
 80015c0:	af00      	add	r7, sp, #0
	MatrixLCD_SetPixel(0, 2);
 80015c2:	2102      	movs	r1, #2
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff fe65 	bl	8001294 <MatrixLCD_SetPixel>

	MatrixLCD_SetPixel(1, 1);
 80015ca:	2101      	movs	r1, #1
 80015cc:	2001      	movs	r0, #1
 80015ce:	f7ff fe61 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(1, 4);
 80015d2:	2104      	movs	r1, #4
 80015d4:	2001      	movs	r0, #1
 80015d6:	f7ff fe5d 	bl	8001294 <MatrixLCD_SetPixel>

	MatrixLCD_SetPixel(2, 1);
 80015da:	2101      	movs	r1, #1
 80015dc:	2002      	movs	r0, #2
 80015de:	f7ff fe59 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(2, 3);
 80015e2:	2103      	movs	r1, #3
 80015e4:	2002      	movs	r0, #2
 80015e6:	f7ff fe55 	bl	8001294 <MatrixLCD_SetPixel>

	MatrixLCD_SetPixel(3, 1);
 80015ea:	2101      	movs	r1, #1
 80015ec:	2003      	movs	r0, #3
 80015ee:	f7ff fe51 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(3, 4);
 80015f2:	2104      	movs	r1, #4
 80015f4:	2003      	movs	r0, #3
 80015f6:	f7ff fe4d 	bl	8001294 <MatrixLCD_SetPixel>

	MatrixLCD_SetPixel(4, 2);
 80015fa:	2102      	movs	r1, #2
 80015fc:	2004      	movs	r0, #4
 80015fe:	f7ff fe49 	bl	8001294 <MatrixLCD_SetPixel>
}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <draw_SadMatrixLED>:

void draw_SadMatrixLED(){
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	MatrixLCD_SetPixel(0, 1);
 800160c:	2101      	movs	r1, #1
 800160e:	2000      	movs	r0, #0
 8001610:	f7ff fe40 	bl	8001294 <MatrixLCD_SetPixel>

	MatrixLCD_SetPixel(1, 2);
 8001614:	2102      	movs	r1, #2
 8001616:	2001      	movs	r0, #1
 8001618:	f7ff fe3c 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(1, 4);
 800161c:	2104      	movs	r1, #4
 800161e:	2001      	movs	r0, #1
 8001620:	f7ff fe38 	bl	8001294 <MatrixLCD_SetPixel>

	MatrixLCD_SetPixel(2, 2);
 8001624:	2102      	movs	r1, #2
 8001626:	2002      	movs	r0, #2
 8001628:	f7ff fe34 	bl	8001294 <MatrixLCD_SetPixel>

	MatrixLCD_SetPixel(3, 2);
 800162c:	2102      	movs	r1, #2
 800162e:	2003      	movs	r0, #3
 8001630:	f7ff fe30 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(3, 4);
 8001634:	2104      	movs	r1, #4
 8001636:	2003      	movs	r0, #3
 8001638:	f7ff fe2c 	bl	8001294 <MatrixLCD_SetPixel>

	MatrixLCD_SetPixel(4, 1);
 800163c:	2101      	movs	r1, #1
 800163e:	2004      	movs	r0, #4
 8001640:	f7ff fe28 	bl	8001294 <MatrixLCD_SetPixel>
}
 8001644:	46c0      	nop			; (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <draw_AngryMatrixLED>:

void draw_AngryMatrixLED(){
 800164a:	b580      	push	{r7, lr}
 800164c:	af00      	add	r7, sp, #0
	MatrixLCD_SetPixel(0, 0);
 800164e:	2100      	movs	r1, #0
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff fe1f 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(0, 4);
 8001656:	2104      	movs	r1, #4
 8001658:	2000      	movs	r0, #0
 800165a:	f7ff fe1b 	bl	8001294 <MatrixLCD_SetPixel>

	MatrixLCD_SetPixel(1, 1);
 800165e:	2101      	movs	r1, #1
 8001660:	2001      	movs	r0, #1
 8001662:	f7ff fe17 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(1, 3);
 8001666:	2103      	movs	r1, #3
 8001668:	2001      	movs	r0, #1
 800166a:	f7ff fe13 	bl	8001294 <MatrixLCD_SetPixel>

	MatrixLCD_SetPixel(2, 1);
 800166e:	2101      	movs	r1, #1
 8001670:	2002      	movs	r0, #2
 8001672:	f7ff fe0f 	bl	8001294 <MatrixLCD_SetPixel>

	MatrixLCD_SetPixel(3, 1);
 8001676:	2101      	movs	r1, #1
 8001678:	2003      	movs	r0, #3
 800167a:	f7ff fe0b 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(3, 3);
 800167e:	2103      	movs	r1, #3
 8001680:	2003      	movs	r0, #3
 8001682:	f7ff fe07 	bl	8001294 <MatrixLCD_SetPixel>

	MatrixLCD_SetPixel(4, 0);
 8001686:	2100      	movs	r1, #0
 8001688:	2004      	movs	r0, #4
 800168a:	f7ff fe03 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(4, 4);
 800168e:	2104      	movs	r1, #4
 8001690:	2004      	movs	r0, #4
 8001692:	f7ff fdff 	bl	8001294 <MatrixLCD_SetPixel>
}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <draw_OnMatrixLED>:

void draw_OnMatrixLED(){
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	MatrixLCD_SetPixel(2, 2);
 80016a0:	2102      	movs	r1, #2
 80016a2:	2002      	movs	r0, #2
 80016a4:	f7ff fdf6 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(2, 3);
 80016a8:	2103      	movs	r1, #3
 80016aa:	2002      	movs	r0, #2
 80016ac:	f7ff fdf2 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(3, 2);
 80016b0:	2102      	movs	r1, #2
 80016b2:	2003      	movs	r0, #3
 80016b4:	f7ff fdee 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(3, 3);
 80016b8:	2103      	movs	r1, #3
 80016ba:	2003      	movs	r0, #3
 80016bc:	f7ff fdea 	bl	8001294 <MatrixLCD_SetPixel>
}
 80016c0:	46c0      	nop			; (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <draw_heart>:

void draw_heart(){
 80016c6:	b580      	push	{r7, lr}
 80016c8:	af00      	add	r7, sp, #0
	MatrixLCD_SetPixel(0, 2);
 80016ca:	2102      	movs	r1, #2
 80016cc:	2000      	movs	r0, #0
 80016ce:	f7ff fde1 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(0, 3);
 80016d2:	2103      	movs	r1, #3
 80016d4:	2000      	movs	r0, #0
 80016d6:	f7ff fddd 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(0, 4);
 80016da:	2104      	movs	r1, #4
 80016dc:	2000      	movs	r0, #0
 80016de:	f7ff fdd9 	bl	8001294 <MatrixLCD_SetPixel>

	MatrixLCD_SetPixel(1, 1);
 80016e2:	2101      	movs	r1, #1
 80016e4:	2001      	movs	r0, #1
 80016e6:	f7ff fdd5 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(1, 2);
 80016ea:	2102      	movs	r1, #2
 80016ec:	2001      	movs	r0, #1
 80016ee:	f7ff fdd1 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(1, 3);
 80016f2:	2103      	movs	r1, #3
 80016f4:	2001      	movs	r0, #1
 80016f6:	f7ff fdcd 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(1, 4);
 80016fa:	2104      	movs	r1, #4
 80016fc:	2001      	movs	r0, #1
 80016fe:	f7ff fdc9 	bl	8001294 <MatrixLCD_SetPixel>

	MatrixLCD_SetPixel(2, 0);
 8001702:	2100      	movs	r1, #0
 8001704:	2002      	movs	r0, #2
 8001706:	f7ff fdc5 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(2, 1);
 800170a:	2101      	movs	r1, #1
 800170c:	2002      	movs	r0, #2
 800170e:	f7ff fdc1 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(2, 2);
 8001712:	2102      	movs	r1, #2
 8001714:	2002      	movs	r0, #2
 8001716:	f7ff fdbd 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(2, 3);
 800171a:	2103      	movs	r1, #3
 800171c:	2002      	movs	r0, #2
 800171e:	f7ff fdb9 	bl	8001294 <MatrixLCD_SetPixel>

	MatrixLCD_SetPixel(3, 1);
 8001722:	2101      	movs	r1, #1
 8001724:	2003      	movs	r0, #3
 8001726:	f7ff fdb5 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(3, 2);
 800172a:	2102      	movs	r1, #2
 800172c:	2003      	movs	r0, #3
 800172e:	f7ff fdb1 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(3, 3);
 8001732:	2103      	movs	r1, #3
 8001734:	2003      	movs	r0, #3
 8001736:	f7ff fdad 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(3, 4);
 800173a:	2104      	movs	r1, #4
 800173c:	2003      	movs	r0, #3
 800173e:	f7ff fda9 	bl	8001294 <MatrixLCD_SetPixel>

	MatrixLCD_SetPixel(4, 2);
 8001742:	2102      	movs	r1, #2
 8001744:	2004      	movs	r0, #4
 8001746:	f7ff fda5 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(4, 3);
 800174a:	2103      	movs	r1, #3
 800174c:	2004      	movs	r0, #4
 800174e:	f7ff fda1 	bl	8001294 <MatrixLCD_SetPixel>
	MatrixLCD_SetPixel(4, 4);
 8001752:	2104      	movs	r1, #4
 8001754:	2004      	movs	r0, #4
 8001756:	f7ff fd9d 	bl	8001294 <MatrixLCD_SetPixel>

}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <draw_OffMatrixLED>:

void draw_OffMatrixLED(){
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
}
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <process_uart_data>:
#define UART_CMD_LED_MATRIX_HAPPY 	53
#define UART_CMD_LED_MATRIX_CROSS 	54
#define UART_CMD_LED_MATRIX_ANGRY 	55
#define UART_CMD_LED_MATRIX_HEART 	56

void process_uart_data(uint8_t* buf){
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	uint8_t len = buf[0];
 8001774:	230f      	movs	r3, #15
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	7812      	ldrb	r2, [r2, #0]
 800177c:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = buf[1];
 800177e:	210e      	movs	r1, #14
 8001780:	187b      	adds	r3, r7, r1
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	7852      	ldrb	r2, [r2, #1]
 8001786:	701a      	strb	r2, [r3, #0]
	switch (cmd){
 8001788:	187b      	adds	r3, r7, r1
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b38      	cmp	r3, #56	; 0x38
 800178e:	d86a      	bhi.n	8001866 <process_uart_data+0xfa>
 8001790:	009a      	lsls	r2, r3, #2
 8001792:	4b37      	ldr	r3, [pc, #220]	; (8001870 <process_uart_data+0x104>)
 8001794:	18d3      	adds	r3, r2, r3
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	469f      	mov	pc, r3

	case UART_CMD_DC_MOTOR:
		motor_action(buf[2], buf[3], buf[4], buf[5]);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3302      	adds	r3, #2
 800179e:	7818      	ldrb	r0, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3303      	adds	r3, #3
 80017a4:	7819      	ldrb	r1, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3304      	adds	r3, #4
 80017aa:	781a      	ldrb	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3305      	adds	r3, #5
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	f7fe ff49 	bl	8000648 <motor_action>
		break;
 80017b6:	e056      	b.n	8001866 <process_uart_data+0xfa>

	case UART_CMD_DC_STEP_FORWARD:
		motor_all_action(ACTION_STEP_FORWARD,buf[2], buf[3]);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3302      	adds	r3, #2
 80017bc:	7819      	ldrb	r1, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3303      	adds	r3, #3
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	001a      	movs	r2, r3
 80017c6:	2003      	movs	r0, #3
 80017c8:	f7fe ffde 	bl	8000788 <motor_all_action>
		break;
 80017cc:	e04b      	b.n	8001866 <process_uart_data+0xfa>

	case UART_CMD_DC_STEP_BACKWARD:
		motor_all_action(ACTION_STEP_BACKWARD,buf[2], buf[3]);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3302      	adds	r3, #2
 80017d2:	7819      	ldrb	r1, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3303      	adds	r3, #3
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	001a      	movs	r2, r3
 80017dc:	2004      	movs	r0, #4
 80017de:	f7fe ffd3 	bl	8000788 <motor_all_action>
		break;
 80017e2:	e040      	b.n	8001866 <process_uart_data+0xfa>

	case UART_CMD_DC_STEP_LEFT:
		motor_all_action(ACTION_STEP_LEFT,buf[2], buf[3]);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3302      	adds	r3, #2
 80017e8:	7819      	ldrb	r1, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3303      	adds	r3, #3
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	001a      	movs	r2, r3
 80017f2:	2006      	movs	r0, #6
 80017f4:	f7fe ffc8 	bl	8000788 <motor_all_action>
		break;
 80017f8:	e035      	b.n	8001866 <process_uart_data+0xfa>

	case UART_CMD_DC_STEP_RIGHT:
		motor_all_action(ACTION_STEP_RIGHT,buf[2], buf[3]);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3302      	adds	r3, #2
 80017fe:	7819      	ldrb	r1, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3303      	adds	r3, #3
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	001a      	movs	r2, r3
 8001808:	2005      	movs	r0, #5
 800180a:	f7fe ffbd 	bl	8000788 <motor_all_action>
		break;
 800180e:	e02a      	b.n	8001866 <process_uart_data+0xfa>

	case UART_CMD_LED_MATRIX_HAPPY:
		MatrixLCD_ResetPixels();
 8001810:	f7ff fd5a 	bl	80012c8 <MatrixLCD_ResetPixels>
		draw_HappyMatrixLED();
 8001814:	f7ff fed3 	bl	80015be <draw_HappyMatrixLED>
		break;
 8001818:	e025      	b.n	8001866 <process_uart_data+0xfa>

	case UART_CMD_LED_MATRIX_SAD:
		MatrixLCD_ResetPixels();
 800181a:	f7ff fd55 	bl	80012c8 <MatrixLCD_ResetPixels>
		draw_SadMatrixLED();
 800181e:	f7ff fef3 	bl	8001608 <draw_SadMatrixLED>
		break;
 8001822:	e020      	b.n	8001866 <process_uart_data+0xfa>

	case UART_CMD_LED_MATRIX_ANGRY:
		MatrixLCD_ResetPixels();
 8001824:	f7ff fd50 	bl	80012c8 <MatrixLCD_ResetPixels>
		draw_AngryMatrixLED();
 8001828:	f7ff ff0f 	bl	800164a <draw_AngryMatrixLED>
		break;
 800182c:	e01b      	b.n	8001866 <process_uart_data+0xfa>

	case UART_CMD_LED_MATRIX:
		MatrixLCD_ResetPixels();
 800182e:	f7ff fd4b 	bl	80012c8 <MatrixLCD_ResetPixels>
		MatrixLCD_SetPixels2Buf(&buf[2]);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3302      	adds	r3, #2
 8001836:	0018      	movs	r0, r3
 8001838:	f7ff fd76 	bl	8001328 <MatrixLCD_SetPixels2Buf>
		break;
 800183c:	e013      	b.n	8001866 <process_uart_data+0xfa>

	case UART_CMD_LED_MATRIX_ON:
		MatrixLCD_ResetPixels();
 800183e:	f7ff fd43 	bl	80012c8 <MatrixLCD_ResetPixels>
		draw_OnMatrixLED();
 8001842:	f7ff ff2b 	bl	800169c <draw_OnMatrixLED>
		break;
 8001846:	e00e      	b.n	8001866 <process_uart_data+0xfa>

	case UART_CMD_LED_MATRIX_OFF:
		MatrixLCD_ResetPixels();
 8001848:	f7ff fd3e 	bl	80012c8 <MatrixLCD_ResetPixels>
		draw_OffMatrixLED();
 800184c:	f7ff ff88 	bl	8001760 <draw_OffMatrixLED>
		break;
 8001850:	e009      	b.n	8001866 <process_uart_data+0xfa>

	case UART_CMD_LED_MATRIX_CROSS:
		MatrixLCD_ResetPixels();
 8001852:	f7ff fd39 	bl	80012c8 <MatrixLCD_ResetPixels>
		draw_cross2MatrixLED();
 8001856:	f7ff fe85 	bl	8001564 <draw_cross2MatrixLED>
		break;
 800185a:	e004      	b.n	8001866 <process_uart_data+0xfa>

	case UART_CMD_LED_MATRIX_HEART:
		MatrixLCD_ResetPixels();
 800185c:	f7ff fd34 	bl	80012c8 <MatrixLCD_ResetPixels>
		draw_heart();
 8001860:	f7ff ff31 	bl	80016c6 <draw_heart>
		break;
 8001864:	46c0      	nop			; (mov r8, r8)
	}
}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	46bd      	mov	sp, r7
 800186a:	b004      	add	sp, #16
 800186c:	bd80      	pop	{r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	080052d4 	.word	0x080052d4

08001874 <parse_uart_data>:

void parse_uart_data(){
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
	Uart_Ch* uch = get_uart_ch();
 800187a:	f000 f94f 	bl	8001b1c <get_uart_ch>
 800187e:	0003      	movs	r3, r0
 8001880:	607b      	str	r3, [r7, #4]

	if(uch->fdata_ready){
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2222      	movs	r2, #34	; 0x22
 8001886:	5c9b      	ldrb	r3, [r3, r2]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d008      	beq.n	800189e <parse_uart_data+0x2a>
		//uart_send_data(&huart1, uch->rx_data_buf, uch->rx_data_cntr);
		process_uart_data(&(uch->rx_data_buf[2]));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3304      	adds	r3, #4
 8001890:	0018      	movs	r0, r3
 8001892:	f7ff ff6b 	bl	800176c <process_uart_data>
		uch->fdata_ready = 0;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2222      	movs	r2, #34	; 0x22
 800189a:	2100      	movs	r1, #0
 800189c:	5499      	strb	r1, [r3, r2]
	}
}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b002      	add	sp, #8
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <HAL_MspInit+0x24>)
 80018ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_MspInit+0x24>)
 80018b2:	2101      	movs	r1, #1
 80018b4:	430a      	orrs	r2, r1
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <HAL_MspInit+0x24>)
 80018ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_MspInit+0x24>)
 80018be:	2180      	movs	r1, #128	; 0x80
 80018c0:	0549      	lsls	r1, r1, #21
 80018c2:	430a      	orrs	r2, r1
 80018c4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40021000 	.word	0x40021000

080018d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	05db      	lsls	r3, r3, #23
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d10e      	bne.n	8001902 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_TIM_Base_MspInit+0x60>)
 80018e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_TIM_Base_MspInit+0x60>)
 80018ea:	2101      	movs	r1, #1
 80018ec:	430a      	orrs	r2, r1
 80018ee:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2100      	movs	r1, #0
 80018f4:	200f      	movs	r0, #15
 80018f6:	f000 fbef 	bl	80020d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018fa:	200f      	movs	r0, #15
 80018fc:	f000 fc01 	bl	8002102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001900:	e012      	b.n	8001928 <HAL_TIM_Base_MspInit+0x58>
  else if(htim_base->Instance==TIM6)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <HAL_TIM_Base_MspInit+0x64>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d10d      	bne.n	8001928 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_TIM_Base_MspInit+0x60>)
 800190e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <HAL_TIM_Base_MspInit+0x60>)
 8001912:	2110      	movs	r1, #16
 8001914:	430a      	orrs	r2, r1
 8001916:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2100      	movs	r1, #0
 800191c:	2011      	movs	r0, #17
 800191e:	f000 fbdb 	bl	80020d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001922:	2011      	movs	r0, #17
 8001924:	f000 fbed 	bl	8002102 <HAL_NVIC_EnableIRQ>
}
 8001928:	46c0      	nop			; (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	b002      	add	sp, #8
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40021000 	.word	0x40021000
 8001934:	40001000 	.word	0x40001000

08001938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b08b      	sub	sp, #44	; 0x2c
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	2414      	movs	r4, #20
 8001942:	193b      	adds	r3, r7, r4
 8001944:	0018      	movs	r0, r3
 8001946:	2314      	movs	r3, #20
 8001948:	001a      	movs	r2, r3
 800194a:	2100      	movs	r1, #0
 800194c:	f003 fcae 	bl	80052ac <memset>
  if(huart->Instance==USART1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a37      	ldr	r2, [pc, #220]	; (8001a34 <HAL_UART_MspInit+0xfc>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d131      	bne.n	80019be <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800195a:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <HAL_UART_MspInit+0x100>)
 800195c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800195e:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <HAL_UART_MspInit+0x100>)
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	01c9      	lsls	r1, r1, #7
 8001964:	430a      	orrs	r2, r1
 8001966:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001968:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <HAL_UART_MspInit+0x100>)
 800196a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800196c:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <HAL_UART_MspInit+0x100>)
 800196e:	2102      	movs	r1, #2
 8001970:	430a      	orrs	r2, r1
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
 8001974:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <HAL_UART_MspInit+0x100>)
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	2202      	movs	r2, #2
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001980:	0021      	movs	r1, r4
 8001982:	187b      	adds	r3, r7, r1
 8001984:	22c0      	movs	r2, #192	; 0xc0
 8001986:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	187b      	adds	r3, r7, r1
 800198a:	2202      	movs	r2, #2
 800198c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	187b      	adds	r3, r7, r1
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	187b      	adds	r3, r7, r1
 8001996:	2203      	movs	r2, #3
 8001998:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800199a:	187b      	adds	r3, r7, r1
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	4a26      	ldr	r2, [pc, #152]	; (8001a3c <HAL_UART_MspInit+0x104>)
 80019a4:	0019      	movs	r1, r3
 80019a6:	0010      	movs	r0, r2
 80019a8:	f000 fc50 	bl	800224c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2100      	movs	r1, #0
 80019b0:	201b      	movs	r0, #27
 80019b2:	f000 fb91 	bl	80020d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019b6:	201b      	movs	r0, #27
 80019b8:	f000 fba3 	bl	8002102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019bc:	e036      	b.n	8001a2c <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a1f      	ldr	r2, [pc, #124]	; (8001a40 <HAL_UART_MspInit+0x108>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d131      	bne.n	8001a2c <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_UART_MspInit+0x100>)
 80019ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <HAL_UART_MspInit+0x100>)
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	0289      	lsls	r1, r1, #10
 80019d2:	430a      	orrs	r2, r1
 80019d4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <HAL_UART_MspInit+0x100>)
 80019d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019da:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <HAL_UART_MspInit+0x100>)
 80019dc:	2101      	movs	r1, #1
 80019de:	430a      	orrs	r2, r1
 80019e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_UART_MspInit+0x100>)
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	2201      	movs	r2, #1
 80019e8:	4013      	ands	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019ee:	2114      	movs	r1, #20
 80019f0:	187b      	adds	r3, r7, r1
 80019f2:	220c      	movs	r2, #12
 80019f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	187b      	adds	r3, r7, r1
 80019f8:	2202      	movs	r2, #2
 80019fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	2203      	movs	r2, #3
 8001a06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	187a      	adds	r2, r7, r1
 8001a10:	23a0      	movs	r3, #160	; 0xa0
 8001a12:	05db      	lsls	r3, r3, #23
 8001a14:	0011      	movs	r1, r2
 8001a16:	0018      	movs	r0, r3
 8001a18:	f000 fc18 	bl	800224c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2100      	movs	r1, #0
 8001a20:	201c      	movs	r0, #28
 8001a22:	f000 fb59 	bl	80020d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a26:	201c      	movs	r0, #28
 8001a28:	f000 fb6b 	bl	8002102 <HAL_NVIC_EnableIRQ>
}
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b00b      	add	sp, #44	; 0x2c
 8001a32:	bd90      	pop	{r4, r7, pc}
 8001a34:	40013800 	.word	0x40013800
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	50000400 	.word	0x50000400
 8001a40:	40004400 	.word	0x40004400

08001a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <NMI_Handler+0x4>

08001a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <HardFault_Handler+0x4>

08001a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a54:	46c0      	nop			; (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a68:	f000 fa6e 	bl	8001f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6c:	46c0      	nop			; (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <TIM2_IRQHandler+0x14>)
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f001 fd52 	bl	8003524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a80:	46c0      	nop			; (mov r8, r8)
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	20000170 	.word	0x20000170

08001a8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <TIM6_DAC_IRQHandler+0x14>)
 8001a92:	0018      	movs	r0, r3
 8001a94:	f001 fd46 	bl	8003524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a98:	46c0      	nop			; (mov r8, r8)
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	20000130 	.word	0x20000130

08001aa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <USART1_IRQHandler+0x14>)
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f002 f9c0 	bl	8003e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ab0:	46c0      	nop			; (mov r8, r8)
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	200000ac 	.word	0x200000ac

08001abc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <USART2_IRQHandler+0x14>)
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f002 f9b4 	bl	8003e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	200001b0 	.word	0x200001b0

08001ad4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad8:	46c0      	nop			; (mov r8, r8)
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <get_f_send_uart_ack>:
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim6;
Uart_Ch uart_ch = {.fdata_ready=0,.rx_data_cntr=0, .new_byte_received_flag=0};

uint8_t f_send_uart_ack = 0;
uint8_t get_f_send_uart_ack(){return f_send_uart_ack;}
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4b02      	ldr	r3, [pc, #8]	; (8001af0 <get_f_send_uart_ack+0x10>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	0018      	movs	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	20000055 	.word	0x20000055

08001af4 <set_f_send_uart_ack>:
void set_f_send_uart_ack(){f_send_uart_ack = 1;}
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4b02      	ldr	r3, [pc, #8]	; (8001b04 <set_f_send_uart_ack+0x10>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000055 	.word	0x20000055

08001b08 <rst_f_send_uart_ack>:
void rst_f_send_uart_ack(){f_send_uart_ack = 0;}
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4b02      	ldr	r3, [pc, #8]	; (8001b18 <rst_f_send_uart_ack+0x10>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000055 	.word	0x20000055

08001b1c <get_uart_ch>:

Uart_Ch* get_uart_ch(){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
	return &uart_ch;
 8001b20:	4b01      	ldr	r3, [pc, #4]	; (8001b28 <get_uart_ch+0xc>)
}
 8001b22:	0018      	movs	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000030 	.word	0x20000030

08001b2c <is_data_valid>:
		sum = sum + uart_ch.rx_data_buf[i];
	}
	return sum;
}

uint8_t is_data_valid(uint8_t* data, uint8_t len){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	000a      	movs	r2, r1
 8001b36:	1cfb      	adds	r3, r7, #3
 8001b38:	701a      	strb	r2, [r3, #0]
	uint8_t incoming_checksum, package_len, i,total=0;
 8001b3a:	230e      	movs	r3, #14
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]

	if(len <2) return 0;//Each data pack must hold at least 4 byte
 8001b42:	1cfb      	adds	r3, r7, #3
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d801      	bhi.n	8001b4e <is_data_valid+0x22>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e049      	b.n	8001be2 <is_data_valid+0xb6>
	if(data[0] != 0xFF | data[1] != 0xFE) return 0; //each data packet shall start with 0xFF-0xFE
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	3bff      	subs	r3, #255	; 0xff
 8001b54:	1e5a      	subs	r2, r3, #1
 8001b56:	4193      	sbcs	r3, r2
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	3bfe      	subs	r3, #254	; 0xfe
 8001b62:	1e59      	subs	r1, r3, #1
 8001b64:	418b      	sbcs	r3, r1
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <is_data_valid+0x48>
 8001b70:	2300      	movs	r3, #0
 8001b72:	e036      	b.n	8001be2 <is_data_valid+0xb6>

	incoming_checksum  = data[len-1];//last byte is checksum
 8001b74:	1cfb      	adds	r3, r7, #3
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	18d2      	adds	r2, r2, r3
 8001b7e:	230d      	movs	r3, #13
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	7812      	ldrb	r2, [r2, #0]
 8001b84:	701a      	strb	r2, [r3, #0]
	package_len = data[2]; //data[2] is the length
 8001b86:	230c      	movs	r3, #12
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	7892      	ldrb	r2, [r2, #2]
 8001b8e:	701a      	strb	r2, [r3, #0]

	//calculate checksum for valid new data
	for(i=3;i<len-1;i++){
 8001b90:	230f      	movs	r3, #15
 8001b92:	18fb      	adds	r3, r7, r3
 8001b94:	2203      	movs	r2, #3
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	e010      	b.n	8001bbc <is_data_valid+0x90>
		total = total + data[i];
 8001b9a:	200f      	movs	r0, #15
 8001b9c:	183b      	adds	r3, r7, r0
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	18d3      	adds	r3, r2, r3
 8001ba4:	7819      	ldrb	r1, [r3, #0]
 8001ba6:	220e      	movs	r2, #14
 8001ba8:	18bb      	adds	r3, r7, r2
 8001baa:	18ba      	adds	r2, r7, r2
 8001bac:	7812      	ldrb	r2, [r2, #0]
 8001bae:	188a      	adds	r2, r1, r2
 8001bb0:	701a      	strb	r2, [r3, #0]
	for(i=3;i<len-1;i++){
 8001bb2:	183b      	adds	r3, r7, r0
 8001bb4:	781a      	ldrb	r2, [r3, #0]
 8001bb6:	183b      	adds	r3, r7, r0
 8001bb8:	3201      	adds	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	230f      	movs	r3, #15
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	1cfb      	adds	r3, r7, #3
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbe6      	blt.n	8001b9a <is_data_valid+0x6e>
	}

	//disable checksum control
	if(total == incoming_checksum){
 8001bcc:	230e      	movs	r3, #14
 8001bce:	18fa      	adds	r2, r7, r3
 8001bd0:	230d      	movs	r3, #13
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	7812      	ldrb	r2, [r2, #0]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d101      	bne.n	8001be0 <is_data_valid+0xb4>
		return 1;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <is_data_valid+0xb6>
	}

	return 0;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	0018      	movs	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b004      	add	sp, #16
 8001be8:	bd80      	pop	{r7, pc}

08001bea <startTimer>:

void startTimer(TIM_HandleTypeDef* htim){
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
	htim->Instance->CR1 &= ~0x01; //Stop Timer
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	438a      	bics	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]
	htim->Instance->CNT = 0; //Reset Counter
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
	htim->Instance->CR1 |= 0x01; //Start Timer
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2101      	movs	r1, #1
 8001c16:	430a      	orrs	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]
}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b002      	add	sp, #8
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <stopTimer>:

void stopTimer(TIM_HandleTypeDef* htim){
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
	htim->Instance->CR1 &= ~0x01; //Stop Timer
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2101      	movs	r1, #1
 8001c36:	438a      	bics	r2, r1
 8001c38:	601a      	str	r2, [r3, #0]
	htim->Instance->CNT = 0; //Reset Counter
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b002      	add	sp, #8
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <UART_Callback_StateMachine>:
			uart_ch.rx_data_buf[uart_ch.rx_data_cntr++] = uart_ch.rxdata;
		}
}

uint8_t uart_state = UART_STATE_FF;
void UART_Callback_StateMachine(UART_HandleTypeDef *huart){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	static uint8_t len;
	static uint8_t datacounter = 0;
	switch (uart_state){
 8001c54:	4b52      	ldr	r3, [pc, #328]	; (8001da0 <UART_Callback_StateMachine+0x154>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d900      	bls.n	8001c5e <UART_Callback_StateMachine+0x12>
 8001c5c:	e090      	b.n	8001d80 <UART_Callback_StateMachine+0x134>
 8001c5e:	009a      	lsls	r2, r3, #2
 8001c60:	4b50      	ldr	r3, [pc, #320]	; (8001da4 <UART_Callback_StateMachine+0x158>)
 8001c62:	18d3      	adds	r3, r2, r3
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	469f      	mov	pc, r3
		case UART_STATE_FF:
			uart_ch.rx_data_cntr = 0;
 8001c68:	4b4f      	ldr	r3, [pc, #316]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	705a      	strb	r2, [r3, #1]
			uart_ch.rx_data_buf[uart_ch.rx_data_cntr++] = uart_ch.rxdata;
 8001c6e:	4b4e      	ldr	r3, [pc, #312]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001c70:	785b      	ldrb	r3, [r3, #1]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	b2d1      	uxtb	r1, r2
 8001c76:	4a4c      	ldr	r2, [pc, #304]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001c78:	7051      	strb	r1, [r2, #1]
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	4b4a      	ldr	r3, [pc, #296]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001c7e:	781a      	ldrb	r2, [r3, #0]
 8001c80:	4b49      	ldr	r3, [pc, #292]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001c82:	185b      	adds	r3, r3, r1
 8001c84:	709a      	strb	r2, [r3, #2]
			if (uart_ch.rxdata == 0xFF) uart_state = UART_STATE_FE;
 8001c86:	4b48      	ldr	r3, [pc, #288]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2bff      	cmp	r3, #255	; 0xff
 8001c8c:	d000      	beq.n	8001c90 <UART_Callback_StateMachine+0x44>
 8001c8e:	e074      	b.n	8001d7a <UART_Callback_StateMachine+0x12e>
 8001c90:	4b43      	ldr	r3, [pc, #268]	; (8001da0 <UART_Callback_StateMachine+0x154>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
			break;
 8001c96:	e070      	b.n	8001d7a <UART_Callback_StateMachine+0x12e>
		case UART_STATE_FE:
			uart_ch.rx_data_buf[uart_ch.rx_data_cntr++] = uart_ch.rxdata;
 8001c98:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001c9a:	785b      	ldrb	r3, [r3, #1]
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	b2d1      	uxtb	r1, r2
 8001ca0:	4a41      	ldr	r2, [pc, #260]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001ca2:	7051      	strb	r1, [r2, #1]
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	4b40      	ldr	r3, [pc, #256]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001ca8:	781a      	ldrb	r2, [r3, #0]
 8001caa:	4b3f      	ldr	r3, [pc, #252]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001cac:	185b      	adds	r3, r3, r1
 8001cae:	709a      	strb	r2, [r3, #2]
			if (uart_ch.rxdata == 0xFE) uart_state = UART_STATE_LEN;
 8001cb0:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2bfe      	cmp	r3, #254	; 0xfe
 8001cb6:	d103      	bne.n	8001cc0 <UART_Callback_StateMachine+0x74>
 8001cb8:	4b39      	ldr	r3, [pc, #228]	; (8001da0 <UART_Callback_StateMachine+0x154>)
 8001cba:	2202      	movs	r2, #2
 8001cbc:	701a      	strb	r2, [r3, #0]
			else uart_state = UART_STATE_FF;
			break;
 8001cbe:	e05f      	b.n	8001d80 <UART_Callback_StateMachine+0x134>
			else uart_state = UART_STATE_FF;
 8001cc0:	4b37      	ldr	r3, [pc, #220]	; (8001da0 <UART_Callback_StateMachine+0x154>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
			break;
 8001cc6:	e05b      	b.n	8001d80 <UART_Callback_StateMachine+0x134>
		case UART_STATE_LEN:
			uart_ch.rx_data_buf[uart_ch.rx_data_cntr++] = uart_ch.rxdata;
 8001cc8:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001cca:	785b      	ldrb	r3, [r3, #1]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	b2d1      	uxtb	r1, r2
 8001cd0:	4a35      	ldr	r2, [pc, #212]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001cd2:	7051      	strb	r1, [r2, #1]
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	4b34      	ldr	r3, [pc, #208]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001cd8:	781a      	ldrb	r2, [r3, #0]
 8001cda:	4b33      	ldr	r3, [pc, #204]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001cdc:	185b      	adds	r3, r3, r1
 8001cde:	709a      	strb	r2, [r3, #2]
			datacounter = 0;
 8001ce0:	4b32      	ldr	r3, [pc, #200]	; (8001dac <UART_Callback_StateMachine+0x160>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
			len = uart_ch.rxdata;
 8001ce6:	4b30      	ldr	r3, [pc, #192]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001ce8:	781a      	ldrb	r2, [r3, #0]
 8001cea:	4b31      	ldr	r3, [pc, #196]	; (8001db0 <UART_Callback_StateMachine+0x164>)
 8001cec:	701a      	strb	r2, [r3, #0]
			uart_state = UART_STATE_DATA;
 8001cee:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <UART_Callback_StateMachine+0x154>)
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	701a      	strb	r2, [r3, #0]
			break;
 8001cf4:	e044      	b.n	8001d80 <UART_Callback_StateMachine+0x134>
		case UART_STATE_DATA:
			uart_ch.rx_data_buf[uart_ch.rx_data_cntr++] = uart_ch.rxdata;
 8001cf6:	4b2c      	ldr	r3, [pc, #176]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001cf8:	785b      	ldrb	r3, [r3, #1]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	b2d1      	uxtb	r1, r2
 8001cfe:	4a2a      	ldr	r2, [pc, #168]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001d00:	7051      	strb	r1, [r2, #1]
 8001d02:	0019      	movs	r1, r3
 8001d04:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001d06:	781a      	ldrb	r2, [r3, #0]
 8001d08:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001d0a:	185b      	adds	r3, r3, r1
 8001d0c:	709a      	strb	r2, [r3, #2]
			if(datacounter++ == len-1) uart_state = UART_STATE_ACK;
 8001d0e:	4b27      	ldr	r3, [pc, #156]	; (8001dac <UART_Callback_StateMachine+0x160>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	b2d1      	uxtb	r1, r2
 8001d16:	4a25      	ldr	r2, [pc, #148]	; (8001dac <UART_Callback_StateMachine+0x160>)
 8001d18:	7011      	strb	r1, [r2, #0]
 8001d1a:	001a      	movs	r2, r3
 8001d1c:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <UART_Callback_StateMachine+0x164>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d12b      	bne.n	8001d7e <UART_Callback_StateMachine+0x132>
 8001d26:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <UART_Callback_StateMachine+0x154>)
 8001d28:	2204      	movs	r2, #4
 8001d2a:	701a      	strb	r2, [r3, #0]
			break;
 8001d2c:	e027      	b.n	8001d7e <UART_Callback_StateMachine+0x132>
		case UART_STATE_ACK:
			uart_ch.rx_data_buf[uart_ch.rx_data_cntr++] = uart_ch.rxdata;
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001d30:	785b      	ldrb	r3, [r3, #1]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	b2d1      	uxtb	r1, r2
 8001d36:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001d38:	7051      	strb	r1, [r2, #1]
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001d3e:	781a      	ldrb	r2, [r3, #0]
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001d42:	185b      	adds	r3, r3, r1
 8001d44:	709a      	strb	r2, [r3, #2]
			if(is_data_valid(uart_ch.rx_data_buf, uart_ch.rx_data_cntr)){
 8001d46:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001d48:	785a      	ldrb	r2, [r3, #1]
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <UART_Callback_StateMachine+0x168>)
 8001d4c:	0011      	movs	r1, r2
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f7ff feec 	bl	8001b2c <is_data_valid>
 8001d54:	1e03      	subs	r3, r0, #0
 8001d56:	d004      	beq.n	8001d62 <UART_Callback_StateMachine+0x116>
				uart_ch.fdata_ready = 1;
 8001d58:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001d5a:	2222      	movs	r2, #34	; 0x22
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	5499      	strb	r1, [r3, r2]
 8001d60:	e007      	b.n	8001d72 <UART_Callback_StateMachine+0x126>
			}

			else {
				uart_ch.data_error_counter++;
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001d64:	2223      	movs	r2, #35	; 0x23
 8001d66:	5c9b      	ldrb	r3, [r3, r2]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	b2d9      	uxtb	r1, r3
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001d6e:	2223      	movs	r2, #35	; 0x23
 8001d70:	5499      	strb	r1, [r3, r2]
			}
			uart_state = UART_STATE_FF;
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <UART_Callback_StateMachine+0x154>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
			break;
 8001d78:	e002      	b.n	8001d80 <UART_Callback_StateMachine+0x134>
			break;
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	e000      	b.n	8001d80 <UART_Callback_StateMachine+0x134>
			break;
 8001d7e:	46c0      	nop			; (mov r8, r8)
	}

	uart_ch.new_byte_received_flag = 1;
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <UART_Callback_StateMachine+0x15c>)
 8001d82:	2224      	movs	r2, #36	; 0x24
 8001d84:	2101      	movs	r1, #1
 8001d86:	5499      	strb	r1, [r3, r2]
	initiate_Uart_Ch(huart);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f000 f83a 	bl	8001e04 <initiate_Uart_Ch>
	startTimer(&htim6);
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <UART_Callback_StateMachine+0x16c>)
 8001d92:	0018      	movs	r0, r3
 8001d94:	f7ff ff29 	bl	8001bea <startTimer>
}
 8001d98:	46c0      	nop			; (mov r8, r8)
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	b002      	add	sp, #8
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000056 	.word	0x20000056
 8001da4:	080053dc 	.word	0x080053dc
 8001da8:	20000030 	.word	0x20000030
 8001dac:	20000057 	.word	0x20000057
 8001db0:	20000058 	.word	0x20000058
 8001db4:	20000032 	.word	0x20000032
 8001db8:	20000130 	.word	0x20000130

08001dbc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
		//uart_ch.new_byte_received_flag = 1;
	//UART_NewByteRcv_Callback(huart);
	UART_Callback_StateMachine(huart);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7ff ff40 	bl	8001c4c <UART_Callback_StateMachine>
}
 8001dcc:	46c0      	nop			; (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <uart_comm_timer_elapsed_callback>:

void uart_comm_timer_elapsed_callback(TIM_HandleTypeDef* htim)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
	stopTimer(htim);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	0018      	movs	r0, r3
 8001de0:	f7ff ff1f 	bl	8001c22 <stopTimer>
	uart_state = UART_STATE_FF;
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <uart_comm_timer_elapsed_callback+0x28>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
	initiate_Uart_Ch(&huart2);
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <uart_comm_timer_elapsed_callback+0x2c>)
 8001dec:	0018      	movs	r0, r3
 8001dee:	f000 f809 	bl	8001e04 <initiate_Uart_Ch>

	else {
		uart_ch.data_error_counter++;
	}
	uart_ch.rx_data_cntr = 0;*/
}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b002      	add	sp, #8
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	20000056 	.word	0x20000056
 8001e00:	200001b0 	.word	0x200001b0

08001e04 <initiate_Uart_Ch>:

void initiate_Uart_Ch(UART_HandleTypeDef *huart){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &(uart_ch.rxdata), 1);
 8001e0c:	4904      	ldr	r1, [pc, #16]	; (8001e20 <initiate_Uart_Ch+0x1c>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	0018      	movs	r0, r3
 8001e14:	f001 ffa4 	bl	8003d60 <HAL_UART_Receive_IT>
}
 8001e18:	46c0      	nop			; (mov r8, r8)
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b002      	add	sp, #8
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000030 	.word	0x20000030

08001e24 <uart_send_data>:

void uart_send_data(UART_HandleTypeDef *huart, uint8_t* data, uint8_t len){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	1dfb      	adds	r3, r7, #7
 8001e30:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart, data, len, 100);
 8001e32:	1dfb      	adds	r3, r7, #7
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	2364      	movs	r3, #100	; 0x64
 8001e3e:	f001 fee7 	bl	8003c10 <HAL_UART_Transmit>
}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b004      	add	sp, #16
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001e4c:	480d      	ldr	r0, [pc, #52]	; (8001e84 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001e4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e50:	480d      	ldr	r0, [pc, #52]	; (8001e88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e52:	490e      	ldr	r1, [pc, #56]	; (8001e8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e54:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <LoopForever+0xe>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e58:	e002      	b.n	8001e60 <LoopCopyDataInit>

08001e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5e:	3304      	adds	r3, #4

08001e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e64:	d3f9      	bcc.n	8001e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e66:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e68:	4c0b      	ldr	r4, [pc, #44]	; (8001e98 <LoopForever+0x16>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e6c:	e001      	b.n	8001e72 <LoopFillZerobss>

08001e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e70:	3204      	adds	r2, #4

08001e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e74:	d3fb      	bcc.n	8001e6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001e76:	f7ff fe2d 	bl	8001ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e7a:	f003 f9f3 	bl	8005264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7e:	f7fe ff3f 	bl	8000d00 <main>

08001e82 <LoopForever>:

LoopForever:
    b LoopForever
 8001e82:	e7fe      	b.n	8001e82 <LoopForever>
   ldr   r0, =_estack
 8001e84:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e90:	08005448 	.word	0x08005448
  ldr r2, =_sbss
 8001e94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e98:	200002a4 	.word	0x200002a4

08001e9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e9c:	e7fe      	b.n	8001e9c <ADC1_COMP_IRQHandler>
	...

08001ea0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ea6:	1dfb      	adds	r3, r7, #7
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_Init+0x3c>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_Init+0x3c>)
 8001eb2:	2140      	movs	r1, #64	; 0x40
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f000 f811 	bl	8001ee0 <HAL_InitTick>
 8001ebe:	1e03      	subs	r3, r0, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001ec2:	1dfb      	adds	r3, r7, #7
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
 8001ec8:	e001      	b.n	8001ece <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eca:	f7ff fced 	bl	80018a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ece:	1dfb      	adds	r3, r7, #7
 8001ed0:	781b      	ldrb	r3, [r3, #0]
}
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b002      	add	sp, #8
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	40022000 	.word	0x40022000

08001ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_InitTick+0x5c>)
 8001eea:	681c      	ldr	r4, [r3, #0]
 8001eec:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <HAL_InitTick+0x60>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	23fa      	movs	r3, #250	; 0xfa
 8001ef4:	0098      	lsls	r0, r3, #2
 8001ef6:	f7fe f907 	bl	8000108 <__udivsi3>
 8001efa:	0003      	movs	r3, r0
 8001efc:	0019      	movs	r1, r3
 8001efe:	0020      	movs	r0, r4
 8001f00:	f7fe f902 	bl	8000108 <__udivsi3>
 8001f04:	0003      	movs	r3, r0
 8001f06:	0018      	movs	r0, r3
 8001f08:	f000 f90b 	bl	8002122 <HAL_SYSTICK_Config>
 8001f0c:	1e03      	subs	r3, r0, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e00f      	b.n	8001f34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d80b      	bhi.n	8001f32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	425b      	negs	r3, r3
 8001f20:	2200      	movs	r2, #0
 8001f22:	0018      	movs	r0, r3
 8001f24:	f000 f8d8 	bl	80020d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_InitTick+0x64>)
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e000      	b.n	8001f34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b003      	add	sp, #12
 8001f3a:	bd90      	pop	{r4, r7, pc}
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000008 	.word	0x20000008
 8001f44:	20000004 	.word	0x20000004

08001f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_IncTick+0x1c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	001a      	movs	r2, r3
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_IncTick+0x20>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	18d2      	adds	r2, r2, r3
 8001f58:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <HAL_IncTick+0x20>)
 8001f5a:	601a      	str	r2, [r3, #0]
}
 8001f5c:	46c0      	nop			; (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	20000008 	.word	0x20000008
 8001f68:	200002a0 	.word	0x200002a0

08001f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f70:	4b02      	ldr	r3, [pc, #8]	; (8001f7c <HAL_GetTick+0x10>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	200002a0 	.word	0x200002a0

08001f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	0002      	movs	r2, r0
 8001f88:	1dfb      	adds	r3, r7, #7
 8001f8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f8c:	1dfb      	adds	r3, r7, #7
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b7f      	cmp	r3, #127	; 0x7f
 8001f92:	d809      	bhi.n	8001fa8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f94:	1dfb      	adds	r3, r7, #7
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	001a      	movs	r2, r3
 8001f9a:	231f      	movs	r3, #31
 8001f9c:	401a      	ands	r2, r3
 8001f9e:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <__NVIC_EnableIRQ+0x30>)
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	4091      	lsls	r1, r2
 8001fa4:	000a      	movs	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]
  }
}
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b002      	add	sp, #8
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	e000e100 	.word	0xe000e100

08001fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	0002      	movs	r2, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	1dfb      	adds	r3, r7, #7
 8001fc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fc2:	1dfb      	adds	r3, r7, #7
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b7f      	cmp	r3, #127	; 0x7f
 8001fc8:	d828      	bhi.n	800201c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fca:	4a2f      	ldr	r2, [pc, #188]	; (8002088 <__NVIC_SetPriority+0xd4>)
 8001fcc:	1dfb      	adds	r3, r7, #7
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b25b      	sxtb	r3, r3
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	33c0      	adds	r3, #192	; 0xc0
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	589b      	ldr	r3, [r3, r2]
 8001fda:	1dfa      	adds	r2, r7, #7
 8001fdc:	7812      	ldrb	r2, [r2, #0]
 8001fde:	0011      	movs	r1, r2
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	400a      	ands	r2, r1
 8001fe4:	00d2      	lsls	r2, r2, #3
 8001fe6:	21ff      	movs	r1, #255	; 0xff
 8001fe8:	4091      	lsls	r1, r2
 8001fea:	000a      	movs	r2, r1
 8001fec:	43d2      	mvns	r2, r2
 8001fee:	401a      	ands	r2, r3
 8001ff0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	019b      	lsls	r3, r3, #6
 8001ff6:	22ff      	movs	r2, #255	; 0xff
 8001ff8:	401a      	ands	r2, r3
 8001ffa:	1dfb      	adds	r3, r7, #7
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	0018      	movs	r0, r3
 8002000:	2303      	movs	r3, #3
 8002002:	4003      	ands	r3, r0
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002008:	481f      	ldr	r0, [pc, #124]	; (8002088 <__NVIC_SetPriority+0xd4>)
 800200a:	1dfb      	adds	r3, r7, #7
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	b25b      	sxtb	r3, r3
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	430a      	orrs	r2, r1
 8002014:	33c0      	adds	r3, #192	; 0xc0
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800201a:	e031      	b.n	8002080 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800201c:	4a1b      	ldr	r2, [pc, #108]	; (800208c <__NVIC_SetPriority+0xd8>)
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	0019      	movs	r1, r3
 8002024:	230f      	movs	r3, #15
 8002026:	400b      	ands	r3, r1
 8002028:	3b08      	subs	r3, #8
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	3306      	adds	r3, #6
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	18d3      	adds	r3, r2, r3
 8002032:	3304      	adds	r3, #4
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	1dfa      	adds	r2, r7, #7
 8002038:	7812      	ldrb	r2, [r2, #0]
 800203a:	0011      	movs	r1, r2
 800203c:	2203      	movs	r2, #3
 800203e:	400a      	ands	r2, r1
 8002040:	00d2      	lsls	r2, r2, #3
 8002042:	21ff      	movs	r1, #255	; 0xff
 8002044:	4091      	lsls	r1, r2
 8002046:	000a      	movs	r2, r1
 8002048:	43d2      	mvns	r2, r2
 800204a:	401a      	ands	r2, r3
 800204c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	019b      	lsls	r3, r3, #6
 8002052:	22ff      	movs	r2, #255	; 0xff
 8002054:	401a      	ands	r2, r3
 8002056:	1dfb      	adds	r3, r7, #7
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	0018      	movs	r0, r3
 800205c:	2303      	movs	r3, #3
 800205e:	4003      	ands	r3, r0
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002064:	4809      	ldr	r0, [pc, #36]	; (800208c <__NVIC_SetPriority+0xd8>)
 8002066:	1dfb      	adds	r3, r7, #7
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	001c      	movs	r4, r3
 800206c:	230f      	movs	r3, #15
 800206e:	4023      	ands	r3, r4
 8002070:	3b08      	subs	r3, #8
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	430a      	orrs	r2, r1
 8002076:	3306      	adds	r3, #6
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	18c3      	adds	r3, r0, r3
 800207c:	3304      	adds	r3, #4
 800207e:	601a      	str	r2, [r3, #0]
}
 8002080:	46c0      	nop			; (mov r8, r8)
 8002082:	46bd      	mov	sp, r7
 8002084:	b003      	add	sp, #12
 8002086:	bd90      	pop	{r4, r7, pc}
 8002088:	e000e100 	.word	0xe000e100
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	1e5a      	subs	r2, r3, #1
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	045b      	lsls	r3, r3, #17
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d301      	bcc.n	80020a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020a4:	2301      	movs	r3, #1
 80020a6:	e010      	b.n	80020ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <SysTick_Config+0x44>)
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	3a01      	subs	r2, #1
 80020ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b0:	2301      	movs	r3, #1
 80020b2:	425b      	negs	r3, r3
 80020b4:	2103      	movs	r1, #3
 80020b6:	0018      	movs	r0, r3
 80020b8:	f7ff ff7c 	bl	8001fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <SysTick_Config+0x44>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c2:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <SysTick_Config+0x44>)
 80020c4:	2207      	movs	r2, #7
 80020c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	0018      	movs	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b002      	add	sp, #8
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	e000e010 	.word	0xe000e010

080020d8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	210f      	movs	r1, #15
 80020e4:	187b      	adds	r3, r7, r1
 80020e6:	1c02      	adds	r2, r0, #0
 80020e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	187b      	adds	r3, r7, r1
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b25b      	sxtb	r3, r3
 80020f2:	0011      	movs	r1, r2
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7ff ff5d 	bl	8001fb4 <__NVIC_SetPriority>
}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b004      	add	sp, #16
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	0002      	movs	r2, r0
 800210a:	1dfb      	adds	r3, r7, #7
 800210c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800210e:	1dfb      	adds	r3, r7, #7
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	b25b      	sxtb	r3, r3
 8002114:	0018      	movs	r0, r3
 8002116:	f7ff ff33 	bl	8001f80 <__NVIC_EnableIRQ>
}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	0018      	movs	r0, r3
 800212e:	f7ff ffaf 	bl	8002090 <SysTick_Config>
 8002132:	0003      	movs	r3, r0
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	b002      	add	sp, #8
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002144:	230f      	movs	r3, #15
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2225      	movs	r2, #37	; 0x25
 8002150:	5c9b      	ldrb	r3, [r3, r2]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d008      	beq.n	800216a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2204      	movs	r2, #4
 800215c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2224      	movs	r2, #36	; 0x24
 8002162:	2100      	movs	r1, #0
 8002164:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e024      	b.n	80021b4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	210e      	movs	r1, #14
 8002176:	438a      	bics	r2, r1
 8002178:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2101      	movs	r1, #1
 8002186:	438a      	bics	r2, r1
 8002188:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	221c      	movs	r2, #28
 8002190:	401a      	ands	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	2101      	movs	r1, #1
 8002198:	4091      	lsls	r1, r2
 800219a:	000a      	movs	r2, r1
 800219c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2225      	movs	r2, #37	; 0x25
 80021a2:	2101      	movs	r1, #1
 80021a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2224      	movs	r2, #36	; 0x24
 80021aa:	2100      	movs	r1, #0
 80021ac:	5499      	strb	r1, [r3, r2]

    return status;
 80021ae:	230f      	movs	r3, #15
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80021b4:	0018      	movs	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b004      	add	sp, #16
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c4:	210f      	movs	r1, #15
 80021c6:	187b      	adds	r3, r7, r1
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2225      	movs	r2, #37	; 0x25
 80021d0:	5c9b      	ldrb	r3, [r3, r2]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d006      	beq.n	80021e6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2204      	movs	r2, #4
 80021dc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021de:	187b      	adds	r3, r7, r1
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	e02a      	b.n	800223c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	210e      	movs	r1, #14
 80021f2:	438a      	bics	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2101      	movs	r1, #1
 8002202:	438a      	bics	r2, r1
 8002204:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	221c      	movs	r2, #28
 800220c:	401a      	ands	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	2101      	movs	r1, #1
 8002214:	4091      	lsls	r1, r2
 8002216:	000a      	movs	r2, r1
 8002218:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2225      	movs	r2, #37	; 0x25
 800221e:	2101      	movs	r1, #1
 8002220:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2224      	movs	r2, #36	; 0x24
 8002226:	2100      	movs	r1, #0
 8002228:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	2b00      	cmp	r3, #0
 8002230:	d004      	beq.n	800223c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	0010      	movs	r0, r2
 800223a:	4798      	blx	r3
    }
  }
  return status;
 800223c:	230f      	movs	r3, #15
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	781b      	ldrb	r3, [r3, #0]
}
 8002242:	0018      	movs	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	b004      	add	sp, #16
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002262:	e14f      	b.n	8002504 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2101      	movs	r1, #1
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4091      	lsls	r1, r2
 800226e:	000a      	movs	r2, r1
 8002270:	4013      	ands	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d100      	bne.n	800227c <HAL_GPIO_Init+0x30>
 800227a:	e140      	b.n	80024fe <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2203      	movs	r2, #3
 8002282:	4013      	ands	r3, r2
 8002284:	2b01      	cmp	r3, #1
 8002286:	d005      	beq.n	8002294 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2203      	movs	r2, #3
 800228e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002290:	2b02      	cmp	r3, #2
 8002292:	d130      	bne.n	80022f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	409a      	lsls	r2, r3
 80022a2:	0013      	movs	r3, r2
 80022a4:	43da      	mvns	r2, r3
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	409a      	lsls	r2, r3
 80022b6:	0013      	movs	r3, r2
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022ca:	2201      	movs	r2, #1
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
 80022d0:	0013      	movs	r3, r2
 80022d2:	43da      	mvns	r2, r3
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	091b      	lsrs	r3, r3, #4
 80022e0:	2201      	movs	r2, #1
 80022e2:	401a      	ands	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	409a      	lsls	r2, r3
 80022e8:	0013      	movs	r3, r2
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2203      	movs	r2, #3
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d017      	beq.n	8002332 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	2203      	movs	r2, #3
 800230e:	409a      	lsls	r2, r3
 8002310:	0013      	movs	r3, r2
 8002312:	43da      	mvns	r2, r3
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	409a      	lsls	r2, r3
 8002324:	0013      	movs	r3, r2
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2203      	movs	r2, #3
 8002338:	4013      	ands	r3, r2
 800233a:	2b02      	cmp	r3, #2
 800233c:	d123      	bne.n	8002386 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	08da      	lsrs	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3208      	adds	r2, #8
 8002346:	0092      	lsls	r2, r2, #2
 8002348:	58d3      	ldr	r3, [r2, r3]
 800234a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2207      	movs	r2, #7
 8002350:	4013      	ands	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	409a      	lsls	r2, r3
 8002358:	0013      	movs	r3, r2
 800235a:	43da      	mvns	r2, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2107      	movs	r1, #7
 800236a:	400b      	ands	r3, r1
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	409a      	lsls	r2, r3
 8002370:	0013      	movs	r3, r2
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	08da      	lsrs	r2, r3, #3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3208      	adds	r2, #8
 8002380:	0092      	lsls	r2, r2, #2
 8002382:	6939      	ldr	r1, [r7, #16]
 8002384:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	2203      	movs	r2, #3
 8002392:	409a      	lsls	r2, r3
 8002394:	0013      	movs	r3, r2
 8002396:	43da      	mvns	r2, r3
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2203      	movs	r2, #3
 80023a4:	401a      	ands	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	409a      	lsls	r2, r3
 80023ac:	0013      	movs	r3, r2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	23c0      	movs	r3, #192	; 0xc0
 80023c0:	029b      	lsls	r3, r3, #10
 80023c2:	4013      	ands	r3, r2
 80023c4:	d100      	bne.n	80023c8 <HAL_GPIO_Init+0x17c>
 80023c6:	e09a      	b.n	80024fe <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c8:	4b54      	ldr	r3, [pc, #336]	; (800251c <HAL_GPIO_Init+0x2d0>)
 80023ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023cc:	4b53      	ldr	r3, [pc, #332]	; (800251c <HAL_GPIO_Init+0x2d0>)
 80023ce:	2101      	movs	r1, #1
 80023d0:	430a      	orrs	r2, r1
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80023d4:	4a52      	ldr	r2, [pc, #328]	; (8002520 <HAL_GPIO_Init+0x2d4>)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	589b      	ldr	r3, [r3, r2]
 80023e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2203      	movs	r2, #3
 80023e6:	4013      	ands	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	220f      	movs	r2, #15
 80023ec:	409a      	lsls	r2, r3
 80023ee:	0013      	movs	r3, r2
 80023f0:	43da      	mvns	r2, r3
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	23a0      	movs	r3, #160	; 0xa0
 80023fc:	05db      	lsls	r3, r3, #23
 80023fe:	429a      	cmp	r2, r3
 8002400:	d019      	beq.n	8002436 <HAL_GPIO_Init+0x1ea>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a47      	ldr	r2, [pc, #284]	; (8002524 <HAL_GPIO_Init+0x2d8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_GPIO_Init+0x1e6>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a46      	ldr	r2, [pc, #280]	; (8002528 <HAL_GPIO_Init+0x2dc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00d      	beq.n	800242e <HAL_GPIO_Init+0x1e2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a45      	ldr	r2, [pc, #276]	; (800252c <HAL_GPIO_Init+0x2e0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d007      	beq.n	800242a <HAL_GPIO_Init+0x1de>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a44      	ldr	r2, [pc, #272]	; (8002530 <HAL_GPIO_Init+0x2e4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_GPIO_Init+0x1da>
 8002422:	2305      	movs	r3, #5
 8002424:	e008      	b.n	8002438 <HAL_GPIO_Init+0x1ec>
 8002426:	2306      	movs	r3, #6
 8002428:	e006      	b.n	8002438 <HAL_GPIO_Init+0x1ec>
 800242a:	2303      	movs	r3, #3
 800242c:	e004      	b.n	8002438 <HAL_GPIO_Init+0x1ec>
 800242e:	2302      	movs	r3, #2
 8002430:	e002      	b.n	8002438 <HAL_GPIO_Init+0x1ec>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <HAL_GPIO_Init+0x1ec>
 8002436:	2300      	movs	r3, #0
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	2103      	movs	r1, #3
 800243c:	400a      	ands	r2, r1
 800243e:	0092      	lsls	r2, r2, #2
 8002440:	4093      	lsls	r3, r2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002448:	4935      	ldr	r1, [pc, #212]	; (8002520 <HAL_GPIO_Init+0x2d4>)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	089b      	lsrs	r3, r3, #2
 800244e:	3302      	adds	r3, #2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002456:	4b37      	ldr	r3, [pc, #220]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	43da      	mvns	r2, r3
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	025b      	lsls	r3, r3, #9
 800246e:	4013      	ands	r3, r2
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800247a:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002480:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43da      	mvns	r2, r3
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	029b      	lsls	r3, r3, #10
 8002498:	4013      	ands	r3, r2
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024a4:	4b23      	ldr	r3, [pc, #140]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024aa:	4b22      	ldr	r3, [pc, #136]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	43da      	mvns	r2, r3
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	035b      	lsls	r3, r3, #13
 80024c2:	4013      	ands	r3, r2
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024ce:	4b19      	ldr	r3, [pc, #100]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80024d4:	4b17      	ldr	r3, [pc, #92]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	43da      	mvns	r2, r3
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	039b      	lsls	r3, r3, #14
 80024ec:	4013      	ands	r3, r2
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024f8:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	3301      	adds	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	40da      	lsrs	r2, r3
 800250c:	1e13      	subs	r3, r2, #0
 800250e:	d000      	beq.n	8002512 <HAL_GPIO_Init+0x2c6>
 8002510:	e6a8      	b.n	8002264 <HAL_GPIO_Init+0x18>
  }
}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	b006      	add	sp, #24
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	40010000 	.word	0x40010000
 8002524:	50000400 	.word	0x50000400
 8002528:	50000800 	.word	0x50000800
 800252c:	50000c00 	.word	0x50000c00
 8002530:	50001c00 	.word	0x50001c00
 8002534:	40010400 	.word	0x40010400

08002538 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	0008      	movs	r0, r1
 8002542:	0011      	movs	r1, r2
 8002544:	1cbb      	adds	r3, r7, #2
 8002546:	1c02      	adds	r2, r0, #0
 8002548:	801a      	strh	r2, [r3, #0]
 800254a:	1c7b      	adds	r3, r7, #1
 800254c:	1c0a      	adds	r2, r1, #0
 800254e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002550:	1c7b      	adds	r3, r7, #1
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d004      	beq.n	8002562 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002558:	1cbb      	adds	r3, r7, #2
 800255a:	881a      	ldrh	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002560:	e003      	b.n	800256a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002562:	1cbb      	adds	r3, r7, #2
 8002564:	881a      	ldrh	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	629a      	str	r2, [r3, #40]	; 0x28
}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	46bd      	mov	sp, r7
 800256e:	b002      	add	sp, #8
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002574:	b5b0      	push	{r4, r5, r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d102      	bne.n	8002588 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	f000 fbaf 	bl	8002ce6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002588:	4bcf      	ldr	r3, [pc, #828]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	220c      	movs	r2, #12
 800258e:	4013      	ands	r3, r2
 8002590:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002592:	4bcd      	ldr	r3, [pc, #820]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	025b      	lsls	r3, r3, #9
 800259a:	4013      	ands	r3, r2
 800259c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2201      	movs	r2, #1
 80025a4:	4013      	ands	r3, r2
 80025a6:	d100      	bne.n	80025aa <HAL_RCC_OscConfig+0x36>
 80025a8:	e07e      	b.n	80026a8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d007      	beq.n	80025c0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	2b0c      	cmp	r3, #12
 80025b4:	d112      	bne.n	80025dc <HAL_RCC_OscConfig+0x68>
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	025b      	lsls	r3, r3, #9
 80025bc:	429a      	cmp	r2, r3
 80025be:	d10d      	bne.n	80025dc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c0:	4bc1      	ldr	r3, [pc, #772]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	029b      	lsls	r3, r3, #10
 80025c8:	4013      	ands	r3, r2
 80025ca:	d100      	bne.n	80025ce <HAL_RCC_OscConfig+0x5a>
 80025cc:	e06b      	b.n	80026a6 <HAL_RCC_OscConfig+0x132>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d167      	bne.n	80026a6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	f000 fb85 	bl	8002ce6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	025b      	lsls	r3, r3, #9
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d107      	bne.n	80025f8 <HAL_RCC_OscConfig+0x84>
 80025e8:	4bb7      	ldr	r3, [pc, #732]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4bb6      	ldr	r3, [pc, #728]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 80025ee:	2180      	movs	r1, #128	; 0x80
 80025f0:	0249      	lsls	r1, r1, #9
 80025f2:	430a      	orrs	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e027      	b.n	8002648 <HAL_RCC_OscConfig+0xd4>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	23a0      	movs	r3, #160	; 0xa0
 80025fe:	02db      	lsls	r3, r3, #11
 8002600:	429a      	cmp	r2, r3
 8002602:	d10e      	bne.n	8002622 <HAL_RCC_OscConfig+0xae>
 8002604:	4bb0      	ldr	r3, [pc, #704]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4baf      	ldr	r3, [pc, #700]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 800260a:	2180      	movs	r1, #128	; 0x80
 800260c:	02c9      	lsls	r1, r1, #11
 800260e:	430a      	orrs	r2, r1
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	4bad      	ldr	r3, [pc, #692]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	4bac      	ldr	r3, [pc, #688]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 8002618:	2180      	movs	r1, #128	; 0x80
 800261a:	0249      	lsls	r1, r1, #9
 800261c:	430a      	orrs	r2, r1
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e012      	b.n	8002648 <HAL_RCC_OscConfig+0xd4>
 8002622:	4ba9      	ldr	r3, [pc, #676]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4ba8      	ldr	r3, [pc, #672]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 8002628:	49a8      	ldr	r1, [pc, #672]	; (80028cc <HAL_RCC_OscConfig+0x358>)
 800262a:	400a      	ands	r2, r1
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	4ba6      	ldr	r3, [pc, #664]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	025b      	lsls	r3, r3, #9
 8002636:	4013      	ands	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4ba2      	ldr	r3, [pc, #648]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4ba1      	ldr	r3, [pc, #644]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 8002642:	49a3      	ldr	r1, [pc, #652]	; (80028d0 <HAL_RCC_OscConfig+0x35c>)
 8002644:	400a      	ands	r2, r1
 8002646:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d015      	beq.n	800267c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7ff fc8c 	bl	8001f6c <HAL_GetTick>
 8002654:	0003      	movs	r3, r0
 8002656:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002658:	e009      	b.n	800266e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800265a:	f7ff fc87 	bl	8001f6c <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b64      	cmp	r3, #100	; 0x64
 8002666:	d902      	bls.n	800266e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	f000 fb3c 	bl	8002ce6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800266e:	4b96      	ldr	r3, [pc, #600]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	029b      	lsls	r3, r3, #10
 8002676:	4013      	ands	r3, r2
 8002678:	d0ef      	beq.n	800265a <HAL_RCC_OscConfig+0xe6>
 800267a:	e015      	b.n	80026a8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7ff fc76 	bl	8001f6c <HAL_GetTick>
 8002680:	0003      	movs	r3, r0
 8002682:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002686:	f7ff fc71 	bl	8001f6c <HAL_GetTick>
 800268a:	0002      	movs	r2, r0
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b64      	cmp	r3, #100	; 0x64
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e326      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002698:	4b8b      	ldr	r3, [pc, #556]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	029b      	lsls	r3, r3, #10
 80026a0:	4013      	ands	r3, r2
 80026a2:	d1f0      	bne.n	8002686 <HAL_RCC_OscConfig+0x112>
 80026a4:	e000      	b.n	80026a8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2202      	movs	r2, #2
 80026ae:	4013      	ands	r3, r2
 80026b0:	d100      	bne.n	80026b4 <HAL_RCC_OscConfig+0x140>
 80026b2:	e08b      	b.n	80027cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d005      	beq.n	80026cc <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	2b0c      	cmp	r3, #12
 80026c4:	d13e      	bne.n	8002744 <HAL_RCC_OscConfig+0x1d0>
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d13b      	bne.n	8002744 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80026cc:	4b7e      	ldr	r3, [pc, #504]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2204      	movs	r2, #4
 80026d2:	4013      	ands	r3, r2
 80026d4:	d004      	beq.n	80026e0 <HAL_RCC_OscConfig+0x16c>
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e302      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e0:	4b79      	ldr	r3, [pc, #484]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a7b      	ldr	r2, [pc, #492]	; (80028d4 <HAL_RCC_OscConfig+0x360>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	0019      	movs	r1, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	021a      	lsls	r2, r3, #8
 80026f0:	4b75      	ldr	r3, [pc, #468]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 80026f2:	430a      	orrs	r2, r1
 80026f4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80026f6:	4b74      	ldr	r3, [pc, #464]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2209      	movs	r2, #9
 80026fc:	4393      	bics	r3, r2
 80026fe:	0019      	movs	r1, r3
 8002700:	4b71      	ldr	r3, [pc, #452]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002708:	f000 fc40 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 800270c:	0001      	movs	r1, r0
 800270e:	4b6e      	ldr	r3, [pc, #440]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	091b      	lsrs	r3, r3, #4
 8002714:	220f      	movs	r2, #15
 8002716:	4013      	ands	r3, r2
 8002718:	4a6f      	ldr	r2, [pc, #444]	; (80028d8 <HAL_RCC_OscConfig+0x364>)
 800271a:	5cd3      	ldrb	r3, [r2, r3]
 800271c:	000a      	movs	r2, r1
 800271e:	40da      	lsrs	r2, r3
 8002720:	4b6e      	ldr	r3, [pc, #440]	; (80028dc <HAL_RCC_OscConfig+0x368>)
 8002722:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002724:	4b6e      	ldr	r3, [pc, #440]	; (80028e0 <HAL_RCC_OscConfig+0x36c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2513      	movs	r5, #19
 800272a:	197c      	adds	r4, r7, r5
 800272c:	0018      	movs	r0, r3
 800272e:	f7ff fbd7 	bl	8001ee0 <HAL_InitTick>
 8002732:	0003      	movs	r3, r0
 8002734:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002736:	197b      	adds	r3, r7, r5
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d046      	beq.n	80027cc <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800273e:	197b      	adds	r3, r7, r5
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	e2d0      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d027      	beq.n	800279a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800274a:	4b5f      	ldr	r3, [pc, #380]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2209      	movs	r2, #9
 8002750:	4393      	bics	r3, r2
 8002752:	0019      	movs	r1, r3
 8002754:	4b5c      	ldr	r3, [pc, #368]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	430a      	orrs	r2, r1
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7ff fc06 	bl	8001f6c <HAL_GetTick>
 8002760:	0003      	movs	r3, r0
 8002762:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002766:	f7ff fc01 	bl	8001f6c <HAL_GetTick>
 800276a:	0002      	movs	r2, r0
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e2b6      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002778:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2204      	movs	r2, #4
 800277e:	4013      	ands	r3, r2
 8002780:	d0f1      	beq.n	8002766 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002782:	4b51      	ldr	r3, [pc, #324]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4a53      	ldr	r2, [pc, #332]	; (80028d4 <HAL_RCC_OscConfig+0x360>)
 8002788:	4013      	ands	r3, r2
 800278a:	0019      	movs	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	021a      	lsls	r2, r3, #8
 8002792:	4b4d      	ldr	r3, [pc, #308]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 8002794:	430a      	orrs	r2, r1
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	e018      	b.n	80027cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279a:	4b4b      	ldr	r3, [pc, #300]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b4a      	ldr	r3, [pc, #296]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 80027a0:	2101      	movs	r1, #1
 80027a2:	438a      	bics	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f7ff fbe1 	bl	8001f6c <HAL_GetTick>
 80027aa:	0003      	movs	r3, r0
 80027ac:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b0:	f7ff fbdc 	bl	8001f6c <HAL_GetTick>
 80027b4:	0002      	movs	r2, r0
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e291      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027c2:	4b41      	ldr	r3, [pc, #260]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2204      	movs	r2, #4
 80027c8:	4013      	ands	r3, r2
 80027ca:	d1f1      	bne.n	80027b0 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2210      	movs	r2, #16
 80027d2:	4013      	ands	r3, r2
 80027d4:	d100      	bne.n	80027d8 <HAL_RCC_OscConfig+0x264>
 80027d6:	e0a1      	b.n	800291c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d140      	bne.n	8002860 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027de:	4b3a      	ldr	r3, [pc, #232]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	2380      	movs	r3, #128	; 0x80
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4013      	ands	r3, r2
 80027e8:	d005      	beq.n	80027f6 <HAL_RCC_OscConfig+0x282>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e277      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027f6:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4a3a      	ldr	r2, [pc, #232]	; (80028e4 <HAL_RCC_OscConfig+0x370>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	0019      	movs	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002804:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 8002806:	430a      	orrs	r2, r1
 8002808:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800280a:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	0a19      	lsrs	r1, r3, #8
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	061a      	lsls	r2, r3, #24
 8002818:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	0b5b      	lsrs	r3, r3, #13
 8002824:	3301      	adds	r3, #1
 8002826:	2280      	movs	r2, #128	; 0x80
 8002828:	0212      	lsls	r2, r2, #8
 800282a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800282c:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	210f      	movs	r1, #15
 8002834:	400b      	ands	r3, r1
 8002836:	4928      	ldr	r1, [pc, #160]	; (80028d8 <HAL_RCC_OscConfig+0x364>)
 8002838:	5ccb      	ldrb	r3, [r1, r3]
 800283a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800283c:	4b27      	ldr	r3, [pc, #156]	; (80028dc <HAL_RCC_OscConfig+0x368>)
 800283e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002840:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <HAL_RCC_OscConfig+0x36c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2513      	movs	r5, #19
 8002846:	197c      	adds	r4, r7, r5
 8002848:	0018      	movs	r0, r3
 800284a:	f7ff fb49 	bl	8001ee0 <HAL_InitTick>
 800284e:	0003      	movs	r3, r0
 8002850:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002852:	197b      	adds	r3, r7, r5
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d060      	beq.n	800291c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800285a:	197b      	adds	r3, r7, r5
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	e242      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d03f      	beq.n	80028e8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002868:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 800286e:	2180      	movs	r1, #128	; 0x80
 8002870:	0049      	lsls	r1, r1, #1
 8002872:	430a      	orrs	r2, r1
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7ff fb79 	bl	8001f6c <HAL_GetTick>
 800287a:	0003      	movs	r3, r0
 800287c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002880:	f7ff fb74 	bl	8001f6c <HAL_GetTick>
 8002884:	0002      	movs	r2, r0
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e229      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002892:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4013      	ands	r3, r2
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4a10      	ldr	r2, [pc, #64]	; (80028e4 <HAL_RCC_OscConfig+0x370>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	0019      	movs	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 80028ae:	430a      	orrs	r2, r1
 80028b0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028b2:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	0a19      	lsrs	r1, r3, #8
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	061a      	lsls	r2, r3, #24
 80028c0:	4b01      	ldr	r3, [pc, #4]	; (80028c8 <HAL_RCC_OscConfig+0x354>)
 80028c2:	430a      	orrs	r2, r1
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	e029      	b.n	800291c <HAL_RCC_OscConfig+0x3a8>
 80028c8:	40021000 	.word	0x40021000
 80028cc:	fffeffff 	.word	0xfffeffff
 80028d0:	fffbffff 	.word	0xfffbffff
 80028d4:	ffffe0ff 	.word	0xffffe0ff
 80028d8:	080053b8 	.word	0x080053b8
 80028dc:	20000000 	.word	0x20000000
 80028e0:	20000004 	.word	0x20000004
 80028e4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028e8:	4bbd      	ldr	r3, [pc, #756]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4bbc      	ldr	r3, [pc, #752]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 80028ee:	49bd      	ldr	r1, [pc, #756]	; (8002be4 <HAL_RCC_OscConfig+0x670>)
 80028f0:	400a      	ands	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7ff fb3a 	bl	8001f6c <HAL_GetTick>
 80028f8:	0003      	movs	r3, r0
 80028fa:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028fe:	f7ff fb35 	bl	8001f6c <HAL_GetTick>
 8002902:	0002      	movs	r2, r0
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e1ea      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002910:	4bb3      	ldr	r3, [pc, #716]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4013      	ands	r3, r2
 800291a:	d1f0      	bne.n	80028fe <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2208      	movs	r2, #8
 8002922:	4013      	ands	r3, r2
 8002924:	d036      	beq.n	8002994 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d019      	beq.n	8002962 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800292e:	4bac      	ldr	r3, [pc, #688]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002930:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002932:	4bab      	ldr	r3, [pc, #684]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002934:	2101      	movs	r1, #1
 8002936:	430a      	orrs	r2, r1
 8002938:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293a:	f7ff fb17 	bl	8001f6c <HAL_GetTick>
 800293e:	0003      	movs	r3, r0
 8002940:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002944:	f7ff fb12 	bl	8001f6c <HAL_GetTick>
 8002948:	0002      	movs	r2, r0
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e1c7      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002956:	4ba2      	ldr	r3, [pc, #648]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800295a:	2202      	movs	r2, #2
 800295c:	4013      	ands	r3, r2
 800295e:	d0f1      	beq.n	8002944 <HAL_RCC_OscConfig+0x3d0>
 8002960:	e018      	b.n	8002994 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002962:	4b9f      	ldr	r3, [pc, #636]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002964:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002966:	4b9e      	ldr	r3, [pc, #632]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002968:	2101      	movs	r1, #1
 800296a:	438a      	bics	r2, r1
 800296c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296e:	f7ff fafd 	bl	8001f6c <HAL_GetTick>
 8002972:	0003      	movs	r3, r0
 8002974:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002978:	f7ff faf8 	bl	8001f6c <HAL_GetTick>
 800297c:	0002      	movs	r2, r0
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e1ad      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800298a:	4b95      	ldr	r3, [pc, #596]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 800298c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298e:	2202      	movs	r2, #2
 8002990:	4013      	ands	r3, r2
 8002992:	d1f1      	bne.n	8002978 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2204      	movs	r2, #4
 800299a:	4013      	ands	r3, r2
 800299c:	d100      	bne.n	80029a0 <HAL_RCC_OscConfig+0x42c>
 800299e:	e0ae      	b.n	8002afe <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a0:	2027      	movs	r0, #39	; 0x27
 80029a2:	183b      	adds	r3, r7, r0
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a8:	4b8d      	ldr	r3, [pc, #564]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 80029aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	055b      	lsls	r3, r3, #21
 80029b0:	4013      	ands	r3, r2
 80029b2:	d109      	bne.n	80029c8 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b4:	4b8a      	ldr	r3, [pc, #552]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 80029b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029b8:	4b89      	ldr	r3, [pc, #548]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 80029ba:	2180      	movs	r1, #128	; 0x80
 80029bc:	0549      	lsls	r1, r1, #21
 80029be:	430a      	orrs	r2, r1
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80029c2:	183b      	adds	r3, r7, r0
 80029c4:	2201      	movs	r2, #1
 80029c6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	4b87      	ldr	r3, [pc, #540]	; (8002be8 <HAL_RCC_OscConfig+0x674>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4013      	ands	r3, r2
 80029d2:	d11a      	bne.n	8002a0a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d4:	4b84      	ldr	r3, [pc, #528]	; (8002be8 <HAL_RCC_OscConfig+0x674>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b83      	ldr	r3, [pc, #524]	; (8002be8 <HAL_RCC_OscConfig+0x674>)
 80029da:	2180      	movs	r1, #128	; 0x80
 80029dc:	0049      	lsls	r1, r1, #1
 80029de:	430a      	orrs	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e2:	f7ff fac3 	bl	8001f6c <HAL_GetTick>
 80029e6:	0003      	movs	r3, r0
 80029e8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ec:	f7ff fabe 	bl	8001f6c <HAL_GetTick>
 80029f0:	0002      	movs	r2, r0
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b64      	cmp	r3, #100	; 0x64
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e173      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fe:	4b7a      	ldr	r3, [pc, #488]	; (8002be8 <HAL_RCC_OscConfig+0x674>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4013      	ands	r3, r2
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_OscConfig+0x4b2>
 8002a16:	4b72      	ldr	r3, [pc, #456]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002a18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a1a:	4b71      	ldr	r3, [pc, #452]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002a1c:	2180      	movs	r1, #128	; 0x80
 8002a1e:	0049      	lsls	r1, r1, #1
 8002a20:	430a      	orrs	r2, r1
 8002a22:	651a      	str	r2, [r3, #80]	; 0x50
 8002a24:	e031      	b.n	8002a8a <HAL_RCC_OscConfig+0x516>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x4d4>
 8002a2e:	4b6c      	ldr	r3, [pc, #432]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002a30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a32:	4b6b      	ldr	r3, [pc, #428]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002a34:	496b      	ldr	r1, [pc, #428]	; (8002be4 <HAL_RCC_OscConfig+0x670>)
 8002a36:	400a      	ands	r2, r1
 8002a38:	651a      	str	r2, [r3, #80]	; 0x50
 8002a3a:	4b69      	ldr	r3, [pc, #420]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002a3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a3e:	4b68      	ldr	r3, [pc, #416]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002a40:	496a      	ldr	r1, [pc, #424]	; (8002bec <HAL_RCC_OscConfig+0x678>)
 8002a42:	400a      	ands	r2, r1
 8002a44:	651a      	str	r2, [r3, #80]	; 0x50
 8002a46:	e020      	b.n	8002a8a <HAL_RCC_OscConfig+0x516>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	23a0      	movs	r3, #160	; 0xa0
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d10e      	bne.n	8002a72 <HAL_RCC_OscConfig+0x4fe>
 8002a54:	4b62      	ldr	r3, [pc, #392]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002a56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a58:	4b61      	ldr	r3, [pc, #388]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002a5a:	2180      	movs	r1, #128	; 0x80
 8002a5c:	00c9      	lsls	r1, r1, #3
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	651a      	str	r2, [r3, #80]	; 0x50
 8002a62:	4b5f      	ldr	r3, [pc, #380]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002a64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a66:	4b5e      	ldr	r3, [pc, #376]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002a68:	2180      	movs	r1, #128	; 0x80
 8002a6a:	0049      	lsls	r1, r1, #1
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	651a      	str	r2, [r3, #80]	; 0x50
 8002a70:	e00b      	b.n	8002a8a <HAL_RCC_OscConfig+0x516>
 8002a72:	4b5b      	ldr	r3, [pc, #364]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002a74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a76:	4b5a      	ldr	r3, [pc, #360]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002a78:	495a      	ldr	r1, [pc, #360]	; (8002be4 <HAL_RCC_OscConfig+0x670>)
 8002a7a:	400a      	ands	r2, r1
 8002a7c:	651a      	str	r2, [r3, #80]	; 0x50
 8002a7e:	4b58      	ldr	r3, [pc, #352]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002a80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a82:	4b57      	ldr	r3, [pc, #348]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002a84:	4959      	ldr	r1, [pc, #356]	; (8002bec <HAL_RCC_OscConfig+0x678>)
 8002a86:	400a      	ands	r2, r1
 8002a88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d015      	beq.n	8002abe <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a92:	f7ff fa6b 	bl	8001f6c <HAL_GetTick>
 8002a96:	0003      	movs	r3, r0
 8002a98:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a9a:	e009      	b.n	8002ab0 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a9c:	f7ff fa66 	bl	8001f6c <HAL_GetTick>
 8002aa0:	0002      	movs	r2, r0
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	4a52      	ldr	r2, [pc, #328]	; (8002bf0 <HAL_RCC_OscConfig+0x67c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e11a      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ab0:	4b4b      	ldr	r3, [pc, #300]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002ab2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d0ef      	beq.n	8002a9c <HAL_RCC_OscConfig+0x528>
 8002abc:	e014      	b.n	8002ae8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abe:	f7ff fa55 	bl	8001f6c <HAL_GetTick>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ac6:	e009      	b.n	8002adc <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac8:	f7ff fa50 	bl	8001f6c <HAL_GetTick>
 8002acc:	0002      	movs	r2, r0
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	4a47      	ldr	r2, [pc, #284]	; (8002bf0 <HAL_RCC_OscConfig+0x67c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e104      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002adc:	4b40      	ldr	r3, [pc, #256]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002ade:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d1ef      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ae8:	2327      	movs	r3, #39	; 0x27
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d105      	bne.n	8002afe <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af2:	4b3b      	ldr	r3, [pc, #236]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af6:	4b3a      	ldr	r3, [pc, #232]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002af8:	493e      	ldr	r1, [pc, #248]	; (8002bf4 <HAL_RCC_OscConfig+0x680>)
 8002afa:	400a      	ands	r2, r1
 8002afc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2220      	movs	r2, #32
 8002b04:	4013      	ands	r3, r2
 8002b06:	d049      	beq.n	8002b9c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d026      	beq.n	8002b5e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002b10:	4b33      	ldr	r3, [pc, #204]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	4b32      	ldr	r3, [pc, #200]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002b16:	2101      	movs	r1, #1
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	4b30      	ldr	r3, [pc, #192]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b20:	4b2f      	ldr	r3, [pc, #188]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002b22:	2101      	movs	r1, #1
 8002b24:	430a      	orrs	r2, r1
 8002b26:	635a      	str	r2, [r3, #52]	; 0x34
 8002b28:	4b33      	ldr	r3, [pc, #204]	; (8002bf8 <HAL_RCC_OscConfig+0x684>)
 8002b2a:	6a1a      	ldr	r2, [r3, #32]
 8002b2c:	4b32      	ldr	r3, [pc, #200]	; (8002bf8 <HAL_RCC_OscConfig+0x684>)
 8002b2e:	2180      	movs	r1, #128	; 0x80
 8002b30:	0189      	lsls	r1, r1, #6
 8002b32:	430a      	orrs	r2, r1
 8002b34:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b36:	f7ff fa19 	bl	8001f6c <HAL_GetTick>
 8002b3a:	0003      	movs	r3, r0
 8002b3c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b40:	f7ff fa14 	bl	8001f6c <HAL_GetTick>
 8002b44:	0002      	movs	r2, r0
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e0c9      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b52:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2202      	movs	r2, #2
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d0f1      	beq.n	8002b40 <HAL_RCC_OscConfig+0x5cc>
 8002b5c:	e01e      	b.n	8002b9c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002b64:	2101      	movs	r1, #1
 8002b66:	438a      	bics	r2, r1
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	4b23      	ldr	r3, [pc, #140]	; (8002bf8 <HAL_RCC_OscConfig+0x684>)
 8002b6c:	6a1a      	ldr	r2, [r3, #32]
 8002b6e:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <HAL_RCC_OscConfig+0x684>)
 8002b70:	4922      	ldr	r1, [pc, #136]	; (8002bfc <HAL_RCC_OscConfig+0x688>)
 8002b72:	400a      	ands	r2, r1
 8002b74:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b76:	f7ff f9f9 	bl	8001f6c <HAL_GetTick>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b80:	f7ff f9f4 	bl	8001f6c <HAL_GetTick>
 8002b84:	0002      	movs	r2, r0
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e0a9      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b92:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2202      	movs	r2, #2
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d1f1      	bne.n	8002b80 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d100      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x632>
 8002ba4:	e09e      	b.n	8002ce4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	d100      	bne.n	8002bae <HAL_RCC_OscConfig+0x63a>
 8002bac:	e077      	b.n	8002c9e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d158      	bne.n	8002c68 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_RCC_OscConfig+0x66c>)
 8002bbc:	4910      	ldr	r1, [pc, #64]	; (8002c00 <HAL_RCC_OscConfig+0x68c>)
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc2:	f7ff f9d3 	bl	8001f6c <HAL_GetTick>
 8002bc6:	0003      	movs	r3, r0
 8002bc8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002bca:	e01b      	b.n	8002c04 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7ff f9ce 	bl	8001f6c <HAL_GetTick>
 8002bd0:	0002      	movs	r2, r0
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d914      	bls.n	8002c04 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e083      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	40021000 	.word	0x40021000
 8002be4:	fffffeff 	.word	0xfffffeff
 8002be8:	40007000 	.word	0x40007000
 8002bec:	fffffbff 	.word	0xfffffbff
 8002bf0:	00001388 	.word	0x00001388
 8002bf4:	efffffff 	.word	0xefffffff
 8002bf8:	40010000 	.word	0x40010000
 8002bfc:	ffffdfff 	.word	0xffffdfff
 8002c00:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c04:	4b3a      	ldr	r3, [pc, #232]	; (8002cf0 <HAL_RCC_OscConfig+0x77c>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	049b      	lsls	r3, r3, #18
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d1dd      	bne.n	8002bcc <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c10:	4b37      	ldr	r3, [pc, #220]	; (8002cf0 <HAL_RCC_OscConfig+0x77c>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4a37      	ldr	r2, [pc, #220]	; (8002cf4 <HAL_RCC_OscConfig+0x780>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	0019      	movs	r1, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	4b31      	ldr	r3, [pc, #196]	; (8002cf0 <HAL_RCC_OscConfig+0x77c>)
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c30:	4b2f      	ldr	r3, [pc, #188]	; (8002cf0 <HAL_RCC_OscConfig+0x77c>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <HAL_RCC_OscConfig+0x77c>)
 8002c36:	2180      	movs	r1, #128	; 0x80
 8002c38:	0449      	lsls	r1, r1, #17
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7ff f995 	bl	8001f6c <HAL_GetTick>
 8002c42:	0003      	movs	r3, r0
 8002c44:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c48:	f7ff f990 	bl	8001f6c <HAL_GetTick>
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e045      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002c5a:	4b25      	ldr	r3, [pc, #148]	; (8002cf0 <HAL_RCC_OscConfig+0x77c>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	049b      	lsls	r3, r3, #18
 8002c62:	4013      	ands	r3, r2
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x6d4>
 8002c66:	e03d      	b.n	8002ce4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c68:	4b21      	ldr	r3, [pc, #132]	; (8002cf0 <HAL_RCC_OscConfig+0x77c>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <HAL_RCC_OscConfig+0x77c>)
 8002c6e:	4922      	ldr	r1, [pc, #136]	; (8002cf8 <HAL_RCC_OscConfig+0x784>)
 8002c70:	400a      	ands	r2, r1
 8002c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7ff f97a 	bl	8001f6c <HAL_GetTick>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7ff f975 	bl	8001f6c <HAL_GetTick>
 8002c82:	0002      	movs	r2, r0
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e02a      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c90:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <HAL_RCC_OscConfig+0x77c>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	049b      	lsls	r3, r3, #18
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d1f0      	bne.n	8002c7e <HAL_RCC_OscConfig+0x70a>
 8002c9c:	e022      	b.n	8002ce4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e01d      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <HAL_RCC_OscConfig+0x77c>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	025b      	lsls	r3, r3, #9
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d10f      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	23f0      	movs	r3, #240	; 0xf0
 8002cc4:	039b      	lsls	r3, r3, #14
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002cd0:	69fa      	ldr	r2, [r7, #28]
 8002cd2:	23c0      	movs	r3, #192	; 0xc0
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b00a      	add	sp, #40	; 0x28
 8002cec:	bdb0      	pop	{r4, r5, r7, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	ff02ffff 	.word	0xff02ffff
 8002cf8:	feffffff 	.word	0xfeffffff

08002cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cfc:	b5b0      	push	{r4, r5, r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e128      	b.n	8002f62 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d10:	4b96      	ldr	r3, [pc, #600]	; (8002f6c <HAL_RCC_ClockConfig+0x270>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2201      	movs	r2, #1
 8002d16:	4013      	ands	r3, r2
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d91e      	bls.n	8002d5c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b93      	ldr	r3, [pc, #588]	; (8002f6c <HAL_RCC_ClockConfig+0x270>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2201      	movs	r2, #1
 8002d24:	4393      	bics	r3, r2
 8002d26:	0019      	movs	r1, r3
 8002d28:	4b90      	ldr	r3, [pc, #576]	; (8002f6c <HAL_RCC_ClockConfig+0x270>)
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d30:	f7ff f91c 	bl	8001f6c <HAL_GetTick>
 8002d34:	0003      	movs	r3, r0
 8002d36:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d38:	e009      	b.n	8002d4e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3a:	f7ff f917 	bl	8001f6c <HAL_GetTick>
 8002d3e:	0002      	movs	r2, r0
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	4a8a      	ldr	r2, [pc, #552]	; (8002f70 <HAL_RCC_ClockConfig+0x274>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e109      	b.n	8002f62 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b87      	ldr	r3, [pc, #540]	; (8002f6c <HAL_RCC_ClockConfig+0x270>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2201      	movs	r2, #1
 8002d54:	4013      	ands	r3, r2
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d1ee      	bne.n	8002d3a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2202      	movs	r2, #2
 8002d62:	4013      	ands	r3, r2
 8002d64:	d009      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d66:	4b83      	ldr	r3, [pc, #524]	; (8002f74 <HAL_RCC_ClockConfig+0x278>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	22f0      	movs	r2, #240	; 0xf0
 8002d6c:	4393      	bics	r3, r2
 8002d6e:	0019      	movs	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	4b7f      	ldr	r3, [pc, #508]	; (8002f74 <HAL_RCC_ClockConfig+0x278>)
 8002d76:	430a      	orrs	r2, r1
 8002d78:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4013      	ands	r3, r2
 8002d82:	d100      	bne.n	8002d86 <HAL_RCC_ClockConfig+0x8a>
 8002d84:	e089      	b.n	8002e9a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d8e:	4b79      	ldr	r3, [pc, #484]	; (8002f74 <HAL_RCC_ClockConfig+0x278>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	029b      	lsls	r3, r3, #10
 8002d96:	4013      	ands	r3, r2
 8002d98:	d120      	bne.n	8002ddc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e0e1      	b.n	8002f62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d107      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002da6:	4b73      	ldr	r3, [pc, #460]	; (8002f74 <HAL_RCC_ClockConfig+0x278>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	2380      	movs	r3, #128	; 0x80
 8002dac:	049b      	lsls	r3, r3, #18
 8002dae:	4013      	ands	r3, r2
 8002db0:	d114      	bne.n	8002ddc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0d5      	b.n	8002f62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d106      	bne.n	8002dcc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dbe:	4b6d      	ldr	r3, [pc, #436]	; (8002f74 <HAL_RCC_ClockConfig+0x278>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d109      	bne.n	8002ddc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0ca      	b.n	8002f62 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002dcc:	4b69      	ldr	r3, [pc, #420]	; (8002f74 <HAL_RCC_ClockConfig+0x278>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0c2      	b.n	8002f62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ddc:	4b65      	ldr	r3, [pc, #404]	; (8002f74 <HAL_RCC_ClockConfig+0x278>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	2203      	movs	r2, #3
 8002de2:	4393      	bics	r3, r2
 8002de4:	0019      	movs	r1, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	4b62      	ldr	r3, [pc, #392]	; (8002f74 <HAL_RCC_ClockConfig+0x278>)
 8002dec:	430a      	orrs	r2, r1
 8002dee:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df0:	f7ff f8bc 	bl	8001f6c <HAL_GetTick>
 8002df4:	0003      	movs	r3, r0
 8002df6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d111      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e00:	e009      	b.n	8002e16 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e02:	f7ff f8b3 	bl	8001f6c <HAL_GetTick>
 8002e06:	0002      	movs	r2, r0
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	4a58      	ldr	r2, [pc, #352]	; (8002f70 <HAL_RCC_ClockConfig+0x274>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e0a5      	b.n	8002f62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e16:	4b57      	ldr	r3, [pc, #348]	; (8002f74 <HAL_RCC_ClockConfig+0x278>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	220c      	movs	r2, #12
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d1ef      	bne.n	8002e02 <HAL_RCC_ClockConfig+0x106>
 8002e22:	e03a      	b.n	8002e9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d111      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e2c:	e009      	b.n	8002e42 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2e:	f7ff f89d 	bl	8001f6c <HAL_GetTick>
 8002e32:	0002      	movs	r2, r0
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	4a4d      	ldr	r2, [pc, #308]	; (8002f70 <HAL_RCC_ClockConfig+0x274>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e08f      	b.n	8002f62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e42:	4b4c      	ldr	r3, [pc, #304]	; (8002f74 <HAL_RCC_ClockConfig+0x278>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	220c      	movs	r2, #12
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b0c      	cmp	r3, #12
 8002e4c:	d1ef      	bne.n	8002e2e <HAL_RCC_ClockConfig+0x132>
 8002e4e:	e024      	b.n	8002e9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d11b      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e58:	e009      	b.n	8002e6e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5a:	f7ff f887 	bl	8001f6c <HAL_GetTick>
 8002e5e:	0002      	movs	r2, r0
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	4a42      	ldr	r2, [pc, #264]	; (8002f70 <HAL_RCC_ClockConfig+0x274>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e079      	b.n	8002f62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e6e:	4b41      	ldr	r3, [pc, #260]	; (8002f74 <HAL_RCC_ClockConfig+0x278>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	220c      	movs	r2, #12
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d1ef      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x15e>
 8002e7a:	e00e      	b.n	8002e9a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7c:	f7ff f876 	bl	8001f6c <HAL_GetTick>
 8002e80:	0002      	movs	r2, r0
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	4a3a      	ldr	r2, [pc, #232]	; (8002f70 <HAL_RCC_ClockConfig+0x274>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e068      	b.n	8002f62 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e90:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <HAL_RCC_ClockConfig+0x278>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	220c      	movs	r2, #12
 8002e96:	4013      	ands	r3, r2
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e9a:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <HAL_RCC_ClockConfig+0x270>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d21e      	bcs.n	8002ee6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea8:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <HAL_RCC_ClockConfig+0x270>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2201      	movs	r2, #1
 8002eae:	4393      	bics	r3, r2
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <HAL_RCC_ClockConfig+0x270>)
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002eba:	f7ff f857 	bl	8001f6c <HAL_GetTick>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	e009      	b.n	8002ed8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec4:	f7ff f852 	bl	8001f6c <HAL_GetTick>
 8002ec8:	0002      	movs	r2, r0
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	4a28      	ldr	r2, [pc, #160]	; (8002f70 <HAL_RCC_ClockConfig+0x274>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e044      	b.n	8002f62 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed8:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <HAL_RCC_ClockConfig+0x270>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2201      	movs	r2, #1
 8002ede:	4013      	ands	r3, r2
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d1ee      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2204      	movs	r2, #4
 8002eec:	4013      	ands	r3, r2
 8002eee:	d009      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef0:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <HAL_RCC_ClockConfig+0x278>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4a20      	ldr	r2, [pc, #128]	; (8002f78 <HAL_RCC_ClockConfig+0x27c>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	0019      	movs	r1, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <HAL_RCC_ClockConfig+0x278>)
 8002f00:	430a      	orrs	r2, r1
 8002f02:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2208      	movs	r2, #8
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f0e:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <HAL_RCC_ClockConfig+0x278>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	4a1a      	ldr	r2, [pc, #104]	; (8002f7c <HAL_RCC_ClockConfig+0x280>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	0019      	movs	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	00da      	lsls	r2, r3, #3
 8002f1e:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <HAL_RCC_ClockConfig+0x278>)
 8002f20:	430a      	orrs	r2, r1
 8002f22:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f24:	f000 f832 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 8002f28:	0001      	movs	r1, r0
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_RCC_ClockConfig+0x278>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	220f      	movs	r2, #15
 8002f32:	4013      	ands	r3, r2
 8002f34:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <HAL_RCC_ClockConfig+0x284>)
 8002f36:	5cd3      	ldrb	r3, [r2, r3]
 8002f38:	000a      	movs	r2, r1
 8002f3a:	40da      	lsrs	r2, r3
 8002f3c:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <HAL_RCC_ClockConfig+0x288>)
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <HAL_RCC_ClockConfig+0x28c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	250b      	movs	r5, #11
 8002f46:	197c      	adds	r4, r7, r5
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f7fe ffc9 	bl	8001ee0 <HAL_InitTick>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002f52:	197b      	adds	r3, r7, r5
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002f5a:	197b      	adds	r3, r7, r5
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	e000      	b.n	8002f62 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	0018      	movs	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b004      	add	sp, #16
 8002f68:	bdb0      	pop	{r4, r5, r7, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	40022000 	.word	0x40022000
 8002f70:	00001388 	.word	0x00001388
 8002f74:	40021000 	.word	0x40021000
 8002f78:	fffff8ff 	.word	0xfffff8ff
 8002f7c:	ffffc7ff 	.word	0xffffc7ff
 8002f80:	080053b8 	.word	0x080053b8
 8002f84:	20000000 	.word	0x20000000
 8002f88:	20000004 	.word	0x20000004

08002f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f8c:	b5b0      	push	{r4, r5, r7, lr}
 8002f8e:	b08e      	sub	sp, #56	; 0x38
 8002f90:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002f92:	4b4c      	ldr	r3, [pc, #304]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f9a:	230c      	movs	r3, #12
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b0c      	cmp	r3, #12
 8002fa0:	d014      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x40>
 8002fa2:	d900      	bls.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x1a>
 8002fa4:	e07b      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x112>
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d002      	beq.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x24>
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d00b      	beq.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fae:	e076      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002fb0:	4b44      	ldr	r3, [pc, #272]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2210      	movs	r2, #16
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d002      	beq.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002fba:	4b43      	ldr	r3, [pc, #268]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002fbc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002fbe:	e07c      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002fc0:	4b42      	ldr	r3, [pc, #264]	; (80030cc <HAL_RCC_GetSysClockFreq+0x140>)
 8002fc2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fc4:	e079      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fc6:	4b42      	ldr	r3, [pc, #264]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x144>)
 8002fc8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fca:	e076      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	0c9a      	lsrs	r2, r3, #18
 8002fd0:	230f      	movs	r3, #15
 8002fd2:	401a      	ands	r2, r3
 8002fd4:	4b3f      	ldr	r3, [pc, #252]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x148>)
 8002fd6:	5c9b      	ldrb	r3, [r3, r2]
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fdc:	0d9a      	lsrs	r2, r3, #22
 8002fde:	2303      	movs	r3, #3
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fe6:	4b37      	ldr	r3, [pc, #220]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	025b      	lsls	r3, r3, #9
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d01a      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
 8002ffa:	4a35      	ldr	r2, [pc, #212]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x144>)
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	69b8      	ldr	r0, [r7, #24]
 8003000:	69f9      	ldr	r1, [r7, #28]
 8003002:	f7fd f92d 	bl	8000260 <__aeabi_lmul>
 8003006:	0002      	movs	r2, r0
 8003008:	000b      	movs	r3, r1
 800300a:	0010      	movs	r0, r2
 800300c:	0019      	movs	r1, r3
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f7fd f901 	bl	8000220 <__aeabi_uldivmod>
 800301e:	0002      	movs	r2, r0
 8003020:	000b      	movs	r3, r1
 8003022:	0013      	movs	r3, r2
 8003024:	637b      	str	r3, [r7, #52]	; 0x34
 8003026:	e037      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003028:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2210      	movs	r2, #16
 800302e:	4013      	ands	r3, r2
 8003030:	d01a      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	4a23      	ldr	r2, [pc, #140]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800303c:	2300      	movs	r3, #0
 800303e:	68b8      	ldr	r0, [r7, #8]
 8003040:	68f9      	ldr	r1, [r7, #12]
 8003042:	f7fd f90d 	bl	8000260 <__aeabi_lmul>
 8003046:	0002      	movs	r2, r0
 8003048:	000b      	movs	r3, r1
 800304a:	0010      	movs	r0, r2
 800304c:	0019      	movs	r1, r3
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	603b      	str	r3, [r7, #0]
 8003052:	2300      	movs	r3, #0
 8003054:	607b      	str	r3, [r7, #4]
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f7fd f8e1 	bl	8000220 <__aeabi_uldivmod>
 800305e:	0002      	movs	r2, r0
 8003060:	000b      	movs	r3, r1
 8003062:	0013      	movs	r3, r2
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
 8003066:	e017      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	0018      	movs	r0, r3
 800306c:	2300      	movs	r3, #0
 800306e:	0019      	movs	r1, r3
 8003070:	4a16      	ldr	r2, [pc, #88]	; (80030cc <HAL_RCC_GetSysClockFreq+0x140>)
 8003072:	2300      	movs	r3, #0
 8003074:	f7fd f8f4 	bl	8000260 <__aeabi_lmul>
 8003078:	0002      	movs	r2, r0
 800307a:	000b      	movs	r3, r1
 800307c:	0010      	movs	r0, r2
 800307e:	0019      	movs	r1, r3
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	001c      	movs	r4, r3
 8003084:	2300      	movs	r3, #0
 8003086:	001d      	movs	r5, r3
 8003088:	0022      	movs	r2, r4
 800308a:	002b      	movs	r3, r5
 800308c:	f7fd f8c8 	bl	8000220 <__aeabi_uldivmod>
 8003090:	0002      	movs	r2, r0
 8003092:	000b      	movs	r3, r1
 8003094:	0013      	movs	r3, r2
 8003096:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800309c:	e00d      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800309e:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x138>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	0b5b      	lsrs	r3, r3, #13
 80030a4:	2207      	movs	r2, #7
 80030a6:	4013      	ands	r3, r2
 80030a8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	3301      	adds	r3, #1
 80030ae:	2280      	movs	r2, #128	; 0x80
 80030b0:	0212      	lsls	r2, r2, #8
 80030b2:	409a      	lsls	r2, r3
 80030b4:	0013      	movs	r3, r2
 80030b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030b8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	b00e      	add	sp, #56	; 0x38
 80030c2:	bdb0      	pop	{r4, r5, r7, pc}
 80030c4:	40021000 	.word	0x40021000
 80030c8:	003d0900 	.word	0x003d0900
 80030cc:	00f42400 	.word	0x00f42400
 80030d0:	007a1200 	.word	0x007a1200
 80030d4:	080053d0 	.word	0x080053d0

080030d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030dc:	4b02      	ldr	r3, [pc, #8]	; (80030e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80030de:	681b      	ldr	r3, [r3, #0]
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	20000000 	.word	0x20000000

080030ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030f0:	f7ff fff2 	bl	80030d8 <HAL_RCC_GetHCLKFreq>
 80030f4:	0001      	movs	r1, r0
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	2207      	movs	r2, #7
 80030fe:	4013      	ands	r3, r2
 8003100:	4a04      	ldr	r2, [pc, #16]	; (8003114 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003102:	5cd3      	ldrb	r3, [r2, r3]
 8003104:	40d9      	lsrs	r1, r3
 8003106:	000b      	movs	r3, r1
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	40021000 	.word	0x40021000
 8003114:	080053c8 	.word	0x080053c8

08003118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800311c:	f7ff ffdc 	bl	80030d8 <HAL_RCC_GetHCLKFreq>
 8003120:	0001      	movs	r1, r0
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	0adb      	lsrs	r3, r3, #11
 8003128:	2207      	movs	r2, #7
 800312a:	4013      	ands	r3, r2
 800312c:	4a04      	ldr	r2, [pc, #16]	; (8003140 <HAL_RCC_GetPCLK2Freq+0x28>)
 800312e:	5cd3      	ldrb	r3, [r2, r3]
 8003130:	40d9      	lsrs	r1, r3
 8003132:	000b      	movs	r3, r1
}
 8003134:	0018      	movs	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	40021000 	.word	0x40021000
 8003140:	080053c8 	.word	0x080053c8

08003144 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800314c:	2317      	movs	r3, #23
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2220      	movs	r2, #32
 800315a:	4013      	ands	r3, r2
 800315c:	d106      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	4013      	ands	r3, r2
 8003168:	d100      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800316a:	e0d9      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316c:	4b9c      	ldr	r3, [pc, #624]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800316e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	055b      	lsls	r3, r3, #21
 8003174:	4013      	ands	r3, r2
 8003176:	d10a      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003178:	4b99      	ldr	r3, [pc, #612]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800317a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800317c:	4b98      	ldr	r3, [pc, #608]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800317e:	2180      	movs	r1, #128	; 0x80
 8003180:	0549      	lsls	r1, r1, #21
 8003182:	430a      	orrs	r2, r1
 8003184:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003186:	2317      	movs	r3, #23
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	2201      	movs	r2, #1
 800318c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318e:	4b95      	ldr	r3, [pc, #596]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	2380      	movs	r3, #128	; 0x80
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4013      	ands	r3, r2
 8003198:	d11a      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800319a:	4b92      	ldr	r3, [pc, #584]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b91      	ldr	r3, [pc, #580]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80031a0:	2180      	movs	r1, #128	; 0x80
 80031a2:	0049      	lsls	r1, r1, #1
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a8:	f7fe fee0 	bl	8001f6c <HAL_GetTick>
 80031ac:	0003      	movs	r3, r0
 80031ae:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b0:	e008      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b2:	f7fe fedb 	bl	8001f6c <HAL_GetTick>
 80031b6:	0002      	movs	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b64      	cmp	r3, #100	; 0x64
 80031be:	d901      	bls.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e108      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c4:	4b87      	ldr	r3, [pc, #540]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4013      	ands	r3, r2
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80031d0:	4b83      	ldr	r3, [pc, #524]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	23c0      	movs	r3, #192	; 0xc0
 80031d6:	039b      	lsls	r3, r3, #14
 80031d8:	4013      	ands	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	23c0      	movs	r3, #192	; 0xc0
 80031e2:	039b      	lsls	r3, r3, #14
 80031e4:	4013      	ands	r3, r2
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d107      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	23c0      	movs	r3, #192	; 0xc0
 80031f2:	039b      	lsls	r3, r3, #14
 80031f4:	4013      	ands	r3, r2
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d013      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	23c0      	movs	r3, #192	; 0xc0
 8003202:	029b      	lsls	r3, r3, #10
 8003204:	401a      	ands	r2, r3
 8003206:	23c0      	movs	r3, #192	; 0xc0
 8003208:	029b      	lsls	r3, r3, #10
 800320a:	429a      	cmp	r2, r3
 800320c:	d10a      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800320e:	4b74      	ldr	r3, [pc, #464]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	029b      	lsls	r3, r3, #10
 8003216:	401a      	ands	r2, r3
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	029b      	lsls	r3, r3, #10
 800321c:	429a      	cmp	r2, r3
 800321e:	d101      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0d8      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003224:	4b6e      	ldr	r3, [pc, #440]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003226:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003228:	23c0      	movs	r3, #192	; 0xc0
 800322a:	029b      	lsls	r3, r3, #10
 800322c:	4013      	ands	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d049      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	23c0      	movs	r3, #192	; 0xc0
 800323c:	029b      	lsls	r3, r3, #10
 800323e:	4013      	ands	r3, r2
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	429a      	cmp	r2, r3
 8003244:	d004      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2220      	movs	r2, #32
 800324c:	4013      	ands	r3, r2
 800324e:	d10d      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	23c0      	movs	r3, #192	; 0xc0
 8003256:	029b      	lsls	r3, r3, #10
 8003258:	4013      	ands	r3, r2
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	429a      	cmp	r2, r3
 800325e:	d034      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	4013      	ands	r3, r2
 800326a:	d02e      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800326c:	4b5c      	ldr	r3, [pc, #368]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800326e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003270:	4a5d      	ldr	r2, [pc, #372]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003272:	4013      	ands	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003276:	4b5a      	ldr	r3, [pc, #360]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003278:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800327a:	4b59      	ldr	r3, [pc, #356]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800327c:	2180      	movs	r1, #128	; 0x80
 800327e:	0309      	lsls	r1, r1, #12
 8003280:	430a      	orrs	r2, r1
 8003282:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003284:	4b56      	ldr	r3, [pc, #344]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003286:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003288:	4b55      	ldr	r3, [pc, #340]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800328a:	4958      	ldr	r1, [pc, #352]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800328c:	400a      	ands	r2, r1
 800328e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003290:	4b53      	ldr	r3, [pc, #332]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4013      	ands	r3, r2
 800329e:	d014      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7fe fe64 	bl	8001f6c <HAL_GetTick>
 80032a4:	0003      	movs	r3, r0
 80032a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032a8:	e009      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032aa:	f7fe fe5f 	bl	8001f6c <HAL_GetTick>
 80032ae:	0002      	movs	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	4a4e      	ldr	r2, [pc, #312]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e08b      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032be:	4b48      	ldr	r3, [pc, #288]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80032c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4013      	ands	r3, r2
 80032c8:	d0ef      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	23c0      	movs	r3, #192	; 0xc0
 80032d0:	029b      	lsls	r3, r3, #10
 80032d2:	401a      	ands	r2, r3
 80032d4:	23c0      	movs	r3, #192	; 0xc0
 80032d6:	029b      	lsls	r3, r3, #10
 80032d8:	429a      	cmp	r2, r3
 80032da:	d10c      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80032dc:	4b40      	ldr	r3, [pc, #256]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a44      	ldr	r2, [pc, #272]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	0019      	movs	r1, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	23c0      	movs	r3, #192	; 0xc0
 80032ec:	039b      	lsls	r3, r3, #14
 80032ee:	401a      	ands	r2, r3
 80032f0:	4b3b      	ldr	r3, [pc, #236]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80032f2:	430a      	orrs	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	4b3a      	ldr	r3, [pc, #232]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80032f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	23c0      	movs	r3, #192	; 0xc0
 8003300:	029b      	lsls	r3, r3, #10
 8003302:	401a      	ands	r2, r3
 8003304:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003306:	430a      	orrs	r2, r1
 8003308:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800330a:	2317      	movs	r3, #23
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d105      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003314:	4b32      	ldr	r3, [pc, #200]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003318:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800331a:	4937      	ldr	r1, [pc, #220]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800331c:	400a      	ands	r2, r1
 800331e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2201      	movs	r2, #1
 8003326:	4013      	ands	r3, r2
 8003328:	d009      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800332a:	4b2d      	ldr	r3, [pc, #180]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800332c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332e:	2203      	movs	r2, #3
 8003330:	4393      	bics	r3, r2
 8003332:	0019      	movs	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800333a:	430a      	orrs	r2, r1
 800333c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2202      	movs	r2, #2
 8003344:	4013      	ands	r3, r2
 8003346:	d009      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003348:	4b25      	ldr	r3, [pc, #148]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800334a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334c:	220c      	movs	r2, #12
 800334e:	4393      	bics	r3, r2
 8003350:	0019      	movs	r1, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	4b22      	ldr	r3, [pc, #136]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003358:	430a      	orrs	r2, r1
 800335a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2204      	movs	r2, #4
 8003362:	4013      	ands	r3, r2
 8003364:	d009      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003366:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336a:	4a24      	ldr	r2, [pc, #144]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800336c:	4013      	ands	r3, r2
 800336e:	0019      	movs	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	695a      	ldr	r2, [r3, #20]
 8003374:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003376:	430a      	orrs	r2, r1
 8003378:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2208      	movs	r2, #8
 8003380:	4013      	ands	r3, r2
 8003382:	d009      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003384:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003388:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800338a:	4013      	ands	r3, r2
 800338c:	0019      	movs	r1, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003394:	430a      	orrs	r2, r1
 8003396:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2240      	movs	r2, #64	; 0x40
 800339e:	4013      	ands	r3, r2
 80033a0:	d009      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033a2:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a6:	4a17      	ldr	r2, [pc, #92]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	0019      	movs	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1a      	ldr	r2, [r3, #32]
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033b2:	430a      	orrs	r2, r1
 80033b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2280      	movs	r2, #128	; 0x80
 80033bc:	4013      	ands	r3, r2
 80033be:	d009      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80033c0:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c4:	4a10      	ldr	r2, [pc, #64]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	0019      	movs	r1, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69da      	ldr	r2, [r3, #28]
 80033ce:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033d0:	430a      	orrs	r2, r1
 80033d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	0018      	movs	r0, r3
 80033d8:	46bd      	mov	sp, r7
 80033da:	b006      	add	sp, #24
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40007000 	.word	0x40007000
 80033e8:	fffcffff 	.word	0xfffcffff
 80033ec:	fff7ffff 	.word	0xfff7ffff
 80033f0:	00001388 	.word	0x00001388
 80033f4:	ffcfffff 	.word	0xffcfffff
 80033f8:	efffffff 	.word	0xefffffff
 80033fc:	fffff3ff 	.word	0xfffff3ff
 8003400:	ffffcfff 	.word	0xffffcfff
 8003404:	fbffffff 	.word	0xfbffffff
 8003408:	fff3ffff 	.word	0xfff3ffff

0800340c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e032      	b.n	8003484 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2239      	movs	r2, #57	; 0x39
 8003422:	5c9b      	ldrb	r3, [r3, r2]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d107      	bne.n	800343a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2238      	movs	r2, #56	; 0x38
 800342e:	2100      	movs	r1, #0
 8003430:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	0018      	movs	r0, r3
 8003436:	f7fe fa4b 	bl	80018d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2239      	movs	r2, #57	; 0x39
 800343e:	2102      	movs	r1, #2
 8003440:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3304      	adds	r3, #4
 800344a:	0019      	movs	r1, r3
 800344c:	0010      	movs	r0, r2
 800344e:	f000 fa45 	bl	80038dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	223e      	movs	r2, #62	; 0x3e
 8003456:	2101      	movs	r1, #1
 8003458:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	223a      	movs	r2, #58	; 0x3a
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	223b      	movs	r2, #59	; 0x3b
 8003466:	2101      	movs	r1, #1
 8003468:	5499      	strb	r1, [r3, r2]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	223c      	movs	r2, #60	; 0x3c
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	223d      	movs	r2, #61	; 0x3d
 8003476:	2101      	movs	r1, #1
 8003478:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2239      	movs	r2, #57	; 0x39
 800347e:	2101      	movs	r1, #1
 8003480:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b002      	add	sp, #8
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2239      	movs	r2, #57	; 0x39
 8003498:	5c9b      	ldrb	r3, [r3, r2]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b01      	cmp	r3, #1
 800349e:	d001      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e036      	b.n	8003512 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2239      	movs	r2, #57	; 0x39
 80034a8:	2102      	movs	r1, #2
 80034aa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2101      	movs	r1, #1
 80034b8:	430a      	orrs	r2, r1
 80034ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	2380      	movs	r3, #128	; 0x80
 80034c2:	05db      	lsls	r3, r3, #23
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d009      	beq.n	80034dc <HAL_TIM_Base_Start_IT+0x50>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a13      	ldr	r2, [pc, #76]	; (800351c <HAL_TIM_Base_Start_IT+0x90>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d004      	beq.n	80034dc <HAL_TIM_Base_Start_IT+0x50>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a12      	ldr	r2, [pc, #72]	; (8003520 <HAL_TIM_Base_Start_IT+0x94>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d111      	bne.n	8003500 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2207      	movs	r2, #7
 80034e4:	4013      	ands	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d010      	beq.n	8003510 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2101      	movs	r1, #1
 80034fa:	430a      	orrs	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fe:	e007      	b.n	8003510 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2101      	movs	r1, #1
 800350c:	430a      	orrs	r2, r1
 800350e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	0018      	movs	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	b004      	add	sp, #16
 8003518:	bd80      	pop	{r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	40010800 	.word	0x40010800
 8003520:	40011400 	.word	0x40011400

08003524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	2202      	movs	r2, #2
 8003534:	4013      	ands	r3, r2
 8003536:	2b02      	cmp	r3, #2
 8003538:	d124      	bne.n	8003584 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2202      	movs	r2, #2
 8003542:	4013      	ands	r3, r2
 8003544:	2b02      	cmp	r3, #2
 8003546:	d11d      	bne.n	8003584 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2203      	movs	r2, #3
 800354e:	4252      	negs	r2, r2
 8003550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2203      	movs	r2, #3
 8003560:	4013      	ands	r3, r2
 8003562:	d004      	beq.n	800356e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	0018      	movs	r0, r3
 8003568:	f000 f9a0 	bl	80038ac <HAL_TIM_IC_CaptureCallback>
 800356c:	e007      	b.n	800357e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	0018      	movs	r0, r3
 8003572:	f000 f993 	bl	800389c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	0018      	movs	r0, r3
 800357a:	f000 f99f 	bl	80038bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2204      	movs	r2, #4
 800358c:	4013      	ands	r3, r2
 800358e:	2b04      	cmp	r3, #4
 8003590:	d125      	bne.n	80035de <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2204      	movs	r2, #4
 800359a:	4013      	ands	r3, r2
 800359c:	2b04      	cmp	r3, #4
 800359e:	d11e      	bne.n	80035de <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2205      	movs	r2, #5
 80035a6:	4252      	negs	r2, r2
 80035a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2202      	movs	r2, #2
 80035ae:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699a      	ldr	r2, [r3, #24]
 80035b6:	23c0      	movs	r3, #192	; 0xc0
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4013      	ands	r3, r2
 80035bc:	d004      	beq.n	80035c8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f000 f973 	bl	80038ac <HAL_TIM_IC_CaptureCallback>
 80035c6:	e007      	b.n	80035d8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	0018      	movs	r0, r3
 80035cc:	f000 f966 	bl	800389c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	0018      	movs	r0, r3
 80035d4:	f000 f972 	bl	80038bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	2208      	movs	r2, #8
 80035e6:	4013      	ands	r3, r2
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d124      	bne.n	8003636 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2208      	movs	r2, #8
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d11d      	bne.n	8003636 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2209      	movs	r2, #9
 8003600:	4252      	negs	r2, r2
 8003602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2204      	movs	r2, #4
 8003608:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	2203      	movs	r2, #3
 8003612:	4013      	ands	r3, r2
 8003614:	d004      	beq.n	8003620 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	0018      	movs	r0, r3
 800361a:	f000 f947 	bl	80038ac <HAL_TIM_IC_CaptureCallback>
 800361e:	e007      	b.n	8003630 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	0018      	movs	r0, r3
 8003624:	f000 f93a 	bl	800389c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	0018      	movs	r0, r3
 800362c:	f000 f946 	bl	80038bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	2210      	movs	r2, #16
 800363e:	4013      	ands	r3, r2
 8003640:	2b10      	cmp	r3, #16
 8003642:	d125      	bne.n	8003690 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2210      	movs	r2, #16
 800364c:	4013      	ands	r3, r2
 800364e:	2b10      	cmp	r3, #16
 8003650:	d11e      	bne.n	8003690 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2211      	movs	r2, #17
 8003658:	4252      	negs	r2, r2
 800365a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2208      	movs	r2, #8
 8003660:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69da      	ldr	r2, [r3, #28]
 8003668:	23c0      	movs	r3, #192	; 0xc0
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4013      	ands	r3, r2
 800366e:	d004      	beq.n	800367a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	0018      	movs	r0, r3
 8003674:	f000 f91a 	bl	80038ac <HAL_TIM_IC_CaptureCallback>
 8003678:	e007      	b.n	800368a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	0018      	movs	r0, r3
 800367e:	f000 f90d 	bl	800389c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	0018      	movs	r0, r3
 8003686:	f000 f919 	bl	80038bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2201      	movs	r2, #1
 8003698:	4013      	ands	r3, r2
 800369a:	2b01      	cmp	r3, #1
 800369c:	d10f      	bne.n	80036be <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d108      	bne.n	80036be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2202      	movs	r2, #2
 80036b2:	4252      	negs	r2, r2
 80036b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	0018      	movs	r0, r3
 80036ba:	f7fd faff 	bl	8000cbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	2240      	movs	r2, #64	; 0x40
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	d10f      	bne.n	80036ec <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	2240      	movs	r2, #64	; 0x40
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b40      	cmp	r3, #64	; 0x40
 80036d8:	d108      	bne.n	80036ec <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2241      	movs	r2, #65	; 0x41
 80036e0:	4252      	negs	r2, r2
 80036e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	0018      	movs	r0, r3
 80036e8:	f000 f8f0 	bl	80038cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b002      	add	sp, #8
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036fe:	230f      	movs	r3, #15
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2238      	movs	r2, #56	; 0x38
 800370a:	5c9b      	ldrb	r3, [r3, r2]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_TIM_ConfigClockSource+0x20>
 8003710:	2302      	movs	r3, #2
 8003712:	e0bc      	b.n	800388e <HAL_TIM_ConfigClockSource+0x19a>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2238      	movs	r2, #56	; 0x38
 8003718:	2101      	movs	r1, #1
 800371a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2239      	movs	r2, #57	; 0x39
 8003720:	2102      	movs	r1, #2
 8003722:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2277      	movs	r2, #119	; 0x77
 8003730:	4393      	bics	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4a58      	ldr	r2, [pc, #352]	; (8003898 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003738:	4013      	ands	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2280      	movs	r2, #128	; 0x80
 800374a:	0192      	lsls	r2, r2, #6
 800374c:	4293      	cmp	r3, r2
 800374e:	d040      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0xde>
 8003750:	2280      	movs	r2, #128	; 0x80
 8003752:	0192      	lsls	r2, r2, #6
 8003754:	4293      	cmp	r3, r2
 8003756:	d900      	bls.n	800375a <HAL_TIM_ConfigClockSource+0x66>
 8003758:	e088      	b.n	800386c <HAL_TIM_ConfigClockSource+0x178>
 800375a:	2280      	movs	r2, #128	; 0x80
 800375c:	0152      	lsls	r2, r2, #5
 800375e:	4293      	cmp	r3, r2
 8003760:	d100      	bne.n	8003764 <HAL_TIM_ConfigClockSource+0x70>
 8003762:	e088      	b.n	8003876 <HAL_TIM_ConfigClockSource+0x182>
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	0152      	lsls	r2, r2, #5
 8003768:	4293      	cmp	r3, r2
 800376a:	d900      	bls.n	800376e <HAL_TIM_ConfigClockSource+0x7a>
 800376c:	e07e      	b.n	800386c <HAL_TIM_ConfigClockSource+0x178>
 800376e:	2b70      	cmp	r3, #112	; 0x70
 8003770:	d018      	beq.n	80037a4 <HAL_TIM_ConfigClockSource+0xb0>
 8003772:	d900      	bls.n	8003776 <HAL_TIM_ConfigClockSource+0x82>
 8003774:	e07a      	b.n	800386c <HAL_TIM_ConfigClockSource+0x178>
 8003776:	2b60      	cmp	r3, #96	; 0x60
 8003778:	d04f      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x126>
 800377a:	d900      	bls.n	800377e <HAL_TIM_ConfigClockSource+0x8a>
 800377c:	e076      	b.n	800386c <HAL_TIM_ConfigClockSource+0x178>
 800377e:	2b50      	cmp	r3, #80	; 0x50
 8003780:	d03b      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0x106>
 8003782:	d900      	bls.n	8003786 <HAL_TIM_ConfigClockSource+0x92>
 8003784:	e072      	b.n	800386c <HAL_TIM_ConfigClockSource+0x178>
 8003786:	2b40      	cmp	r3, #64	; 0x40
 8003788:	d057      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x146>
 800378a:	d900      	bls.n	800378e <HAL_TIM_ConfigClockSource+0x9a>
 800378c:	e06e      	b.n	800386c <HAL_TIM_ConfigClockSource+0x178>
 800378e:	2b30      	cmp	r3, #48	; 0x30
 8003790:	d063      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x166>
 8003792:	d86b      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x178>
 8003794:	2b20      	cmp	r3, #32
 8003796:	d060      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x166>
 8003798:	d868      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x178>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d05d      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x166>
 800379e:	2b10      	cmp	r3, #16
 80037a0:	d05b      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x166>
 80037a2:	e063      	b.n	800386c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	6899      	ldr	r1, [r3, #8]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f000 f960 	bl	8003a78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2277      	movs	r2, #119	; 0x77
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	609a      	str	r2, [r3, #8]
      break;
 80037d0:	e052      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	6899      	ldr	r1, [r3, #8]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f000 f949 	bl	8003a78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2180      	movs	r1, #128	; 0x80
 80037f2:	01c9      	lsls	r1, r1, #7
 80037f4:	430a      	orrs	r2, r1
 80037f6:	609a      	str	r2, [r3, #8]
      break;
 80037f8:	e03e      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6859      	ldr	r1, [r3, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	001a      	movs	r2, r3
 8003808:	f000 f8bc 	bl	8003984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2150      	movs	r1, #80	; 0x50
 8003812:	0018      	movs	r0, r3
 8003814:	f000 f916 	bl	8003a44 <TIM_ITRx_SetConfig>
      break;
 8003818:	e02e      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6859      	ldr	r1, [r3, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	001a      	movs	r2, r3
 8003828:	f000 f8da 	bl	80039e0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2160      	movs	r1, #96	; 0x60
 8003832:	0018      	movs	r0, r3
 8003834:	f000 f906 	bl	8003a44 <TIM_ITRx_SetConfig>
      break;
 8003838:	e01e      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6859      	ldr	r1, [r3, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	001a      	movs	r2, r3
 8003848:	f000 f89c 	bl	8003984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2140      	movs	r1, #64	; 0x40
 8003852:	0018      	movs	r0, r3
 8003854:	f000 f8f6 	bl	8003a44 <TIM_ITRx_SetConfig>
      break;
 8003858:	e00e      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	0019      	movs	r1, r3
 8003864:	0010      	movs	r0, r2
 8003866:	f000 f8ed 	bl	8003a44 <TIM_ITRx_SetConfig>
      break;
 800386a:	e005      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800386c:	230f      	movs	r3, #15
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
      break;
 8003874:	e000      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003876:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2239      	movs	r2, #57	; 0x39
 800387c:	2101      	movs	r1, #1
 800387e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2238      	movs	r2, #56	; 0x38
 8003884:	2100      	movs	r1, #0
 8003886:	5499      	strb	r1, [r3, r2]

  return status;
 8003888:	230f      	movs	r3, #15
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	781b      	ldrb	r3, [r3, #0]
}
 800388e:	0018      	movs	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	b004      	add	sp, #16
 8003894:	bd80      	pop	{r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	ffff00ff 	.word	0xffff00ff

0800389c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038a4:	46c0      	nop			; (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b002      	add	sp, #8
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b002      	add	sp, #8
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038c4:	46c0      	nop			; (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b002      	add	sp, #8
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038d4:	46c0      	nop			; (mov r8, r8)
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b002      	add	sp, #8
 80038da:	bd80      	pop	{r7, pc}

080038dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	05db      	lsls	r3, r3, #23
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d007      	beq.n	8003906 <TIM_Base_SetConfig+0x2a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a1f      	ldr	r2, [pc, #124]	; (8003978 <TIM_Base_SetConfig+0x9c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d003      	beq.n	8003906 <TIM_Base_SetConfig+0x2a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a1e      	ldr	r2, [pc, #120]	; (800397c <TIM_Base_SetConfig+0xa0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d108      	bne.n	8003918 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2270      	movs	r2, #112	; 0x70
 800390a:	4393      	bics	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	05db      	lsls	r3, r3, #23
 800391e:	429a      	cmp	r2, r3
 8003920:	d007      	beq.n	8003932 <TIM_Base_SetConfig+0x56>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a14      	ldr	r2, [pc, #80]	; (8003978 <TIM_Base_SetConfig+0x9c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d003      	beq.n	8003932 <TIM_Base_SetConfig+0x56>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a13      	ldr	r2, [pc, #76]	; (800397c <TIM_Base_SetConfig+0xa0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d108      	bne.n	8003944 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4a12      	ldr	r2, [pc, #72]	; (8003980 <TIM_Base_SetConfig+0xa4>)
 8003936:	4013      	ands	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2280      	movs	r2, #128	; 0x80
 8003948:	4393      	bics	r3, r2
 800394a:	001a      	movs	r2, r3
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	615a      	str	r2, [r3, #20]
}
 8003970:	46c0      	nop			; (mov r8, r8)
 8003972:	46bd      	mov	sp, r7
 8003974:	b004      	add	sp, #16
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40010800 	.word	0x40010800
 800397c:	40011400 	.word	0x40011400
 8003980:	fffffcff 	.word	0xfffffcff

08003984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	2201      	movs	r2, #1
 800399c:	4393      	bics	r3, r2
 800399e:	001a      	movs	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	22f0      	movs	r2, #240	; 0xf0
 80039ae:	4393      	bics	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	220a      	movs	r2, #10
 80039c0:	4393      	bics	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	621a      	str	r2, [r3, #32]
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b006      	add	sp, #24
 80039de:	bd80      	pop	{r7, pc}

080039e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	2210      	movs	r2, #16
 80039f2:	4393      	bics	r3, r2
 80039f4:	001a      	movs	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	4a0d      	ldr	r2, [pc, #52]	; (8003a40 <TIM_TI2_ConfigInputStage+0x60>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	031b      	lsls	r3, r3, #12
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	22a0      	movs	r2, #160	; 0xa0
 8003a1c:	4393      	bics	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	621a      	str	r2, [r3, #32]
}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b006      	add	sp, #24
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	ffff0fff 	.word	0xffff0fff

08003a44 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2270      	movs	r2, #112	; 0x70
 8003a58:	4393      	bics	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	2207      	movs	r2, #7
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	609a      	str	r2, [r3, #8]
}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b004      	add	sp, #16
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <TIM_ETR_SetConfig+0x3c>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	021a      	lsls	r2, r3, #8
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	609a      	str	r2, [r3, #8]
}
 8003aac:	46c0      	nop			; (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b006      	add	sp, #24
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	ffff00ff 	.word	0xffff00ff

08003ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2238      	movs	r2, #56	; 0x38
 8003ac6:	5c9b      	ldrb	r3, [r3, r2]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e042      	b.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2238      	movs	r2, #56	; 0x38
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2239      	movs	r2, #57	; 0x39
 8003adc:	2102      	movs	r1, #2
 8003ade:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2270      	movs	r2, #112	; 0x70
 8003af4:	4393      	bics	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	2380      	movs	r3, #128	; 0x80
 8003b10:	05db      	lsls	r3, r3, #23
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d009      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a11      	ldr	r2, [pc, #68]	; (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d004      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a0f      	ldr	r2, [pc, #60]	; (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d10c      	bne.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2280      	movs	r2, #128	; 0x80
 8003b2e:	4393      	bics	r3, r2
 8003b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2239      	movs	r2, #57	; 0x39
 8003b48:	2101      	movs	r1, #1
 8003b4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2238      	movs	r2, #56	; 0x38
 8003b50:	2100      	movs	r1, #0
 8003b52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	0018      	movs	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b004      	add	sp, #16
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	40010800 	.word	0x40010800
 8003b64:	40011400 	.word	0x40011400

08003b68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e044      	b.n	8003c04 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d107      	bne.n	8003b92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2274      	movs	r2, #116	; 0x74
 8003b86:	2100      	movs	r1, #0
 8003b88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f7fd fed3 	bl	8001938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2224      	movs	r2, #36	; 0x24
 8003b96:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	438a      	bics	r2, r1
 8003ba6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	0018      	movs	r0, r3
 8003bac:	f000 fc36 	bl	800441c <UART_SetConfig>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e024      	b.n	8003c04 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f000 fec9 	bl	800495c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	490d      	ldr	r1, [pc, #52]	; (8003c0c <HAL_UART_Init+0xa4>)
 8003bd6:	400a      	ands	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	212a      	movs	r1, #42	; 0x2a
 8003be6:	438a      	bics	r2, r1
 8003be8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f000 ff61 	bl	8004ac4 <UART_CheckIdleState>
 8003c02:	0003      	movs	r3, r0
}
 8003c04:	0018      	movs	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b002      	add	sp, #8
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	ffffb7ff 	.word	0xffffb7ff

08003c10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08a      	sub	sp, #40	; 0x28
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	1dbb      	adds	r3, r7, #6
 8003c1e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	d000      	beq.n	8003c2a <HAL_UART_Transmit+0x1a>
 8003c28:	e095      	b.n	8003d56 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_UART_Transmit+0x28>
 8003c30:	1dbb      	adds	r3, r7, #6
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e08d      	b.n	8003d58 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	015b      	lsls	r3, r3, #5
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d109      	bne.n	8003c5c <HAL_UART_Transmit+0x4c>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d105      	bne.n	8003c5c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2201      	movs	r2, #1
 8003c54:	4013      	ands	r3, r2
 8003c56:	d001      	beq.n	8003c5c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e07d      	b.n	8003d58 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2274      	movs	r2, #116	; 0x74
 8003c60:	5c9b      	ldrb	r3, [r3, r2]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_UART_Transmit+0x5a>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e076      	b.n	8003d58 <HAL_UART_Transmit+0x148>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2274      	movs	r2, #116	; 0x74
 8003c6e:	2101      	movs	r1, #1
 8003c70:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2280      	movs	r2, #128	; 0x80
 8003c76:	2100      	movs	r1, #0
 8003c78:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2221      	movs	r2, #33	; 0x21
 8003c7e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c80:	f7fe f974 	bl	8001f6c <HAL_GetTick>
 8003c84:	0003      	movs	r3, r0
 8003c86:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	1dba      	adds	r2, r7, #6
 8003c8c:	2150      	movs	r1, #80	; 0x50
 8003c8e:	8812      	ldrh	r2, [r2, #0]
 8003c90:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1dba      	adds	r2, r7, #6
 8003c96:	2152      	movs	r1, #82	; 0x52
 8003c98:	8812      	ldrh	r2, [r2, #0]
 8003c9a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	015b      	lsls	r3, r3, #5
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d108      	bne.n	8003cba <HAL_UART_Transmit+0xaa>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d104      	bne.n	8003cba <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	61bb      	str	r3, [r7, #24]
 8003cb8:	e003      	b.n	8003cc2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2274      	movs	r2, #116	; 0x74
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003cca:	e02c      	b.n	8003d26 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	0013      	movs	r3, r2
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2180      	movs	r1, #128	; 0x80
 8003cda:	f000 ff3b 	bl	8004b54 <UART_WaitOnFlagUntilTimeout>
 8003cde:	1e03      	subs	r3, r0, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e038      	b.n	8003d58 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10b      	bne.n	8003d04 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	05d2      	lsls	r2, r2, #23
 8003cf8:	0dd2      	lsrs	r2, r2, #23
 8003cfa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	3302      	adds	r3, #2
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	e007      	b.n	8003d14 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	781a      	ldrb	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	3301      	adds	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2252      	movs	r2, #82	; 0x52
 8003d18:	5a9b      	ldrh	r3, [r3, r2]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b299      	uxth	r1, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2252      	movs	r2, #82	; 0x52
 8003d24:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2252      	movs	r2, #82	; 0x52
 8003d2a:	5a9b      	ldrh	r3, [r3, r2]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1cc      	bne.n	8003ccc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	0013      	movs	r3, r2
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2140      	movs	r1, #64	; 0x40
 8003d40:	f000 ff08 	bl	8004b54 <UART_WaitOnFlagUntilTimeout>
 8003d44:	1e03      	subs	r3, r0, #0
 8003d46:	d001      	beq.n	8003d4c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e005      	b.n	8003d58 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	e000      	b.n	8003d58 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003d56:	2302      	movs	r3, #2
  }
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b008      	add	sp, #32
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	1dbb      	adds	r3, r7, #6
 8003d6c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	d155      	bne.n	8003e22 <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_UART_Receive_IT+0x24>
 8003d7c:	1dbb      	adds	r3, r7, #6
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e04d      	b.n	8003e24 <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	2380      	movs	r3, #128	; 0x80
 8003d8e:	015b      	lsls	r3, r3, #5
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d109      	bne.n	8003da8 <HAL_UART_Receive_IT+0x48>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d105      	bne.n	8003da8 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	4013      	ands	r3, r2
 8003da2:	d001      	beq.n	8003da8 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e03d      	b.n	8003e24 <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2274      	movs	r2, #116	; 0x74
 8003dac:	5c9b      	ldrb	r3, [r3, r2]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_UART_Receive_IT+0x56>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e036      	b.n	8003e24 <HAL_UART_Receive_IT+0xc4>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2274      	movs	r2, #116	; 0x74
 8003dba:	2101      	movs	r1, #1
 8003dbc:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a18      	ldr	r2, [pc, #96]	; (8003e2c <HAL_UART_Receive_IT+0xcc>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d020      	beq.n	8003e10 <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	041b      	lsls	r3, r3, #16
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d019      	beq.n	8003e10 <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8003de0:	613b      	str	r3, [r7, #16]
  return(result);
 8003de2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	2301      	movs	r3, #1
 8003de8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f383 8810 	msr	PRIMASK, r3
}
 8003df0:	46c0      	nop			; (mov r8, r8)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2180      	movs	r1, #128	; 0x80
 8003dfe:	04c9      	lsls	r1, r1, #19
 8003e00:	430a      	orrs	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	f383 8810 	msr	PRIMASK, r3
}
 8003e0e:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e10:	1dbb      	adds	r3, r7, #6
 8003e12:	881a      	ldrh	r2, [r3, #0]
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f000 ff5f 	bl	8004cdc <UART_Start_Receive_IT>
 8003e1e:	0003      	movs	r3, r0
 8003e20:	e000      	b.n	8003e24 <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
  }
}
 8003e24:	0018      	movs	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b008      	add	sp, #32
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40004800 	.word	0x40004800

08003e30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b0ab      	sub	sp, #172	; 0xac
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	22a4      	movs	r2, #164	; 0xa4
 8003e40:	18b9      	adds	r1, r7, r2
 8003e42:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	20a0      	movs	r0, #160	; 0xa0
 8003e4c:	1839      	adds	r1, r7, r0
 8003e4e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	219c      	movs	r1, #156	; 0x9c
 8003e58:	1879      	adds	r1, r7, r1
 8003e5a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e5c:	0011      	movs	r1, r2
 8003e5e:	18bb      	adds	r3, r7, r2
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a99      	ldr	r2, [pc, #612]	; (80040c8 <HAL_UART_IRQHandler+0x298>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	2298      	movs	r2, #152	; 0x98
 8003e68:	18bc      	adds	r4, r7, r2
 8003e6a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003e6c:	18bb      	adds	r3, r7, r2
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d114      	bne.n	8003e9e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e74:	187b      	adds	r3, r7, r1
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d00f      	beq.n	8003e9e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e7e:	183b      	adds	r3, r7, r0
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2220      	movs	r2, #32
 8003e84:	4013      	ands	r3, r2
 8003e86:	d00a      	beq.n	8003e9e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d100      	bne.n	8003e92 <HAL_UART_IRQHandler+0x62>
 8003e90:	e298      	b.n	80043c4 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	0010      	movs	r0, r2
 8003e9a:	4798      	blx	r3
      }
      return;
 8003e9c:	e292      	b.n	80043c4 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e9e:	2398      	movs	r3, #152	; 0x98
 8003ea0:	18fb      	adds	r3, r7, r3
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d100      	bne.n	8003eaa <HAL_UART_IRQHandler+0x7a>
 8003ea8:	e114      	b.n	80040d4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003eaa:	239c      	movs	r3, #156	; 0x9c
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d106      	bne.n	8003ec4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003eb6:	23a0      	movs	r3, #160	; 0xa0
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a83      	ldr	r2, [pc, #524]	; (80040cc <HAL_UART_IRQHandler+0x29c>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d100      	bne.n	8003ec4 <HAL_UART_IRQHandler+0x94>
 8003ec2:	e107      	b.n	80040d4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ec4:	23a4      	movs	r3, #164	; 0xa4
 8003ec6:	18fb      	adds	r3, r7, r3
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d012      	beq.n	8003ef6 <HAL_UART_IRQHandler+0xc6>
 8003ed0:	23a0      	movs	r3, #160	; 0xa0
 8003ed2:	18fb      	adds	r3, r7, r3
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	2380      	movs	r3, #128	; 0x80
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	4013      	ands	r3, r2
 8003edc:	d00b      	beq.n	8003ef6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2280      	movs	r2, #128	; 0x80
 8003eea:	589b      	ldr	r3, [r3, r2]
 8003eec:	2201      	movs	r2, #1
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2180      	movs	r1, #128	; 0x80
 8003ef4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ef6:	23a4      	movs	r3, #164	; 0xa4
 8003ef8:	18fb      	adds	r3, r7, r3
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2202      	movs	r2, #2
 8003efe:	4013      	ands	r3, r2
 8003f00:	d011      	beq.n	8003f26 <HAL_UART_IRQHandler+0xf6>
 8003f02:	239c      	movs	r3, #156	; 0x9c
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d00b      	beq.n	8003f26 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2202      	movs	r2, #2
 8003f14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2280      	movs	r2, #128	; 0x80
 8003f1a:	589b      	ldr	r3, [r3, r2]
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2180      	movs	r1, #128	; 0x80
 8003f24:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f26:	23a4      	movs	r3, #164	; 0xa4
 8003f28:	18fb      	adds	r3, r7, r3
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d011      	beq.n	8003f56 <HAL_UART_IRQHandler+0x126>
 8003f32:	239c      	movs	r3, #156	; 0x9c
 8003f34:	18fb      	adds	r3, r7, r3
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d00b      	beq.n	8003f56 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2204      	movs	r2, #4
 8003f44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2280      	movs	r2, #128	; 0x80
 8003f4a:	589b      	ldr	r3, [r3, r2]
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2180      	movs	r1, #128	; 0x80
 8003f54:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f56:	23a4      	movs	r3, #164	; 0xa4
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d017      	beq.n	8003f92 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f62:	23a0      	movs	r3, #160	; 0xa0
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d105      	bne.n	8003f7a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f6e:	239c      	movs	r3, #156	; 0x9c
 8003f70:	18fb      	adds	r3, r7, r3
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2201      	movs	r2, #1
 8003f76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f78:	d00b      	beq.n	8003f92 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2208      	movs	r2, #8
 8003f80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2280      	movs	r2, #128	; 0x80
 8003f86:	589b      	ldr	r3, [r3, r2]
 8003f88:	2208      	movs	r2, #8
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2180      	movs	r1, #128	; 0x80
 8003f90:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f92:	23a4      	movs	r3, #164	; 0xa4
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d013      	beq.n	8003fc8 <HAL_UART_IRQHandler+0x198>
 8003fa0:	23a0      	movs	r3, #160	; 0xa0
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	2380      	movs	r3, #128	; 0x80
 8003fa8:	04db      	lsls	r3, r3, #19
 8003faa:	4013      	ands	r3, r2
 8003fac:	d00c      	beq.n	8003fc8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2280      	movs	r2, #128	; 0x80
 8003fb4:	0112      	lsls	r2, r2, #4
 8003fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2280      	movs	r2, #128	; 0x80
 8003fbc:	589b      	ldr	r3, [r3, r2]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2180      	movs	r1, #128	; 0x80
 8003fc6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2280      	movs	r2, #128	; 0x80
 8003fcc:	589b      	ldr	r3, [r3, r2]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d100      	bne.n	8003fd4 <HAL_UART_IRQHandler+0x1a4>
 8003fd2:	e1f9      	b.n	80043c8 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fd4:	23a4      	movs	r3, #164	; 0xa4
 8003fd6:	18fb      	adds	r3, r7, r3
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d00e      	beq.n	8003ffe <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fe0:	23a0      	movs	r3, #160	; 0xa0
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d008      	beq.n	8003ffe <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d004      	beq.n	8003ffe <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	0010      	movs	r0, r2
 8003ffc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2280      	movs	r2, #128	; 0x80
 8004002:	589b      	ldr	r3, [r3, r2]
 8004004:	2194      	movs	r1, #148	; 0x94
 8004006:	187a      	adds	r2, r7, r1
 8004008:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2240      	movs	r2, #64	; 0x40
 8004012:	4013      	ands	r3, r2
 8004014:	2b40      	cmp	r3, #64	; 0x40
 8004016:	d004      	beq.n	8004022 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004018:	187b      	adds	r3, r7, r1
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2228      	movs	r2, #40	; 0x28
 800401e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004020:	d047      	beq.n	80040b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	0018      	movs	r0, r3
 8004026:	f000 ff09 	bl	8004e3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2240      	movs	r2, #64	; 0x40
 8004032:	4013      	ands	r3, r2
 8004034:	2b40      	cmp	r3, #64	; 0x40
 8004036:	d137      	bne.n	80040a8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004038:	f3ef 8310 	mrs	r3, PRIMASK
 800403c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800403e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004040:	2090      	movs	r0, #144	; 0x90
 8004042:	183a      	adds	r2, r7, r0
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	2301      	movs	r3, #1
 8004048:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800404c:	f383 8810 	msr	PRIMASK, r3
}
 8004050:	46c0      	nop			; (mov r8, r8)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2140      	movs	r1, #64	; 0x40
 800405e:	438a      	bics	r2, r1
 8004060:	609a      	str	r2, [r3, #8]
 8004062:	183b      	adds	r3, r7, r0
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800406a:	f383 8810 	msr	PRIMASK, r3
}
 800406e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004074:	2b00      	cmp	r3, #0
 8004076:	d012      	beq.n	800409e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407c:	4a14      	ldr	r2, [pc, #80]	; (80040d0 <HAL_UART_IRQHandler+0x2a0>)
 800407e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004084:	0018      	movs	r0, r3
 8004086:	f7fe f899 	bl	80021bc <HAL_DMA_Abort_IT>
 800408a:	1e03      	subs	r3, r0, #0
 800408c:	d01a      	beq.n	80040c4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	0018      	movs	r0, r3
 800409a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409c:	e012      	b.n	80040c4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	0018      	movs	r0, r3
 80040a2:	f000 f9a7 	bl	80043f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a6:	e00d      	b.n	80040c4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	0018      	movs	r0, r3
 80040ac:	f000 f9a2 	bl	80043f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b0:	e008      	b.n	80040c4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	0018      	movs	r0, r3
 80040b6:	f000 f99d 	bl	80043f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2280      	movs	r2, #128	; 0x80
 80040be:	2100      	movs	r1, #0
 80040c0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80040c2:	e181      	b.n	80043c8 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c4:	46c0      	nop			; (mov r8, r8)
    return;
 80040c6:	e17f      	b.n	80043c8 <HAL_UART_IRQHandler+0x598>
 80040c8:	0000080f 	.word	0x0000080f
 80040cc:	04000120 	.word	0x04000120
 80040d0:	08004f01 	.word	0x08004f01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d000      	beq.n	80040de <HAL_UART_IRQHandler+0x2ae>
 80040dc:	e133      	b.n	8004346 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80040de:	23a4      	movs	r3, #164	; 0xa4
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2210      	movs	r2, #16
 80040e6:	4013      	ands	r3, r2
 80040e8:	d100      	bne.n	80040ec <HAL_UART_IRQHandler+0x2bc>
 80040ea:	e12c      	b.n	8004346 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040ec:	23a0      	movs	r3, #160	; 0xa0
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2210      	movs	r2, #16
 80040f4:	4013      	ands	r3, r2
 80040f6:	d100      	bne.n	80040fa <HAL_UART_IRQHandler+0x2ca>
 80040f8:	e125      	b.n	8004346 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2210      	movs	r2, #16
 8004100:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2240      	movs	r2, #64	; 0x40
 800410a:	4013      	ands	r3, r2
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d000      	beq.n	8004112 <HAL_UART_IRQHandler+0x2e2>
 8004110:	e09d      	b.n	800424e <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	217e      	movs	r1, #126	; 0x7e
 800411c:	187b      	adds	r3, r7, r1
 800411e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004120:	187b      	adds	r3, r7, r1
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d100      	bne.n	800412a <HAL_UART_IRQHandler+0x2fa>
 8004128:	e150      	b.n	80043cc <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2258      	movs	r2, #88	; 0x58
 800412e:	5a9b      	ldrh	r3, [r3, r2]
 8004130:	187a      	adds	r2, r7, r1
 8004132:	8812      	ldrh	r2, [r2, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d300      	bcc.n	800413a <HAL_UART_IRQHandler+0x30a>
 8004138:	e148      	b.n	80043cc <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	187a      	adds	r2, r7, r1
 800413e:	215a      	movs	r1, #90	; 0x5a
 8004140:	8812      	ldrh	r2, [r2, #0]
 8004142:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2220      	movs	r2, #32
 800414e:	4013      	ands	r3, r2
 8004150:	d16e      	bne.n	8004230 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004152:	f3ef 8310 	mrs	r3, PRIMASK
 8004156:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800415a:	67bb      	str	r3, [r7, #120]	; 0x78
 800415c:	2301      	movs	r3, #1
 800415e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004162:	f383 8810 	msr	PRIMASK, r3
}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	499a      	ldr	r1, [pc, #616]	; (80043dc <HAL_UART_IRQHandler+0x5ac>)
 8004174:	400a      	ands	r2, r1
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800417a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	f383 8810 	msr	PRIMASK, r3
}
 8004182:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004184:	f3ef 8310 	mrs	r3, PRIMASK
 8004188:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800418a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418c:	677b      	str	r3, [r7, #116]	; 0x74
 800418e:	2301      	movs	r3, #1
 8004190:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004194:	f383 8810 	msr	PRIMASK, r3
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2101      	movs	r1, #1
 80041a6:	438a      	bics	r2, r1
 80041a8:	609a      	str	r2, [r3, #8]
 80041aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ac:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041b0:	f383 8810 	msr	PRIMASK, r3
}
 80041b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ba:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80041bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041be:	673b      	str	r3, [r7, #112]	; 0x70
 80041c0:	2301      	movs	r3, #1
 80041c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c6:	f383 8810 	msr	PRIMASK, r3
}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2140      	movs	r1, #64	; 0x40
 80041d8:	438a      	bics	r2, r1
 80041da:	609a      	str	r2, [r3, #8]
 80041dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041de:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041e2:	f383 8810 	msr	PRIMASK, r3
}
 80041e6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041f4:	f3ef 8310 	mrs	r3, PRIMASK
 80041f8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80041fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041fe:	2301      	movs	r3, #1
 8004200:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004204:	f383 8810 	msr	PRIMASK, r3
}
 8004208:	46c0      	nop			; (mov r8, r8)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2110      	movs	r1, #16
 8004216:	438a      	bics	r2, r1
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800421e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004220:	f383 8810 	msr	PRIMASK, r3
}
 8004224:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	0018      	movs	r0, r3
 800422c:	f7fd ff86 	bl	800213c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2258      	movs	r2, #88	; 0x58
 8004234:	5a9a      	ldrh	r2, [r3, r2]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	215a      	movs	r1, #90	; 0x5a
 800423a:	5a5b      	ldrh	r3, [r3, r1]
 800423c:	b29b      	uxth	r3, r3
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	b29a      	uxth	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	0011      	movs	r1, r2
 8004246:	0018      	movs	r0, r3
 8004248:	f000 f8dc 	bl	8004404 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800424c:	e0be      	b.n	80043cc <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2258      	movs	r2, #88	; 0x58
 8004252:	5a99      	ldrh	r1, [r3, r2]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	225a      	movs	r2, #90	; 0x5a
 8004258:	5a9b      	ldrh	r3, [r3, r2]
 800425a:	b29a      	uxth	r2, r3
 800425c:	208e      	movs	r0, #142	; 0x8e
 800425e:	183b      	adds	r3, r7, r0
 8004260:	1a8a      	subs	r2, r1, r2
 8004262:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	225a      	movs	r2, #90	; 0x5a
 8004268:	5a9b      	ldrh	r3, [r3, r2]
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d100      	bne.n	8004272 <HAL_UART_IRQHandler+0x442>
 8004270:	e0ae      	b.n	80043d0 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8004272:	183b      	adds	r3, r7, r0
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d100      	bne.n	800427c <HAL_UART_IRQHandler+0x44c>
 800427a:	e0a9      	b.n	80043d0 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800427c:	f3ef 8310 	mrs	r3, PRIMASK
 8004280:	60fb      	str	r3, [r7, #12]
  return(result);
 8004282:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004284:	2488      	movs	r4, #136	; 0x88
 8004286:	193a      	adds	r2, r7, r4
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	2301      	movs	r3, #1
 800428c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f383 8810 	msr	PRIMASK, r3
}
 8004294:	46c0      	nop			; (mov r8, r8)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	494f      	ldr	r1, [pc, #316]	; (80043e0 <HAL_UART_IRQHandler+0x5b0>)
 80042a2:	400a      	ands	r2, r1
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	193b      	adds	r3, r7, r4
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f383 8810 	msr	PRIMASK, r3
}
 80042b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042b4:	f3ef 8310 	mrs	r3, PRIMASK
 80042b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80042ba:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042bc:	2484      	movs	r4, #132	; 0x84
 80042be:	193a      	adds	r2, r7, r4
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	2301      	movs	r3, #1
 80042c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	f383 8810 	msr	PRIMASK, r3
}
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2101      	movs	r1, #1
 80042da:	438a      	bics	r2, r1
 80042dc:	609a      	str	r2, [r3, #8]
 80042de:	193b      	adds	r3, r7, r4
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	f383 8810 	msr	PRIMASK, r3
}
 80042ea:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004306:	2480      	movs	r4, #128	; 0x80
 8004308:	193a      	adds	r2, r7, r4
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	2301      	movs	r3, #1
 800430e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	f383 8810 	msr	PRIMASK, r3
}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2110      	movs	r1, #16
 8004324:	438a      	bics	r2, r1
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	193b      	adds	r3, r7, r4
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	f383 8810 	msr	PRIMASK, r3
}
 8004334:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004336:	183b      	adds	r3, r7, r0
 8004338:	881a      	ldrh	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	0011      	movs	r1, r2
 800433e:	0018      	movs	r0, r3
 8004340:	f000 f860 	bl	8004404 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004344:	e044      	b.n	80043d0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004346:	23a4      	movs	r3, #164	; 0xa4
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	2380      	movs	r3, #128	; 0x80
 800434e:	035b      	lsls	r3, r3, #13
 8004350:	4013      	ands	r3, r2
 8004352:	d010      	beq.n	8004376 <HAL_UART_IRQHandler+0x546>
 8004354:	239c      	movs	r3, #156	; 0x9c
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	2380      	movs	r3, #128	; 0x80
 800435c:	03db      	lsls	r3, r3, #15
 800435e:	4013      	ands	r3, r2
 8004360:	d009      	beq.n	8004376 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2280      	movs	r2, #128	; 0x80
 8004368:	0352      	lsls	r2, r2, #13
 800436a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	0018      	movs	r0, r3
 8004370:	f000 ff70 	bl	8005254 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004374:	e02f      	b.n	80043d6 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004376:	23a4      	movs	r3, #164	; 0xa4
 8004378:	18fb      	adds	r3, r7, r3
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2280      	movs	r2, #128	; 0x80
 800437e:	4013      	ands	r3, r2
 8004380:	d00f      	beq.n	80043a2 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004382:	23a0      	movs	r3, #160	; 0xa0
 8004384:	18fb      	adds	r3, r7, r3
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2280      	movs	r2, #128	; 0x80
 800438a:	4013      	ands	r3, r2
 800438c:	d009      	beq.n	80043a2 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01e      	beq.n	80043d4 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	0010      	movs	r0, r2
 800439e:	4798      	blx	r3
    }
    return;
 80043a0:	e018      	b.n	80043d4 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043a2:	23a4      	movs	r3, #164	; 0xa4
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2240      	movs	r2, #64	; 0x40
 80043aa:	4013      	ands	r3, r2
 80043ac:	d013      	beq.n	80043d6 <HAL_UART_IRQHandler+0x5a6>
 80043ae:	23a0      	movs	r3, #160	; 0xa0
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2240      	movs	r2, #64	; 0x40
 80043b6:	4013      	ands	r3, r2
 80043b8:	d00d      	beq.n	80043d6 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	0018      	movs	r0, r3
 80043be:	f000 fdb6 	bl	8004f2e <UART_EndTransmit_IT>
    return;
 80043c2:	e008      	b.n	80043d6 <HAL_UART_IRQHandler+0x5a6>
      return;
 80043c4:	46c0      	nop			; (mov r8, r8)
 80043c6:	e006      	b.n	80043d6 <HAL_UART_IRQHandler+0x5a6>
    return;
 80043c8:	46c0      	nop			; (mov r8, r8)
 80043ca:	e004      	b.n	80043d6 <HAL_UART_IRQHandler+0x5a6>
      return;
 80043cc:	46c0      	nop			; (mov r8, r8)
 80043ce:	e002      	b.n	80043d6 <HAL_UART_IRQHandler+0x5a6>
      return;
 80043d0:	46c0      	nop			; (mov r8, r8)
 80043d2:	e000      	b.n	80043d6 <HAL_UART_IRQHandler+0x5a6>
    return;
 80043d4:	46c0      	nop			; (mov r8, r8)
  }

}
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b02b      	add	sp, #172	; 0xac
 80043da:	bd90      	pop	{r4, r7, pc}
 80043dc:	fffffeff 	.word	0xfffffeff
 80043e0:	fffffedf 	.word	0xfffffedf

080043e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80043ec:	46c0      	nop			; (mov r8, r8)
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b002      	add	sp, #8
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043fc:	46c0      	nop			; (mov r8, r8)
 80043fe:	46bd      	mov	sp, r7
 8004400:	b002      	add	sp, #8
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	000a      	movs	r2, r1
 800440e:	1cbb      	adds	r3, r7, #2
 8004410:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	46bd      	mov	sp, r7
 8004416:	b002      	add	sp, #8
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800441c:	b5b0      	push	{r4, r5, r7, lr}
 800441e:	b08e      	sub	sp, #56	; 0x38
 8004420:	af00      	add	r7, sp, #0
 8004422:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004424:	231a      	movs	r3, #26
 8004426:	2218      	movs	r2, #24
 8004428:	4694      	mov	ip, r2
 800442a:	44bc      	add	ip, r7
 800442c:	4463      	add	r3, ip
 800442e:	2200      	movs	r2, #0
 8004430:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	431a      	orrs	r2, r3
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	431a      	orrs	r2, r3
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	4313      	orrs	r3, r2
 8004448:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4ac1      	ldr	r2, [pc, #772]	; (8004758 <UART_SetConfig+0x33c>)
 8004452:	4013      	ands	r3, r2
 8004454:	0019      	movs	r1, r3
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800445c:	430a      	orrs	r2, r1
 800445e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	4abd      	ldr	r2, [pc, #756]	; (800475c <UART_SetConfig+0x340>)
 8004468:	4013      	ands	r3, r2
 800446a:	0019      	movs	r1, r3
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4ab7      	ldr	r2, [pc, #732]	; (8004760 <UART_SetConfig+0x344>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d004      	beq.n	8004492 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800448e:	4313      	orrs	r3, r2
 8004490:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	4ab2      	ldr	r2, [pc, #712]	; (8004764 <UART_SetConfig+0x348>)
 800449a:	4013      	ands	r3, r2
 800449c:	0019      	movs	r1, r3
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044a4:	430a      	orrs	r2, r1
 80044a6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4aae      	ldr	r2, [pc, #696]	; (8004768 <UART_SetConfig+0x34c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d136      	bne.n	8004520 <UART_SetConfig+0x104>
 80044b2:	4bae      	ldr	r3, [pc, #696]	; (800476c <UART_SetConfig+0x350>)
 80044b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b6:	2203      	movs	r2, #3
 80044b8:	4013      	ands	r3, r2
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	d020      	beq.n	8004500 <UART_SetConfig+0xe4>
 80044be:	d827      	bhi.n	8004510 <UART_SetConfig+0xf4>
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d00d      	beq.n	80044e0 <UART_SetConfig+0xc4>
 80044c4:	d824      	bhi.n	8004510 <UART_SetConfig+0xf4>
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <UART_SetConfig+0xb4>
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d010      	beq.n	80044f0 <UART_SetConfig+0xd4>
 80044ce:	e01f      	b.n	8004510 <UART_SetConfig+0xf4>
 80044d0:	231b      	movs	r3, #27
 80044d2:	2218      	movs	r2, #24
 80044d4:	4694      	mov	ip, r2
 80044d6:	44bc      	add	ip, r7
 80044d8:	4463      	add	r3, ip
 80044da:	2201      	movs	r2, #1
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	e0ab      	b.n	8004638 <UART_SetConfig+0x21c>
 80044e0:	231b      	movs	r3, #27
 80044e2:	2218      	movs	r2, #24
 80044e4:	4694      	mov	ip, r2
 80044e6:	44bc      	add	ip, r7
 80044e8:	4463      	add	r3, ip
 80044ea:	2202      	movs	r2, #2
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	e0a3      	b.n	8004638 <UART_SetConfig+0x21c>
 80044f0:	231b      	movs	r3, #27
 80044f2:	2218      	movs	r2, #24
 80044f4:	4694      	mov	ip, r2
 80044f6:	44bc      	add	ip, r7
 80044f8:	4463      	add	r3, ip
 80044fa:	2204      	movs	r2, #4
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	e09b      	b.n	8004638 <UART_SetConfig+0x21c>
 8004500:	231b      	movs	r3, #27
 8004502:	2218      	movs	r2, #24
 8004504:	4694      	mov	ip, r2
 8004506:	44bc      	add	ip, r7
 8004508:	4463      	add	r3, ip
 800450a:	2208      	movs	r2, #8
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	e093      	b.n	8004638 <UART_SetConfig+0x21c>
 8004510:	231b      	movs	r3, #27
 8004512:	2218      	movs	r2, #24
 8004514:	4694      	mov	ip, r2
 8004516:	44bc      	add	ip, r7
 8004518:	4463      	add	r3, ip
 800451a:	2210      	movs	r2, #16
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	e08b      	b.n	8004638 <UART_SetConfig+0x21c>
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a92      	ldr	r2, [pc, #584]	; (8004770 <UART_SetConfig+0x354>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d136      	bne.n	8004598 <UART_SetConfig+0x17c>
 800452a:	4b90      	ldr	r3, [pc, #576]	; (800476c <UART_SetConfig+0x350>)
 800452c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452e:	220c      	movs	r2, #12
 8004530:	4013      	ands	r3, r2
 8004532:	2b0c      	cmp	r3, #12
 8004534:	d020      	beq.n	8004578 <UART_SetConfig+0x15c>
 8004536:	d827      	bhi.n	8004588 <UART_SetConfig+0x16c>
 8004538:	2b08      	cmp	r3, #8
 800453a:	d00d      	beq.n	8004558 <UART_SetConfig+0x13c>
 800453c:	d824      	bhi.n	8004588 <UART_SetConfig+0x16c>
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <UART_SetConfig+0x12c>
 8004542:	2b04      	cmp	r3, #4
 8004544:	d010      	beq.n	8004568 <UART_SetConfig+0x14c>
 8004546:	e01f      	b.n	8004588 <UART_SetConfig+0x16c>
 8004548:	231b      	movs	r3, #27
 800454a:	2218      	movs	r2, #24
 800454c:	4694      	mov	ip, r2
 800454e:	44bc      	add	ip, r7
 8004550:	4463      	add	r3, ip
 8004552:	2200      	movs	r2, #0
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	e06f      	b.n	8004638 <UART_SetConfig+0x21c>
 8004558:	231b      	movs	r3, #27
 800455a:	2218      	movs	r2, #24
 800455c:	4694      	mov	ip, r2
 800455e:	44bc      	add	ip, r7
 8004560:	4463      	add	r3, ip
 8004562:	2202      	movs	r2, #2
 8004564:	701a      	strb	r2, [r3, #0]
 8004566:	e067      	b.n	8004638 <UART_SetConfig+0x21c>
 8004568:	231b      	movs	r3, #27
 800456a:	2218      	movs	r2, #24
 800456c:	4694      	mov	ip, r2
 800456e:	44bc      	add	ip, r7
 8004570:	4463      	add	r3, ip
 8004572:	2204      	movs	r2, #4
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	e05f      	b.n	8004638 <UART_SetConfig+0x21c>
 8004578:	231b      	movs	r3, #27
 800457a:	2218      	movs	r2, #24
 800457c:	4694      	mov	ip, r2
 800457e:	44bc      	add	ip, r7
 8004580:	4463      	add	r3, ip
 8004582:	2208      	movs	r2, #8
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	e057      	b.n	8004638 <UART_SetConfig+0x21c>
 8004588:	231b      	movs	r3, #27
 800458a:	2218      	movs	r2, #24
 800458c:	4694      	mov	ip, r2
 800458e:	44bc      	add	ip, r7
 8004590:	4463      	add	r3, ip
 8004592:	2210      	movs	r2, #16
 8004594:	701a      	strb	r2, [r3, #0]
 8004596:	e04f      	b.n	8004638 <UART_SetConfig+0x21c>
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a70      	ldr	r2, [pc, #448]	; (8004760 <UART_SetConfig+0x344>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d143      	bne.n	800462a <UART_SetConfig+0x20e>
 80045a2:	4b72      	ldr	r3, [pc, #456]	; (800476c <UART_SetConfig+0x350>)
 80045a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045a6:	23c0      	movs	r3, #192	; 0xc0
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	4013      	ands	r3, r2
 80045ac:	22c0      	movs	r2, #192	; 0xc0
 80045ae:	0112      	lsls	r2, r2, #4
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d02a      	beq.n	800460a <UART_SetConfig+0x1ee>
 80045b4:	22c0      	movs	r2, #192	; 0xc0
 80045b6:	0112      	lsls	r2, r2, #4
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d82e      	bhi.n	800461a <UART_SetConfig+0x1fe>
 80045bc:	2280      	movs	r2, #128	; 0x80
 80045be:	0112      	lsls	r2, r2, #4
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d012      	beq.n	80045ea <UART_SetConfig+0x1ce>
 80045c4:	2280      	movs	r2, #128	; 0x80
 80045c6:	0112      	lsls	r2, r2, #4
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d826      	bhi.n	800461a <UART_SetConfig+0x1fe>
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d004      	beq.n	80045da <UART_SetConfig+0x1be>
 80045d0:	2280      	movs	r2, #128	; 0x80
 80045d2:	00d2      	lsls	r2, r2, #3
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d010      	beq.n	80045fa <UART_SetConfig+0x1de>
 80045d8:	e01f      	b.n	800461a <UART_SetConfig+0x1fe>
 80045da:	231b      	movs	r3, #27
 80045dc:	2218      	movs	r2, #24
 80045de:	4694      	mov	ip, r2
 80045e0:	44bc      	add	ip, r7
 80045e2:	4463      	add	r3, ip
 80045e4:	2200      	movs	r2, #0
 80045e6:	701a      	strb	r2, [r3, #0]
 80045e8:	e026      	b.n	8004638 <UART_SetConfig+0x21c>
 80045ea:	231b      	movs	r3, #27
 80045ec:	2218      	movs	r2, #24
 80045ee:	4694      	mov	ip, r2
 80045f0:	44bc      	add	ip, r7
 80045f2:	4463      	add	r3, ip
 80045f4:	2202      	movs	r2, #2
 80045f6:	701a      	strb	r2, [r3, #0]
 80045f8:	e01e      	b.n	8004638 <UART_SetConfig+0x21c>
 80045fa:	231b      	movs	r3, #27
 80045fc:	2218      	movs	r2, #24
 80045fe:	4694      	mov	ip, r2
 8004600:	44bc      	add	ip, r7
 8004602:	4463      	add	r3, ip
 8004604:	2204      	movs	r2, #4
 8004606:	701a      	strb	r2, [r3, #0]
 8004608:	e016      	b.n	8004638 <UART_SetConfig+0x21c>
 800460a:	231b      	movs	r3, #27
 800460c:	2218      	movs	r2, #24
 800460e:	4694      	mov	ip, r2
 8004610:	44bc      	add	ip, r7
 8004612:	4463      	add	r3, ip
 8004614:	2208      	movs	r2, #8
 8004616:	701a      	strb	r2, [r3, #0]
 8004618:	e00e      	b.n	8004638 <UART_SetConfig+0x21c>
 800461a:	231b      	movs	r3, #27
 800461c:	2218      	movs	r2, #24
 800461e:	4694      	mov	ip, r2
 8004620:	44bc      	add	ip, r7
 8004622:	4463      	add	r3, ip
 8004624:	2210      	movs	r2, #16
 8004626:	701a      	strb	r2, [r3, #0]
 8004628:	e006      	b.n	8004638 <UART_SetConfig+0x21c>
 800462a:	231b      	movs	r3, #27
 800462c:	2218      	movs	r2, #24
 800462e:	4694      	mov	ip, r2
 8004630:	44bc      	add	ip, r7
 8004632:	4463      	add	r3, ip
 8004634:	2210      	movs	r2, #16
 8004636:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a48      	ldr	r2, [pc, #288]	; (8004760 <UART_SetConfig+0x344>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d000      	beq.n	8004644 <UART_SetConfig+0x228>
 8004642:	e09b      	b.n	800477c <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004644:	231b      	movs	r3, #27
 8004646:	2218      	movs	r2, #24
 8004648:	4694      	mov	ip, r2
 800464a:	44bc      	add	ip, r7
 800464c:	4463      	add	r3, ip
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b08      	cmp	r3, #8
 8004652:	d01d      	beq.n	8004690 <UART_SetConfig+0x274>
 8004654:	dc20      	bgt.n	8004698 <UART_SetConfig+0x27c>
 8004656:	2b04      	cmp	r3, #4
 8004658:	d015      	beq.n	8004686 <UART_SetConfig+0x26a>
 800465a:	dc1d      	bgt.n	8004698 <UART_SetConfig+0x27c>
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <UART_SetConfig+0x24a>
 8004660:	2b02      	cmp	r3, #2
 8004662:	d005      	beq.n	8004670 <UART_SetConfig+0x254>
 8004664:	e018      	b.n	8004698 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004666:	f7fe fd41 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 800466a:	0003      	movs	r3, r0
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800466e:	e01d      	b.n	80046ac <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004670:	4b3e      	ldr	r3, [pc, #248]	; (800476c <UART_SetConfig+0x350>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2210      	movs	r2, #16
 8004676:	4013      	ands	r3, r2
 8004678:	d002      	beq.n	8004680 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800467a:	4b3e      	ldr	r3, [pc, #248]	; (8004774 <UART_SetConfig+0x358>)
 800467c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800467e:	e015      	b.n	80046ac <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8004680:	4b3d      	ldr	r3, [pc, #244]	; (8004778 <UART_SetConfig+0x35c>)
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004684:	e012      	b.n	80046ac <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004686:	f7fe fc81 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 800468a:	0003      	movs	r3, r0
 800468c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800468e:	e00d      	b.n	80046ac <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004690:	2380      	movs	r3, #128	; 0x80
 8004692:	021b      	lsls	r3, r3, #8
 8004694:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004696:	e009      	b.n	80046ac <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800469c:	231a      	movs	r3, #26
 800469e:	2218      	movs	r2, #24
 80046a0:	4694      	mov	ip, r2
 80046a2:	44bc      	add	ip, r7
 80046a4:	4463      	add	r3, ip
 80046a6:	2201      	movs	r2, #1
 80046a8:	701a      	strb	r2, [r3, #0]
        break;
 80046aa:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d100      	bne.n	80046b4 <UART_SetConfig+0x298>
 80046b2:	e139      	b.n	8004928 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	0013      	movs	r3, r2
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	189b      	adds	r3, r3, r2
 80046be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d305      	bcc.n	80046d0 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d907      	bls.n	80046e0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80046d0:	231a      	movs	r3, #26
 80046d2:	2218      	movs	r2, #24
 80046d4:	4694      	mov	ip, r2
 80046d6:	44bc      	add	ip, r7
 80046d8:	4463      	add	r3, ip
 80046da:	2201      	movs	r2, #1
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	e123      	b.n	8004928 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	6939      	ldr	r1, [r7, #16]
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	000b      	movs	r3, r1
 80046ee:	0e1b      	lsrs	r3, r3, #24
 80046f0:	0010      	movs	r0, r2
 80046f2:	0205      	lsls	r5, r0, #8
 80046f4:	431d      	orrs	r5, r3
 80046f6:	000b      	movs	r3, r1
 80046f8:	021c      	lsls	r4, r3, #8
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	085b      	lsrs	r3, r3, #1
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	68b8      	ldr	r0, [r7, #8]
 8004708:	68f9      	ldr	r1, [r7, #12]
 800470a:	1900      	adds	r0, r0, r4
 800470c:	4169      	adcs	r1, r5
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	2300      	movs	r3, #0
 8004716:	607b      	str	r3, [r7, #4]
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f7fb fd80 	bl	8000220 <__aeabi_uldivmod>
 8004720:	0002      	movs	r2, r0
 8004722:	000b      	movs	r3, r1
 8004724:	0013      	movs	r3, r2
 8004726:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800472a:	23c0      	movs	r3, #192	; 0xc0
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	429a      	cmp	r2, r3
 8004730:	d309      	bcc.n	8004746 <UART_SetConfig+0x32a>
 8004732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004734:	2380      	movs	r3, #128	; 0x80
 8004736:	035b      	lsls	r3, r3, #13
 8004738:	429a      	cmp	r2, r3
 800473a:	d204      	bcs.n	8004746 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004742:	60da      	str	r2, [r3, #12]
 8004744:	e0f0      	b.n	8004928 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8004746:	231a      	movs	r3, #26
 8004748:	2218      	movs	r2, #24
 800474a:	4694      	mov	ip, r2
 800474c:	44bc      	add	ip, r7
 800474e:	4463      	add	r3, ip
 8004750:	2201      	movs	r2, #1
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	e0e8      	b.n	8004928 <UART_SetConfig+0x50c>
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	efff69f3 	.word	0xefff69f3
 800475c:	ffffcfff 	.word	0xffffcfff
 8004760:	40004800 	.word	0x40004800
 8004764:	fffff4ff 	.word	0xfffff4ff
 8004768:	40013800 	.word	0x40013800
 800476c:	40021000 	.word	0x40021000
 8004770:	40004400 	.word	0x40004400
 8004774:	003d0900 	.word	0x003d0900
 8004778:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	2380      	movs	r3, #128	; 0x80
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	429a      	cmp	r2, r3
 8004786:	d000      	beq.n	800478a <UART_SetConfig+0x36e>
 8004788:	e074      	b.n	8004874 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800478a:	231b      	movs	r3, #27
 800478c:	2218      	movs	r2, #24
 800478e:	4694      	mov	ip, r2
 8004790:	44bc      	add	ip, r7
 8004792:	4463      	add	r3, ip
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b08      	cmp	r3, #8
 8004798:	d822      	bhi.n	80047e0 <UART_SetConfig+0x3c4>
 800479a:	009a      	lsls	r2, r3, #2
 800479c:	4b6a      	ldr	r3, [pc, #424]	; (8004948 <UART_SetConfig+0x52c>)
 800479e:	18d3      	adds	r3, r2, r3
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a4:	f7fe fca2 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 80047a8:	0003      	movs	r3, r0
 80047aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047ac:	e022      	b.n	80047f4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047ae:	f7fe fcb3 	bl	8003118 <HAL_RCC_GetPCLK2Freq>
 80047b2:	0003      	movs	r3, r0
 80047b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047b6:	e01d      	b.n	80047f4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047b8:	4b64      	ldr	r3, [pc, #400]	; (800494c <UART_SetConfig+0x530>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2210      	movs	r2, #16
 80047be:	4013      	ands	r3, r2
 80047c0:	d002      	beq.n	80047c8 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80047c2:	4b63      	ldr	r3, [pc, #396]	; (8004950 <UART_SetConfig+0x534>)
 80047c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80047c6:	e015      	b.n	80047f4 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 80047c8:	4b62      	ldr	r3, [pc, #392]	; (8004954 <UART_SetConfig+0x538>)
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047cc:	e012      	b.n	80047f4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ce:	f7fe fbdd 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 80047d2:	0003      	movs	r3, r0
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047d6:	e00d      	b.n	80047f4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047d8:	2380      	movs	r3, #128	; 0x80
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047de:	e009      	b.n	80047f4 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80047e4:	231a      	movs	r3, #26
 80047e6:	2218      	movs	r2, #24
 80047e8:	4694      	mov	ip, r2
 80047ea:	44bc      	add	ip, r7
 80047ec:	4463      	add	r3, ip
 80047ee:	2201      	movs	r2, #1
 80047f0:	701a      	strb	r2, [r3, #0]
        break;
 80047f2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d100      	bne.n	80047fc <UART_SetConfig+0x3e0>
 80047fa:	e095      	b.n	8004928 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fe:	005a      	lsls	r2, r3, #1
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	085b      	lsrs	r3, r3, #1
 8004806:	18d2      	adds	r2, r2, r3
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	0019      	movs	r1, r3
 800480e:	0010      	movs	r0, r2
 8004810:	f7fb fc7a 	bl	8000108 <__udivsi3>
 8004814:	0003      	movs	r3, r0
 8004816:	b29b      	uxth	r3, r3
 8004818:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481c:	2b0f      	cmp	r3, #15
 800481e:	d921      	bls.n	8004864 <UART_SetConfig+0x448>
 8004820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004822:	2380      	movs	r3, #128	; 0x80
 8004824:	025b      	lsls	r3, r3, #9
 8004826:	429a      	cmp	r2, r3
 8004828:	d21c      	bcs.n	8004864 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482c:	b29a      	uxth	r2, r3
 800482e:	200e      	movs	r0, #14
 8004830:	2418      	movs	r4, #24
 8004832:	193b      	adds	r3, r7, r4
 8004834:	181b      	adds	r3, r3, r0
 8004836:	210f      	movs	r1, #15
 8004838:	438a      	bics	r2, r1
 800483a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	085b      	lsrs	r3, r3, #1
 8004840:	b29b      	uxth	r3, r3
 8004842:	2207      	movs	r2, #7
 8004844:	4013      	ands	r3, r2
 8004846:	b299      	uxth	r1, r3
 8004848:	193b      	adds	r3, r7, r4
 800484a:	181b      	adds	r3, r3, r0
 800484c:	193a      	adds	r2, r7, r4
 800484e:	1812      	adds	r2, r2, r0
 8004850:	8812      	ldrh	r2, [r2, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	193a      	adds	r2, r7, r4
 800485c:	1812      	adds	r2, r2, r0
 800485e:	8812      	ldrh	r2, [r2, #0]
 8004860:	60da      	str	r2, [r3, #12]
 8004862:	e061      	b.n	8004928 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8004864:	231a      	movs	r3, #26
 8004866:	2218      	movs	r2, #24
 8004868:	4694      	mov	ip, r2
 800486a:	44bc      	add	ip, r7
 800486c:	4463      	add	r3, ip
 800486e:	2201      	movs	r2, #1
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	e059      	b.n	8004928 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004874:	231b      	movs	r3, #27
 8004876:	2218      	movs	r2, #24
 8004878:	4694      	mov	ip, r2
 800487a:	44bc      	add	ip, r7
 800487c:	4463      	add	r3, ip
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b08      	cmp	r3, #8
 8004882:	d822      	bhi.n	80048ca <UART_SetConfig+0x4ae>
 8004884:	009a      	lsls	r2, r3, #2
 8004886:	4b34      	ldr	r3, [pc, #208]	; (8004958 <UART_SetConfig+0x53c>)
 8004888:	18d3      	adds	r3, r2, r3
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800488e:	f7fe fc2d 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8004892:	0003      	movs	r3, r0
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004896:	e022      	b.n	80048de <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004898:	f7fe fc3e 	bl	8003118 <HAL_RCC_GetPCLK2Freq>
 800489c:	0003      	movs	r3, r0
 800489e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048a0:	e01d      	b.n	80048de <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048a2:	4b2a      	ldr	r3, [pc, #168]	; (800494c <UART_SetConfig+0x530>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2210      	movs	r2, #16
 80048a8:	4013      	ands	r3, r2
 80048aa:	d002      	beq.n	80048b2 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80048ac:	4b28      	ldr	r3, [pc, #160]	; (8004950 <UART_SetConfig+0x534>)
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80048b0:	e015      	b.n	80048de <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80048b2:	4b28      	ldr	r3, [pc, #160]	; (8004954 <UART_SetConfig+0x538>)
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048b6:	e012      	b.n	80048de <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b8:	f7fe fb68 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 80048bc:	0003      	movs	r3, r0
 80048be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048c0:	e00d      	b.n	80048de <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048c2:	2380      	movs	r3, #128	; 0x80
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048c8:	e009      	b.n	80048de <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80048ce:	231a      	movs	r3, #26
 80048d0:	2218      	movs	r2, #24
 80048d2:	4694      	mov	ip, r2
 80048d4:	44bc      	add	ip, r7
 80048d6:	4463      	add	r3, ip
 80048d8:	2201      	movs	r2, #1
 80048da:	701a      	strb	r2, [r3, #0]
        break;
 80048dc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80048de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d021      	beq.n	8004928 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	085a      	lsrs	r2, r3, #1
 80048ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ec:	18d2      	adds	r2, r2, r3
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	0019      	movs	r1, r3
 80048f4:	0010      	movs	r0, r2
 80048f6:	f7fb fc07 	bl	8000108 <__udivsi3>
 80048fa:	0003      	movs	r3, r0
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	2b0f      	cmp	r3, #15
 8004904:	d909      	bls.n	800491a <UART_SetConfig+0x4fe>
 8004906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	025b      	lsls	r3, r3, #9
 800490c:	429a      	cmp	r2, r3
 800490e:	d204      	bcs.n	800491a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004916:	60da      	str	r2, [r3, #12]
 8004918:	e006      	b.n	8004928 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800491a:	231a      	movs	r3, #26
 800491c:	2218      	movs	r2, #24
 800491e:	4694      	mov	ip, r2
 8004920:	44bc      	add	ip, r7
 8004922:	4463      	add	r3, ip
 8004924:	2201      	movs	r2, #1
 8004926:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	2200      	movs	r2, #0
 800492c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	2200      	movs	r2, #0
 8004932:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004934:	231a      	movs	r3, #26
 8004936:	2218      	movs	r2, #24
 8004938:	4694      	mov	ip, r2
 800493a:	44bc      	add	ip, r7
 800493c:	4463      	add	r3, ip
 800493e:	781b      	ldrb	r3, [r3, #0]
}
 8004940:	0018      	movs	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	b00e      	add	sp, #56	; 0x38
 8004946:	bdb0      	pop	{r4, r5, r7, pc}
 8004948:	080053f0 	.word	0x080053f0
 800494c:	40021000 	.word	0x40021000
 8004950:	003d0900 	.word	0x003d0900
 8004954:	00f42400 	.word	0x00f42400
 8004958:	08005414 	.word	0x08005414

0800495c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	2201      	movs	r2, #1
 800496a:	4013      	ands	r3, r2
 800496c:	d00b      	beq.n	8004986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4a4a      	ldr	r2, [pc, #296]	; (8004aa0 <UART_AdvFeatureConfig+0x144>)
 8004976:	4013      	ands	r3, r2
 8004978:	0019      	movs	r1, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	2202      	movs	r2, #2
 800498c:	4013      	ands	r3, r2
 800498e:	d00b      	beq.n	80049a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4a43      	ldr	r2, [pc, #268]	; (8004aa4 <UART_AdvFeatureConfig+0x148>)
 8004998:	4013      	ands	r3, r2
 800499a:	0019      	movs	r1, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	2204      	movs	r2, #4
 80049ae:	4013      	ands	r3, r2
 80049b0:	d00b      	beq.n	80049ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4a3b      	ldr	r2, [pc, #236]	; (8004aa8 <UART_AdvFeatureConfig+0x14c>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	0019      	movs	r1, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	2208      	movs	r2, #8
 80049d0:	4013      	ands	r3, r2
 80049d2:	d00b      	beq.n	80049ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	4a34      	ldr	r2, [pc, #208]	; (8004aac <UART_AdvFeatureConfig+0x150>)
 80049dc:	4013      	ands	r3, r2
 80049de:	0019      	movs	r1, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	2210      	movs	r2, #16
 80049f2:	4013      	ands	r3, r2
 80049f4:	d00b      	beq.n	8004a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	4a2c      	ldr	r2, [pc, #176]	; (8004ab0 <UART_AdvFeatureConfig+0x154>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	0019      	movs	r1, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	2220      	movs	r2, #32
 8004a14:	4013      	ands	r3, r2
 8004a16:	d00b      	beq.n	8004a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	4a25      	ldr	r2, [pc, #148]	; (8004ab4 <UART_AdvFeatureConfig+0x158>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	0019      	movs	r1, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	2240      	movs	r2, #64	; 0x40
 8004a36:	4013      	ands	r3, r2
 8004a38:	d01d      	beq.n	8004a76 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4a1d      	ldr	r2, [pc, #116]	; (8004ab8 <UART_AdvFeatureConfig+0x15c>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	0019      	movs	r1, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a56:	2380      	movs	r3, #128	; 0x80
 8004a58:	035b      	lsls	r3, r3, #13
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d10b      	bne.n	8004a76 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	4a15      	ldr	r2, [pc, #84]	; (8004abc <UART_AdvFeatureConfig+0x160>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	0019      	movs	r1, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	2280      	movs	r2, #128	; 0x80
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d00b      	beq.n	8004a98 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	4a0e      	ldr	r2, [pc, #56]	; (8004ac0 <UART_AdvFeatureConfig+0x164>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	0019      	movs	r1, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	605a      	str	r2, [r3, #4]
  }
}
 8004a98:	46c0      	nop			; (mov r8, r8)
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	b002      	add	sp, #8
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	fffdffff 	.word	0xfffdffff
 8004aa4:	fffeffff 	.word	0xfffeffff
 8004aa8:	fffbffff 	.word	0xfffbffff
 8004aac:	ffff7fff 	.word	0xffff7fff
 8004ab0:	ffffefff 	.word	0xffffefff
 8004ab4:	ffffdfff 	.word	0xffffdfff
 8004ab8:	ffefffff 	.word	0xffefffff
 8004abc:	ff9fffff 	.word	0xff9fffff
 8004ac0:	fff7ffff 	.word	0xfff7ffff

08004ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2280      	movs	r2, #128	; 0x80
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ad4:	f7fd fa4a 	bl	8001f6c <HAL_GetTick>
 8004ad8:	0003      	movs	r3, r0
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2208      	movs	r2, #8
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d10c      	bne.n	8004b04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2280      	movs	r2, #128	; 0x80
 8004aee:	0391      	lsls	r1, r2, #14
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	4a17      	ldr	r2, [pc, #92]	; (8004b50 <UART_CheckIdleState+0x8c>)
 8004af4:	9200      	str	r2, [sp, #0]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f000 f82c 	bl	8004b54 <UART_WaitOnFlagUntilTimeout>
 8004afc:	1e03      	subs	r3, r0, #0
 8004afe:	d001      	beq.n	8004b04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e021      	b.n	8004b48 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d10c      	bne.n	8004b2c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2280      	movs	r2, #128	; 0x80
 8004b16:	03d1      	lsls	r1, r2, #15
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	4a0d      	ldr	r2, [pc, #52]	; (8004b50 <UART_CheckIdleState+0x8c>)
 8004b1c:	9200      	str	r2, [sp, #0]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f000 f818 	bl	8004b54 <UART_WaitOnFlagUntilTimeout>
 8004b24:	1e03      	subs	r3, r0, #0
 8004b26:	d001      	beq.n	8004b2c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e00d      	b.n	8004b48 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2220      	movs	r2, #32
 8004b36:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2274      	movs	r2, #116	; 0x74
 8004b42:	2100      	movs	r1, #0
 8004b44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	0018      	movs	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b004      	add	sp, #16
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	01ffffff 	.word	0x01ffffff

08004b54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b094      	sub	sp, #80	; 0x50
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	1dfb      	adds	r3, r7, #7
 8004b62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b64:	e0a3      	b.n	8004cae <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b68:	3301      	adds	r3, #1
 8004b6a:	d100      	bne.n	8004b6e <UART_WaitOnFlagUntilTimeout+0x1a>
 8004b6c:	e09f      	b.n	8004cae <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6e:	f7fd f9fd 	bl	8001f6c <HAL_GetTick>
 8004b72:	0002      	movs	r2, r0
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d302      	bcc.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d13d      	bne.n	8004c00 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b84:	f3ef 8310 	mrs	r3, PRIMASK
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b8e:	2301      	movs	r3, #1
 8004b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b94:	f383 8810 	msr	PRIMASK, r3
}
 8004b98:	46c0      	nop			; (mov r8, r8)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	494c      	ldr	r1, [pc, #304]	; (8004cd8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004ba6:	400a      	ands	r2, r1
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bac:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb0:	f383 8810 	msr	PRIMASK, r3
}
 8004bb4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bba:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bbe:	643b      	str	r3, [r7, #64]	; 0x40
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc6:	f383 8810 	msr	PRIMASK, r3
}
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	438a      	bics	r2, r1
 8004bda:	609a      	str	r2, [r3, #8]
 8004bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be2:	f383 8810 	msr	PRIMASK, r3
}
 8004be6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2220      	movs	r2, #32
 8004bec:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2274      	movs	r2, #116	; 0x74
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e067      	b.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2204      	movs	r2, #4
 8004c08:	4013      	ands	r3, r2
 8004c0a:	d050      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	69da      	ldr	r2, [r3, #28]
 8004c12:	2380      	movs	r3, #128	; 0x80
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	401a      	ands	r2, r3
 8004c18:	2380      	movs	r3, #128	; 0x80
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d146      	bne.n	8004cae <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2280      	movs	r2, #128	; 0x80
 8004c26:	0112      	lsls	r2, r2, #4
 8004c28:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c2e:	613b      	str	r3, [r7, #16]
  return(result);
 8004c30:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c34:	2301      	movs	r3, #1
 8004c36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f383 8810 	msr	PRIMASK, r3
}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4923      	ldr	r1, [pc, #140]	; (8004cd8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004c4c:	400a      	ands	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	f383 8810 	msr	PRIMASK, r3
}
 8004c5a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c60:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c62:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c64:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c66:	2301      	movs	r3, #1
 8004c68:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	f383 8810 	msr	PRIMASK, r3
}
 8004c70:	46c0      	nop			; (mov r8, r8)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	438a      	bics	r2, r1
 8004c80:	609a      	str	r2, [r3, #8]
 8004c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	f383 8810 	msr	PRIMASK, r3
}
 8004c8c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2220      	movs	r2, #32
 8004c92:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2220      	movs	r2, #32
 8004c98:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2280      	movs	r2, #128	; 0x80
 8004c9e:	2120      	movs	r1, #32
 8004ca0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2274      	movs	r2, #116	; 0x74
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e010      	b.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	425a      	negs	r2, r3
 8004cbe:	4153      	adcs	r3, r2
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	001a      	movs	r2, r3
 8004cc4:	1dfb      	adds	r3, r7, #7
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d100      	bne.n	8004cce <UART_WaitOnFlagUntilTimeout+0x17a>
 8004ccc:	e74b      	b.n	8004b66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b014      	add	sp, #80	; 0x50
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	fffffe5f 	.word	0xfffffe5f

08004cdc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08c      	sub	sp, #48	; 0x30
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	1dbb      	adds	r3, r7, #6
 8004ce8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	1dba      	adds	r2, r7, #6
 8004cf4:	2158      	movs	r1, #88	; 0x58
 8004cf6:	8812      	ldrh	r2, [r2, #0]
 8004cf8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1dba      	adds	r2, r7, #6
 8004cfe:	215a      	movs	r1, #90	; 0x5a
 8004d00:	8812      	ldrh	r2, [r2, #0]
 8004d02:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	2380      	movs	r3, #128	; 0x80
 8004d10:	015b      	lsls	r3, r3, #5
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d10d      	bne.n	8004d32 <UART_Start_Receive_IT+0x56>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d104      	bne.n	8004d28 <UART_Start_Receive_IT+0x4c>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	225c      	movs	r2, #92	; 0x5c
 8004d22:	4943      	ldr	r1, [pc, #268]	; (8004e30 <UART_Start_Receive_IT+0x154>)
 8004d24:	5299      	strh	r1, [r3, r2]
 8004d26:	e02e      	b.n	8004d86 <UART_Start_Receive_IT+0xaa>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	225c      	movs	r2, #92	; 0x5c
 8004d2c:	21ff      	movs	r1, #255	; 0xff
 8004d2e:	5299      	strh	r1, [r3, r2]
 8004d30:	e029      	b.n	8004d86 <UART_Start_Receive_IT+0xaa>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10d      	bne.n	8004d56 <UART_Start_Receive_IT+0x7a>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d104      	bne.n	8004d4c <UART_Start_Receive_IT+0x70>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	225c      	movs	r2, #92	; 0x5c
 8004d46:	21ff      	movs	r1, #255	; 0xff
 8004d48:	5299      	strh	r1, [r3, r2]
 8004d4a:	e01c      	b.n	8004d86 <UART_Start_Receive_IT+0xaa>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	225c      	movs	r2, #92	; 0x5c
 8004d50:	217f      	movs	r1, #127	; 0x7f
 8004d52:	5299      	strh	r1, [r3, r2]
 8004d54:	e017      	b.n	8004d86 <UART_Start_Receive_IT+0xaa>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	2380      	movs	r3, #128	; 0x80
 8004d5c:	055b      	lsls	r3, r3, #21
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d10d      	bne.n	8004d7e <UART_Start_Receive_IT+0xa2>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d104      	bne.n	8004d74 <UART_Start_Receive_IT+0x98>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	225c      	movs	r2, #92	; 0x5c
 8004d6e:	217f      	movs	r1, #127	; 0x7f
 8004d70:	5299      	strh	r1, [r3, r2]
 8004d72:	e008      	b.n	8004d86 <UART_Start_Receive_IT+0xaa>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	225c      	movs	r2, #92	; 0x5c
 8004d78:	213f      	movs	r1, #63	; 0x3f
 8004d7a:	5299      	strh	r1, [r3, r2]
 8004d7c:	e003      	b.n	8004d86 <UART_Start_Receive_IT+0xaa>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	225c      	movs	r2, #92	; 0x5c
 8004d82:	2100      	movs	r1, #0
 8004d84:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2280      	movs	r2, #128	; 0x80
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2222      	movs	r2, #34	; 0x22
 8004d92:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d94:	f3ef 8310 	mrs	r3, PRIMASK
 8004d98:	61fb      	str	r3, [r7, #28]
  return(result);
 8004d9a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d9e:	2301      	movs	r3, #1
 8004da0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	f383 8810 	msr	PRIMASK, r3
}
 8004da8:	46c0      	nop			; (mov r8, r8)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2101      	movs	r1, #1
 8004db6:	430a      	orrs	r2, r1
 8004db8:	609a      	str	r2, [r3, #8]
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	f383 8810 	msr	PRIMASK, r3
}
 8004dc4:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	2380      	movs	r3, #128	; 0x80
 8004dcc:	015b      	lsls	r3, r3, #5
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d107      	bne.n	8004de2 <UART_Start_Receive_IT+0x106>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d103      	bne.n	8004de2 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4a15      	ldr	r2, [pc, #84]	; (8004e34 <UART_Start_Receive_IT+0x158>)
 8004dde:	665a      	str	r2, [r3, #100]	; 0x64
 8004de0:	e002      	b.n	8004de8 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4a14      	ldr	r2, [pc, #80]	; (8004e38 <UART_Start_Receive_IT+0x15c>)
 8004de6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2274      	movs	r2, #116	; 0x74
 8004dec:	2100      	movs	r1, #0
 8004dee:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df0:	f3ef 8310 	mrs	r3, PRIMASK
 8004df4:	613b      	str	r3, [r7, #16]
  return(result);
 8004df6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f383 8810 	msr	PRIMASK, r3
}
 8004e04:	46c0      	nop			; (mov r8, r8)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2190      	movs	r1, #144	; 0x90
 8004e12:	0049      	lsls	r1, r1, #1
 8004e14:	430a      	orrs	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	f383 8810 	msr	PRIMASK, r3
}
 8004e22:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	0018      	movs	r0, r3
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	b00c      	add	sp, #48	; 0x30
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	000001ff 	.word	0x000001ff
 8004e34:	080050ed 	.word	0x080050ed
 8004e38:	08004f85 	.word	0x08004f85

08004e3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08e      	sub	sp, #56	; 0x38
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e44:	f3ef 8310 	mrs	r3, PRIMASK
 8004e48:	617b      	str	r3, [r7, #20]
  return(result);
 8004e4a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e4e:	2301      	movs	r3, #1
 8004e50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	f383 8810 	msr	PRIMASK, r3
}
 8004e58:	46c0      	nop			; (mov r8, r8)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4925      	ldr	r1, [pc, #148]	; (8004efc <UART_EndRxTransfer+0xc0>)
 8004e66:	400a      	ands	r2, r1
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	f383 8810 	msr	PRIMASK, r3
}
 8004e74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e76:	f3ef 8310 	mrs	r3, PRIMASK
 8004e7a:	623b      	str	r3, [r7, #32]
  return(result);
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e80:	2301      	movs	r3, #1
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	f383 8810 	msr	PRIMASK, r3
}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2101      	movs	r1, #1
 8004e98:	438a      	bics	r2, r1
 8004e9a:	609a      	str	r2, [r3, #8]
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	f383 8810 	msr	PRIMASK, r3
}
 8004ea6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d118      	bne.n	8004ee2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004eb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eb6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eba:	2301      	movs	r3, #1
 8004ebc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f383 8810 	msr	PRIMASK, r3
}
 8004ec4:	46c0      	nop			; (mov r8, r8)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2110      	movs	r1, #16
 8004ed2:	438a      	bics	r2, r1
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f383 8810 	msr	PRIMASK, r3
}
 8004ee0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004ef4:	46c0      	nop			; (mov r8, r8)
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	b00e      	add	sp, #56	; 0x38
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	fffffedf 	.word	0xfffffedf

08004f00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	225a      	movs	r2, #90	; 0x5a
 8004f12:	2100      	movs	r1, #0
 8004f14:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2252      	movs	r2, #82	; 0x52
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	0018      	movs	r0, r3
 8004f22:	f7ff fa67 	bl	80043f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b004      	add	sp, #16
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b086      	sub	sp, #24
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f36:	f3ef 8310 	mrs	r3, PRIMASK
 8004f3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	2301      	movs	r3, #1
 8004f42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f383 8810 	msr	PRIMASK, r3
}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2140      	movs	r1, #64	; 0x40
 8004f58:	438a      	bics	r2, r1
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f383 8810 	msr	PRIMASK, r3
}
 8004f66:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	0018      	movs	r0, r3
 8004f78:	f7ff fa34 	bl	80043e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f7c:	46c0      	nop			; (mov r8, r8)
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b006      	add	sp, #24
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b090      	sub	sp, #64	; 0x40
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004f8c:	203e      	movs	r0, #62	; 0x3e
 8004f8e:	183b      	adds	r3, r7, r0
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	215c      	movs	r1, #92	; 0x5c
 8004f94:	5a52      	ldrh	r2, [r2, r1]
 8004f96:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f9c:	2b22      	cmp	r3, #34	; 0x22
 8004f9e:	d000      	beq.n	8004fa2 <UART_RxISR_8BIT+0x1e>
 8004fa0:	e095      	b.n	80050ce <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fa8:	213c      	movs	r1, #60	; 0x3c
 8004faa:	187b      	adds	r3, r7, r1
 8004fac:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004fae:	187b      	adds	r3, r7, r1
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	183b      	adds	r3, r7, r0
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	b2d9      	uxtb	r1, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbe:	400a      	ands	r2, r1
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	225a      	movs	r2, #90	; 0x5a
 8004fd2:	5a9b      	ldrh	r3, [r3, r2]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b299      	uxth	r1, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	225a      	movs	r2, #90	; 0x5a
 8004fde:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	225a      	movs	r2, #90	; 0x5a
 8004fe4:	5a9b      	ldrh	r3, [r3, r2]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d178      	bne.n	80050de <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fec:	f3ef 8310 	mrs	r3, PRIMASK
 8004ff0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ff2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ff4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	f383 8810 	msr	PRIMASK, r3
}
 8005000:	46c0      	nop			; (mov r8, r8)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4936      	ldr	r1, [pc, #216]	; (80050e8 <UART_RxISR_8BIT+0x164>)
 800500e:	400a      	ands	r2, r1
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005014:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	f383 8810 	msr	PRIMASK, r3
}
 800501c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800501e:	f3ef 8310 	mrs	r3, PRIMASK
 8005022:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005026:	637b      	str	r3, [r7, #52]	; 0x34
 8005028:	2301      	movs	r3, #1
 800502a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	f383 8810 	msr	PRIMASK, r3
}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2101      	movs	r1, #1
 8005040:	438a      	bics	r2, r1
 8005042:	609a      	str	r2, [r3, #8]
 8005044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005046:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504a:	f383 8810 	msr	PRIMASK, r3
}
 800504e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005060:	2b01      	cmp	r3, #1
 8005062:	d12f      	bne.n	80050c4 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800506a:	f3ef 8310 	mrs	r3, PRIMASK
 800506e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005070:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005072:	633b      	str	r3, [r7, #48]	; 0x30
 8005074:	2301      	movs	r3, #1
 8005076:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f383 8810 	msr	PRIMASK, r3
}
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2110      	movs	r1, #16
 800508c:	438a      	bics	r2, r1
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f383 8810 	msr	PRIMASK, r3
}
 800509a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	2210      	movs	r2, #16
 80050a4:	4013      	ands	r3, r2
 80050a6:	2b10      	cmp	r3, #16
 80050a8:	d103      	bne.n	80050b2 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2210      	movs	r2, #16
 80050b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2258      	movs	r2, #88	; 0x58
 80050b6:	5a9a      	ldrh	r2, [r3, r2]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	0011      	movs	r1, r2
 80050bc:	0018      	movs	r0, r3
 80050be:	f7ff f9a1 	bl	8004404 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050c2:	e00c      	b.n	80050de <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	0018      	movs	r0, r3
 80050c8:	f7fc fe78 	bl	8001dbc <HAL_UART_RxCpltCallback>
}
 80050cc:	e007      	b.n	80050de <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	699a      	ldr	r2, [r3, #24]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2108      	movs	r1, #8
 80050da:	430a      	orrs	r2, r1
 80050dc:	619a      	str	r2, [r3, #24]
}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	46bd      	mov	sp, r7
 80050e2:	b010      	add	sp, #64	; 0x40
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	fffffedf 	.word	0xfffffedf

080050ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b090      	sub	sp, #64	; 0x40
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80050f4:	203e      	movs	r0, #62	; 0x3e
 80050f6:	183b      	adds	r3, r7, r0
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	215c      	movs	r1, #92	; 0x5c
 80050fc:	5a52      	ldrh	r2, [r2, r1]
 80050fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005104:	2b22      	cmp	r3, #34	; 0x22
 8005106:	d000      	beq.n	800510a <UART_RxISR_16BIT+0x1e>
 8005108:	e095      	b.n	8005236 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005110:	213c      	movs	r1, #60	; 0x3c
 8005112:	187b      	adds	r3, r7, r1
 8005114:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800511c:	187b      	adds	r3, r7, r1
 800511e:	183a      	adds	r2, r7, r0
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	8812      	ldrh	r2, [r2, #0]
 8005124:	4013      	ands	r3, r2
 8005126:	b29a      	uxth	r2, r3
 8005128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005130:	1c9a      	adds	r2, r3, #2
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	225a      	movs	r2, #90	; 0x5a
 800513a:	5a9b      	ldrh	r3, [r3, r2]
 800513c:	b29b      	uxth	r3, r3
 800513e:	3b01      	subs	r3, #1
 8005140:	b299      	uxth	r1, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	225a      	movs	r2, #90	; 0x5a
 8005146:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	225a      	movs	r2, #90	; 0x5a
 800514c:	5a9b      	ldrh	r3, [r3, r2]
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d178      	bne.n	8005246 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005154:	f3ef 8310 	mrs	r3, PRIMASK
 8005158:	617b      	str	r3, [r7, #20]
  return(result);
 800515a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800515c:	637b      	str	r3, [r7, #52]	; 0x34
 800515e:	2301      	movs	r3, #1
 8005160:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	f383 8810 	msr	PRIMASK, r3
}
 8005168:	46c0      	nop			; (mov r8, r8)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4936      	ldr	r1, [pc, #216]	; (8005250 <UART_RxISR_16BIT+0x164>)
 8005176:	400a      	ands	r2, r1
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	f383 8810 	msr	PRIMASK, r3
}
 8005184:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005186:	f3ef 8310 	mrs	r3, PRIMASK
 800518a:	623b      	str	r3, [r7, #32]
  return(result);
 800518c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518e:	633b      	str	r3, [r7, #48]	; 0x30
 8005190:	2301      	movs	r3, #1
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	f383 8810 	msr	PRIMASK, r3
}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2101      	movs	r1, #1
 80051a8:	438a      	bics	r2, r1
 80051aa:	609a      	str	r2, [r3, #8]
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	f383 8810 	msr	PRIMASK, r3
}
 80051b6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d12f      	bne.n	800522c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051d2:	f3ef 8310 	mrs	r3, PRIMASK
 80051d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80051d8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051dc:	2301      	movs	r3, #1
 80051de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f383 8810 	msr	PRIMASK, r3
}
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2110      	movs	r1, #16
 80051f4:	438a      	bics	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f383 8810 	msr	PRIMASK, r3
}
 8005202:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	2210      	movs	r2, #16
 800520c:	4013      	ands	r3, r2
 800520e:	2b10      	cmp	r3, #16
 8005210:	d103      	bne.n	800521a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2210      	movs	r2, #16
 8005218:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2258      	movs	r2, #88	; 0x58
 800521e:	5a9a      	ldrh	r2, [r3, r2]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	0011      	movs	r1, r2
 8005224:	0018      	movs	r0, r3
 8005226:	f7ff f8ed 	bl	8004404 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800522a:	e00c      	b.n	8005246 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	0018      	movs	r0, r3
 8005230:	f7fc fdc4 	bl	8001dbc <HAL_UART_RxCpltCallback>
}
 8005234:	e007      	b.n	8005246 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699a      	ldr	r2, [r3, #24]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2108      	movs	r1, #8
 8005242:	430a      	orrs	r2, r1
 8005244:	619a      	str	r2, [r3, #24]
}
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	46bd      	mov	sp, r7
 800524a:	b010      	add	sp, #64	; 0x40
 800524c:	bd80      	pop	{r7, pc}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	fffffedf 	.word	0xfffffedf

08005254 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800525c:	46c0      	nop			; (mov r8, r8)
 800525e:	46bd      	mov	sp, r7
 8005260:	b002      	add	sp, #8
 8005262:	bd80      	pop	{r7, pc}

08005264 <__libc_init_array>:
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	2600      	movs	r6, #0
 8005268:	4d0c      	ldr	r5, [pc, #48]	; (800529c <__libc_init_array+0x38>)
 800526a:	4c0d      	ldr	r4, [pc, #52]	; (80052a0 <__libc_init_array+0x3c>)
 800526c:	1b64      	subs	r4, r4, r5
 800526e:	10a4      	asrs	r4, r4, #2
 8005270:	42a6      	cmp	r6, r4
 8005272:	d109      	bne.n	8005288 <__libc_init_array+0x24>
 8005274:	2600      	movs	r6, #0
 8005276:	f000 f821 	bl	80052bc <_init>
 800527a:	4d0a      	ldr	r5, [pc, #40]	; (80052a4 <__libc_init_array+0x40>)
 800527c:	4c0a      	ldr	r4, [pc, #40]	; (80052a8 <__libc_init_array+0x44>)
 800527e:	1b64      	subs	r4, r4, r5
 8005280:	10a4      	asrs	r4, r4, #2
 8005282:	42a6      	cmp	r6, r4
 8005284:	d105      	bne.n	8005292 <__libc_init_array+0x2e>
 8005286:	bd70      	pop	{r4, r5, r6, pc}
 8005288:	00b3      	lsls	r3, r6, #2
 800528a:	58eb      	ldr	r3, [r5, r3]
 800528c:	4798      	blx	r3
 800528e:	3601      	adds	r6, #1
 8005290:	e7ee      	b.n	8005270 <__libc_init_array+0xc>
 8005292:	00b3      	lsls	r3, r6, #2
 8005294:	58eb      	ldr	r3, [r5, r3]
 8005296:	4798      	blx	r3
 8005298:	3601      	adds	r6, #1
 800529a:	e7f2      	b.n	8005282 <__libc_init_array+0x1e>
 800529c:	08005440 	.word	0x08005440
 80052a0:	08005440 	.word	0x08005440
 80052a4:	08005440 	.word	0x08005440
 80052a8:	08005444 	.word	0x08005444

080052ac <memset>:
 80052ac:	0003      	movs	r3, r0
 80052ae:	1882      	adds	r2, r0, r2
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d100      	bne.n	80052b6 <memset+0xa>
 80052b4:	4770      	bx	lr
 80052b6:	7019      	strb	r1, [r3, #0]
 80052b8:	3301      	adds	r3, #1
 80052ba:	e7f9      	b.n	80052b0 <memset+0x4>

080052bc <_init>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	46c0      	nop			; (mov r8, r8)
 80052c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c2:	bc08      	pop	{r3}
 80052c4:	469e      	mov	lr, r3
 80052c6:	4770      	bx	lr

080052c8 <_fini>:
 80052c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ce:	bc08      	pop	{r3}
 80052d0:	469e      	mov	lr, r3
 80052d2:	4770      	bx	lr
